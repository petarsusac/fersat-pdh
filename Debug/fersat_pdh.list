
fersat_pdh.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021b4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800233c  0800233c  0001233c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800234c  0800234c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  0800234c  0800234c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800234c  0800234c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800234c  0800234c  0001234c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002350  08002350  00012350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08002354  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000004  08002358  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  08002358  000200bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000080df  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001652  00000000  00000000  00028113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000828  00000000  00000000  00029768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000760  00000000  00000000  00029f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d8e0  00000000  00000000  0002a6f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006154  00000000  00000000  00047fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a2f16  00000000  00000000  0004e124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f103a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002124  00000000  00000000  000f108c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002324 	.word	0x08002324

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08002324 	.word	0x08002324

080001c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__NVIC_GetPriorityGrouping+0x18>)
 80001ce:	68db      	ldr	r3, [r3, #12]
 80001d0:	0a1b      	lsrs	r3, r3, #8
 80001d2:	f003 0307 	and.w	r3, r3, #7
}
 80001d6:	4618      	mov	r0, r3
 80001d8:	46bd      	mov	sp, r7
 80001da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001de:	4770      	bx	lr
 80001e0:	e000ed00 	.word	0xe000ed00

080001e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	4603      	mov	r3, r0
 80001ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	db0b      	blt.n	800020e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	f003 021f 	and.w	r2, r3, #31
 80001fc:	4907      	ldr	r1, [pc, #28]	; (800021c <__NVIC_EnableIRQ+0x38>)
 80001fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000202:	095b      	lsrs	r3, r3, #5
 8000204:	2001      	movs	r0, #1
 8000206:	fa00 f202 	lsl.w	r2, r0, r2
 800020a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800020e:	bf00      	nop
 8000210:	370c      	adds	r7, #12
 8000212:	46bd      	mov	sp, r7
 8000214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000218:	4770      	bx	lr
 800021a:	bf00      	nop
 800021c:	e000e100 	.word	0xe000e100

08000220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	4603      	mov	r3, r0
 8000228:	6039      	str	r1, [r7, #0]
 800022a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800022c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000230:	2b00      	cmp	r3, #0
 8000232:	db0a      	blt.n	800024a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000234:	683b      	ldr	r3, [r7, #0]
 8000236:	b2da      	uxtb	r2, r3
 8000238:	490c      	ldr	r1, [pc, #48]	; (800026c <__NVIC_SetPriority+0x4c>)
 800023a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800023e:	0112      	lsls	r2, r2, #4
 8000240:	b2d2      	uxtb	r2, r2
 8000242:	440b      	add	r3, r1
 8000244:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000248:	e00a      	b.n	8000260 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	b2da      	uxtb	r2, r3
 800024e:	4908      	ldr	r1, [pc, #32]	; (8000270 <__NVIC_SetPriority+0x50>)
 8000250:	79fb      	ldrb	r3, [r7, #7]
 8000252:	f003 030f 	and.w	r3, r3, #15
 8000256:	3b04      	subs	r3, #4
 8000258:	0112      	lsls	r2, r2, #4
 800025a:	b2d2      	uxtb	r2, r2
 800025c:	440b      	add	r3, r1
 800025e:	761a      	strb	r2, [r3, #24]
}
 8000260:	bf00      	nop
 8000262:	370c      	adds	r7, #12
 8000264:	46bd      	mov	sp, r7
 8000266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026a:	4770      	bx	lr
 800026c:	e000e100 	.word	0xe000e100
 8000270:	e000ed00 	.word	0xe000ed00

08000274 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000274:	b480      	push	{r7}
 8000276:	b089      	sub	sp, #36	; 0x24
 8000278:	af00      	add	r7, sp, #0
 800027a:	60f8      	str	r0, [r7, #12]
 800027c:	60b9      	str	r1, [r7, #8]
 800027e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	f003 0307 	and.w	r3, r3, #7
 8000286:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000288:	69fb      	ldr	r3, [r7, #28]
 800028a:	f1c3 0307 	rsb	r3, r3, #7
 800028e:	2b04      	cmp	r3, #4
 8000290:	bf28      	it	cs
 8000292:	2304      	movcs	r3, #4
 8000294:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000296:	69fb      	ldr	r3, [r7, #28]
 8000298:	3304      	adds	r3, #4
 800029a:	2b06      	cmp	r3, #6
 800029c:	d902      	bls.n	80002a4 <NVIC_EncodePriority+0x30>
 800029e:	69fb      	ldr	r3, [r7, #28]
 80002a0:	3b03      	subs	r3, #3
 80002a2:	e000      	b.n	80002a6 <NVIC_EncodePriority+0x32>
 80002a4:	2300      	movs	r3, #0
 80002a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80002ac:	69bb      	ldr	r3, [r7, #24]
 80002ae:	fa02 f303 	lsl.w	r3, r2, r3
 80002b2:	43da      	mvns	r2, r3
 80002b4:	68bb      	ldr	r3, [r7, #8]
 80002b6:	401a      	ands	r2, r3
 80002b8:	697b      	ldr	r3, [r7, #20]
 80002ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80002c0:	697b      	ldr	r3, [r7, #20]
 80002c2:	fa01 f303 	lsl.w	r3, r1, r3
 80002c6:	43d9      	mvns	r1, r3
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002cc:	4313      	orrs	r3, r2
         );
}
 80002ce:	4618      	mov	r0, r3
 80002d0:	3724      	adds	r7, #36	; 0x24
 80002d2:	46bd      	mov	sp, r7
 80002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d8:	4770      	bx	lr
	...

080002dc <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80002dc:	b480      	push	{r7}
 80002de:	b085      	sub	sp, #20
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80002e4:	4b08      	ldr	r3, [pc, #32]	; (8000308 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80002e8:	4907      	ldr	r1, [pc, #28]	; (8000308 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	4313      	orrs	r3, r2
 80002ee:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80002f0:	4b05      	ldr	r3, [pc, #20]	; (8000308 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	4013      	ands	r3, r2
 80002f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80002fa:	68fb      	ldr	r3, [r7, #12]
}
 80002fc:	bf00      	nop
 80002fe:	3714      	adds	r7, #20
 8000300:	46bd      	mov	sp, r7
 8000302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000306:	4770      	bx	lr
 8000308:	40021000 	.word	0x40021000

0800030c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 8000310:	2002      	movs	r0, #2
 8000312:	f7ff ffe3 	bl	80002dc <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA2_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000316:	f7ff ff57 	bl	80001c8 <__NVIC_GetPriorityGrouping>
 800031a:	4603      	mov	r3, r0
 800031c:	2200      	movs	r2, #0
 800031e:	2100      	movs	r1, #0
 8000320:	4618      	mov	r0, r3
 8000322:	f7ff ffa7 	bl	8000274 <NVIC_EncodePriority>
 8000326:	4603      	mov	r3, r0
 8000328:	4619      	mov	r1, r3
 800032a:	2038      	movs	r0, #56	; 0x38
 800032c:	f7ff ff78 	bl	8000220 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8000330:	2038      	movs	r0, #56	; 0x38
 8000332:	f7ff ff57 	bl	80001e4 <__NVIC_EnableIRQ>

}
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}
	...

0800033c <__NVIC_GetPriorityGrouping>:
{
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000340:	4b04      	ldr	r3, [pc, #16]	; (8000354 <__NVIC_GetPriorityGrouping+0x18>)
 8000342:	68db      	ldr	r3, [r3, #12]
 8000344:	0a1b      	lsrs	r3, r3, #8
 8000346:	f003 0307 	and.w	r3, r3, #7
}
 800034a:	4618      	mov	r0, r3
 800034c:	46bd      	mov	sp, r7
 800034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000352:	4770      	bx	lr
 8000354:	e000ed00 	.word	0xe000ed00

08000358 <__NVIC_EnableIRQ>:
{
 8000358:	b480      	push	{r7}
 800035a:	b083      	sub	sp, #12
 800035c:	af00      	add	r7, sp, #0
 800035e:	4603      	mov	r3, r0
 8000360:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000366:	2b00      	cmp	r3, #0
 8000368:	db0b      	blt.n	8000382 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800036a:	79fb      	ldrb	r3, [r7, #7]
 800036c:	f003 021f 	and.w	r2, r3, #31
 8000370:	4907      	ldr	r1, [pc, #28]	; (8000390 <__NVIC_EnableIRQ+0x38>)
 8000372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000376:	095b      	lsrs	r3, r3, #5
 8000378:	2001      	movs	r0, #1
 800037a:	fa00 f202 	lsl.w	r2, r0, r2
 800037e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000382:	bf00      	nop
 8000384:	370c      	adds	r7, #12
 8000386:	46bd      	mov	sp, r7
 8000388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	e000e100 	.word	0xe000e100

08000394 <__NVIC_SetPriority>:
{
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0
 800039a:	4603      	mov	r3, r0
 800039c:	6039      	str	r1, [r7, #0]
 800039e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	db0a      	blt.n	80003be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003a8:	683b      	ldr	r3, [r7, #0]
 80003aa:	b2da      	uxtb	r2, r3
 80003ac:	490c      	ldr	r1, [pc, #48]	; (80003e0 <__NVIC_SetPriority+0x4c>)
 80003ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003b2:	0112      	lsls	r2, r2, #4
 80003b4:	b2d2      	uxtb	r2, r2
 80003b6:	440b      	add	r3, r1
 80003b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80003bc:	e00a      	b.n	80003d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003be:	683b      	ldr	r3, [r7, #0]
 80003c0:	b2da      	uxtb	r2, r3
 80003c2:	4908      	ldr	r1, [pc, #32]	; (80003e4 <__NVIC_SetPriority+0x50>)
 80003c4:	79fb      	ldrb	r3, [r7, #7]
 80003c6:	f003 030f 	and.w	r3, r3, #15
 80003ca:	3b04      	subs	r3, #4
 80003cc:	0112      	lsls	r2, r2, #4
 80003ce:	b2d2      	uxtb	r2, r2
 80003d0:	440b      	add	r3, r1
 80003d2:	761a      	strb	r2, [r3, #24]
}
 80003d4:	bf00      	nop
 80003d6:	370c      	adds	r7, #12
 80003d8:	46bd      	mov	sp, r7
 80003da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003de:	4770      	bx	lr
 80003e0:	e000e100 	.word	0xe000e100
 80003e4:	e000ed00 	.word	0xe000ed00

080003e8 <NVIC_EncodePriority>:
{
 80003e8:	b480      	push	{r7}
 80003ea:	b089      	sub	sp, #36	; 0x24
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	60f8      	str	r0, [r7, #12]
 80003f0:	60b9      	str	r1, [r7, #8]
 80003f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80003f4:	68fb      	ldr	r3, [r7, #12]
 80003f6:	f003 0307 	and.w	r3, r3, #7
 80003fa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80003fc:	69fb      	ldr	r3, [r7, #28]
 80003fe:	f1c3 0307 	rsb	r3, r3, #7
 8000402:	2b04      	cmp	r3, #4
 8000404:	bf28      	it	cs
 8000406:	2304      	movcs	r3, #4
 8000408:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800040a:	69fb      	ldr	r3, [r7, #28]
 800040c:	3304      	adds	r3, #4
 800040e:	2b06      	cmp	r3, #6
 8000410:	d902      	bls.n	8000418 <NVIC_EncodePriority+0x30>
 8000412:	69fb      	ldr	r3, [r7, #28]
 8000414:	3b03      	subs	r3, #3
 8000416:	e000      	b.n	800041a <NVIC_EncodePriority+0x32>
 8000418:	2300      	movs	r3, #0
 800041a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800041c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000420:	69bb      	ldr	r3, [r7, #24]
 8000422:	fa02 f303 	lsl.w	r3, r2, r3
 8000426:	43da      	mvns	r2, r3
 8000428:	68bb      	ldr	r3, [r7, #8]
 800042a:	401a      	ands	r2, r3
 800042c:	697b      	ldr	r3, [r7, #20]
 800042e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000430:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000434:	697b      	ldr	r3, [r7, #20]
 8000436:	fa01 f303 	lsl.w	r3, r1, r3
 800043a:	43d9      	mvns	r1, r3
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000440:	4313      	orrs	r3, r2
}
 8000442:	4618      	mov	r0, r3
 8000444:	3724      	adds	r7, #36	; 0x24
 8000446:	46bd      	mov	sp, r7
 8000448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044c:	4770      	bx	lr
	...

08000450 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000450:	b480      	push	{r7}
 8000452:	b085      	sub	sp, #20
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000458:	4b08      	ldr	r3, [pc, #32]	; (800047c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800045a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800045c:	4907      	ldr	r1, [pc, #28]	; (800047c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	4313      	orrs	r3, r2
 8000462:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000464:	4b05      	ldr	r3, [pc, #20]	; (800047c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000466:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	4013      	ands	r3, r2
 800046c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800046e:	68fb      	ldr	r3, [r7, #12]
}
 8000470:	bf00      	nop
 8000472:	3714      	adds	r7, #20
 8000474:	46bd      	mov	sp, r7
 8000476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047a:	4770      	bx	lr
 800047c:	40021000 	.word	0x40021000

08000480 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000480:	b480      	push	{r7}
 8000482:	b087      	sub	sp, #28
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
 8000488:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 800048a:	4a17      	ldr	r2, [pc, #92]	; (80004e8 <LL_SYSCFG_SetEXTISource+0x68>)
 800048c:	683b      	ldr	r3, [r7, #0]
 800048e:	b2db      	uxtb	r3, r3
 8000490:	3302      	adds	r3, #2
 8000492:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000496:	683b      	ldr	r3, [r7, #0]
 8000498:	0c1b      	lsrs	r3, r3, #16
 800049a:	43db      	mvns	r3, r3
 800049c:	ea02 0103 	and.w	r1, r2, r3
 80004a0:	683b      	ldr	r3, [r7, #0]
 80004a2:	0c1b      	lsrs	r3, r3, #16
 80004a4:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80004a6:	693b      	ldr	r3, [r7, #16]
 80004a8:	fa93 f3a3 	rbit	r3, r3
 80004ac:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80004b2:	697b      	ldr	r3, [r7, #20]
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d101      	bne.n	80004bc <LL_SYSCFG_SetEXTISource+0x3c>
  {
    return 32U;
 80004b8:	2320      	movs	r3, #32
 80004ba:	e003      	b.n	80004c4 <LL_SYSCFG_SetEXTISource+0x44>
  }
  return __builtin_clz(value);
 80004bc:	697b      	ldr	r3, [r7, #20]
 80004be:	fab3 f383 	clz	r3, r3
 80004c2:	b2db      	uxtb	r3, r3
 80004c4:	461a      	mov	r2, r3
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	fa03 f202 	lsl.w	r2, r3, r2
 80004cc:	4806      	ldr	r0, [pc, #24]	; (80004e8 <LL_SYSCFG_SetEXTISource+0x68>)
 80004ce:	683b      	ldr	r3, [r7, #0]
 80004d0:	b2db      	uxtb	r3, r3
 80004d2:	430a      	orrs	r2, r1
 80004d4:	3302      	adds	r3, #2
 80004d6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80004da:	bf00      	nop
 80004dc:	371c      	adds	r7, #28
 80004de:	46bd      	mov	sp, r7
 80004e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	40010000 	.word	0x40010000

080004ec <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b08b      	sub	sp, #44	; 0x2c
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	60f8      	str	r0, [r7, #12]
 80004f4:	60b9      	str	r1, [r7, #8]
 80004f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	681a      	ldr	r2, [r3, #0]
 80004fc:	68bb      	ldr	r3, [r7, #8]
 80004fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000500:	697b      	ldr	r3, [r7, #20]
 8000502:	fa93 f3a3 	rbit	r3, r3
 8000506:	613b      	str	r3, [r7, #16]
  return result;
 8000508:	693b      	ldr	r3, [r7, #16]
 800050a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800050c:	69bb      	ldr	r3, [r7, #24]
 800050e:	2b00      	cmp	r3, #0
 8000510:	d101      	bne.n	8000516 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8000512:	2320      	movs	r3, #32
 8000514:	e003      	b.n	800051e <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8000516:	69bb      	ldr	r3, [r7, #24]
 8000518:	fab3 f383 	clz	r3, r3
 800051c:	b2db      	uxtb	r3, r3
 800051e:	005b      	lsls	r3, r3, #1
 8000520:	2103      	movs	r1, #3
 8000522:	fa01 f303 	lsl.w	r3, r1, r3
 8000526:	43db      	mvns	r3, r3
 8000528:	401a      	ands	r2, r3
 800052a:	68bb      	ldr	r3, [r7, #8]
 800052c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800052e:	6a3b      	ldr	r3, [r7, #32]
 8000530:	fa93 f3a3 	rbit	r3, r3
 8000534:	61fb      	str	r3, [r7, #28]
  return result;
 8000536:	69fb      	ldr	r3, [r7, #28]
 8000538:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800053a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800053c:	2b00      	cmp	r3, #0
 800053e:	d101      	bne.n	8000544 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8000540:	2320      	movs	r3, #32
 8000542:	e003      	b.n	800054c <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000546:	fab3 f383 	clz	r3, r3
 800054a:	b2db      	uxtb	r3, r3
 800054c:	005b      	lsls	r3, r3, #1
 800054e:	6879      	ldr	r1, [r7, #4]
 8000550:	fa01 f303 	lsl.w	r3, r1, r3
 8000554:	431a      	orrs	r2, r3
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	601a      	str	r2, [r3, #0]
}
 800055a:	bf00      	nop
 800055c:	372c      	adds	r7, #44	; 0x2c
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr

08000566 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000566:	b480      	push	{r7}
 8000568:	b08b      	sub	sp, #44	; 0x2c
 800056a:	af00      	add	r7, sp, #0
 800056c:	60f8      	str	r0, [r7, #12]
 800056e:	60b9      	str	r1, [r7, #8]
 8000570:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	68da      	ldr	r2, [r3, #12]
 8000576:	68bb      	ldr	r3, [r7, #8]
 8000578:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800057a:	697b      	ldr	r3, [r7, #20]
 800057c:	fa93 f3a3 	rbit	r3, r3
 8000580:	613b      	str	r3, [r7, #16]
  return result;
 8000582:	693b      	ldr	r3, [r7, #16]
 8000584:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000586:	69bb      	ldr	r3, [r7, #24]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d101      	bne.n	8000590 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800058c:	2320      	movs	r3, #32
 800058e:	e003      	b.n	8000598 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8000590:	69bb      	ldr	r3, [r7, #24]
 8000592:	fab3 f383 	clz	r3, r3
 8000596:	b2db      	uxtb	r3, r3
 8000598:	005b      	lsls	r3, r3, #1
 800059a:	2103      	movs	r1, #3
 800059c:	fa01 f303 	lsl.w	r3, r1, r3
 80005a0:	43db      	mvns	r3, r3
 80005a2:	401a      	ands	r2, r3
 80005a4:	68bb      	ldr	r3, [r7, #8]
 80005a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80005a8:	6a3b      	ldr	r3, [r7, #32]
 80005aa:	fa93 f3a3 	rbit	r3, r3
 80005ae:	61fb      	str	r3, [r7, #28]
  return result;
 80005b0:	69fb      	ldr	r3, [r7, #28]
 80005b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80005b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d101      	bne.n	80005be <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80005ba:	2320      	movs	r3, #32
 80005bc:	e003      	b.n	80005c6 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80005be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005c0:	fab3 f383 	clz	r3, r3
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	005b      	lsls	r3, r3, #1
 80005c8:	6879      	ldr	r1, [r7, #4]
 80005ca:	fa01 f303 	lsl.w	r3, r1, r3
 80005ce:	431a      	orrs	r2, r3
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	60da      	str	r2, [r3, #12]
}
 80005d4:	bf00      	nop
 80005d6:	372c      	adds	r7, #44	; 0x2c
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr

080005e0 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	683a      	ldr	r2, [r7, #0]
 80005ee:	619a      	str	r2, [r3, #24]
}
 80005f0:	bf00      	nop
 80005f2:	370c      	adds	r7, #12
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr

080005fc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b08a      	sub	sp, #40	; 0x28
 8000600:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000602:	f107 031c 	add.w	r3, r7, #28
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]
 800061c:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800061e:	2001      	movs	r0, #1
 8000620:	f7ff ff16 	bl	8000450 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000624:	2004      	movs	r0, #4
 8000626:	f7ff ff13 	bl	8000450 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3);
 800062a:	210e      	movs	r1, #14
 800062c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000630:	f7ff ffd6 	bl	80005e0 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_9);
 8000634:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000638:	482b      	ldr	r0, [pc, #172]	; (80006e8 <MX_GPIO_Init+0xec>)
 800063a:	f7ff ffd1 	bl	80005e0 <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 800063e:	230e      	movs	r3, #14
 8000640:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000642:	2301      	movs	r3, #1
 8000644:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000646:	2300      	movs	r3, #0
 8000648:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800064a:	2300      	movs	r3, #0
 800064c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800064e:	2300      	movs	r3, #0
 8000650:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	4619      	mov	r1, r3
 8000656:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800065a:	f001 fc35 	bl	8001ec8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 800065e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000662:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000664:	2301      	movs	r3, #1
 8000666:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000668:	2300      	movs	r3, #0
 800066a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800066c:	2300      	movs	r3, #0
 800066e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000670:	2300      	movs	r3, #0
 8000672:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000674:	1d3b      	adds	r3, r7, #4
 8000676:	4619      	mov	r1, r3
 8000678:	481b      	ldr	r0, [pc, #108]	; (80006e8 <MX_GPIO_Init+0xec>)
 800067a:	f001 fc25 	bl	8001ec8 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE4);
 800067e:	491b      	ldr	r1, [pc, #108]	; (80006ec <MX_GPIO_Init+0xf0>)
 8000680:	2002      	movs	r0, #2
 8000682:	f7ff fefd 	bl	8000480 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_4;
 8000686:	2310      	movs	r3, #16
 8000688:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 800068a:	2300      	movs	r3, #0
 800068c:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 800068e:	2301      	movs	r3, #1
 8000690:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000694:	2300      	movs	r3, #0
 8000696:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800069a:	2302      	movs	r3, #2
 800069c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80006a0:	f107 031c 	add.w	r3, r7, #28
 80006a4:	4618      	mov	r0, r3
 80006a6:	f001 f9cd 	bl	8001a44 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(GPIOC, LL_GPIO_PIN_4, LL_GPIO_PULL_NO);
 80006aa:	2200      	movs	r2, #0
 80006ac:	2110      	movs	r1, #16
 80006ae:	480e      	ldr	r0, [pc, #56]	; (80006e8 <MX_GPIO_Init+0xec>)
 80006b0:	f7ff ff59 	bl	8000566 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_4, LL_GPIO_MODE_INPUT);
 80006b4:	2200      	movs	r2, #0
 80006b6:	2110      	movs	r1, #16
 80006b8:	480b      	ldr	r0, [pc, #44]	; (80006e8 <MX_GPIO_Init+0xec>)
 80006ba:	f7ff ff17 	bl	80004ec <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80006be:	f7ff fe3d 	bl	800033c <__NVIC_GetPriorityGrouping>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2200      	movs	r2, #0
 80006c6:	2100      	movs	r1, #0
 80006c8:	4618      	mov	r0, r3
 80006ca:	f7ff fe8d 	bl	80003e8 <NVIC_EncodePriority>
 80006ce:	4603      	mov	r3, r0
 80006d0:	4619      	mov	r1, r3
 80006d2:	200a      	movs	r0, #10
 80006d4:	f7ff fe5e 	bl	8000394 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI4_IRQn);
 80006d8:	200a      	movs	r0, #10
 80006da:	f7ff fe3d 	bl	8000358 <__NVIC_EnableIRQ>

}
 80006de:	bf00      	nop
 80006e0:	3728      	adds	r7, #40	; 0x28
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	48000800 	.word	0x48000800
 80006ec:	000f0001 	.word	0x000f0001

080006f0 <__NVIC_SetPriorityGrouping>:
{
 80006f0:	b480      	push	{r7}
 80006f2:	b085      	sub	sp, #20
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	f003 0307 	and.w	r3, r3, #7
 80006fe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000700:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <__NVIC_SetPriorityGrouping+0x44>)
 8000702:	68db      	ldr	r3, [r3, #12]
 8000704:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000706:	68ba      	ldr	r2, [r7, #8]
 8000708:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800070c:	4013      	ands	r3, r2
 800070e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000718:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800071c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000720:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000722:	4a04      	ldr	r2, [pc, #16]	; (8000734 <__NVIC_SetPriorityGrouping+0x44>)
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	60d3      	str	r3, [r2, #12]
}
 8000728:	bf00      	nop
 800072a:	3714      	adds	r7, #20
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr
 8000734:	e000ed00 	.word	0xe000ed00

08000738 <__NVIC_GetPriorityGrouping>:
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800073c:	4b04      	ldr	r3, [pc, #16]	; (8000750 <__NVIC_GetPriorityGrouping+0x18>)
 800073e:	68db      	ldr	r3, [r3, #12]
 8000740:	0a1b      	lsrs	r3, r3, #8
 8000742:	f003 0307 	and.w	r3, r3, #7
}
 8000746:	4618      	mov	r0, r3
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr
 8000750:	e000ed00 	.word	0xe000ed00

08000754 <__NVIC_EnableIRQ>:
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800075e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000762:	2b00      	cmp	r3, #0
 8000764:	db0b      	blt.n	800077e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000766:	79fb      	ldrb	r3, [r7, #7]
 8000768:	f003 021f 	and.w	r2, r3, #31
 800076c:	4907      	ldr	r1, [pc, #28]	; (800078c <__NVIC_EnableIRQ+0x38>)
 800076e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000772:	095b      	lsrs	r3, r3, #5
 8000774:	2001      	movs	r0, #1
 8000776:	fa00 f202 	lsl.w	r2, r0, r2
 800077a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800077e:	bf00      	nop
 8000780:	370c      	adds	r7, #12
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	e000e100 	.word	0xe000e100

08000790 <__NVIC_DisableIRQ>:
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800079a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	db12      	blt.n	80007c8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	f003 021f 	and.w	r2, r3, #31
 80007a8:	490a      	ldr	r1, [pc, #40]	; (80007d4 <__NVIC_DisableIRQ+0x44>)
 80007aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ae:	095b      	lsrs	r3, r3, #5
 80007b0:	2001      	movs	r0, #1
 80007b2:	fa00 f202 	lsl.w	r2, r0, r2
 80007b6:	3320      	adds	r3, #32
 80007b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80007bc:	f3bf 8f4f 	dsb	sy
}
 80007c0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007c2:	f3bf 8f6f 	isb	sy
}
 80007c6:	bf00      	nop
}
 80007c8:	bf00      	nop
 80007ca:	370c      	adds	r7, #12
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr
 80007d4:	e000e100 	.word	0xe000e100

080007d8 <__NVIC_SetPriority>:
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	6039      	str	r1, [r7, #0]
 80007e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	db0a      	blt.n	8000802 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	b2da      	uxtb	r2, r3
 80007f0:	490c      	ldr	r1, [pc, #48]	; (8000824 <__NVIC_SetPriority+0x4c>)
 80007f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f6:	0112      	lsls	r2, r2, #4
 80007f8:	b2d2      	uxtb	r2, r2
 80007fa:	440b      	add	r3, r1
 80007fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000800:	e00a      	b.n	8000818 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	b2da      	uxtb	r2, r3
 8000806:	4908      	ldr	r1, [pc, #32]	; (8000828 <__NVIC_SetPriority+0x50>)
 8000808:	79fb      	ldrb	r3, [r7, #7]
 800080a:	f003 030f 	and.w	r3, r3, #15
 800080e:	3b04      	subs	r3, #4
 8000810:	0112      	lsls	r2, r2, #4
 8000812:	b2d2      	uxtb	r2, r2
 8000814:	440b      	add	r3, r1
 8000816:	761a      	strb	r2, [r3, #24]
}
 8000818:	bf00      	nop
 800081a:	370c      	adds	r7, #12
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr
 8000824:	e000e100 	.word	0xe000e100
 8000828:	e000ed00 	.word	0xe000ed00

0800082c <NVIC_EncodePriority>:
{
 800082c:	b480      	push	{r7}
 800082e:	b089      	sub	sp, #36	; 0x24
 8000830:	af00      	add	r7, sp, #0
 8000832:	60f8      	str	r0, [r7, #12]
 8000834:	60b9      	str	r1, [r7, #8]
 8000836:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	f003 0307 	and.w	r3, r3, #7
 800083e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000840:	69fb      	ldr	r3, [r7, #28]
 8000842:	f1c3 0307 	rsb	r3, r3, #7
 8000846:	2b04      	cmp	r3, #4
 8000848:	bf28      	it	cs
 800084a:	2304      	movcs	r3, #4
 800084c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800084e:	69fb      	ldr	r3, [r7, #28]
 8000850:	3304      	adds	r3, #4
 8000852:	2b06      	cmp	r3, #6
 8000854:	d902      	bls.n	800085c <NVIC_EncodePriority+0x30>
 8000856:	69fb      	ldr	r3, [r7, #28]
 8000858:	3b03      	subs	r3, #3
 800085a:	e000      	b.n	800085e <NVIC_EncodePriority+0x32>
 800085c:	2300      	movs	r3, #0
 800085e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000860:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000864:	69bb      	ldr	r3, [r7, #24]
 8000866:	fa02 f303 	lsl.w	r3, r2, r3
 800086a:	43da      	mvns	r2, r3
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	401a      	ands	r2, r3
 8000870:	697b      	ldr	r3, [r7, #20]
 8000872:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000874:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	fa01 f303 	lsl.w	r3, r1, r3
 800087e:	43d9      	mvns	r1, r3
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000884:	4313      	orrs	r3, r2
}
 8000886:	4618      	mov	r0, r3
 8000888:	3724      	adds	r7, #36	; 0x24
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
	...

08000894 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000894:	b480      	push	{r7}
 8000896:	b085      	sub	sp, #20
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 80008a2:	4a0c      	ldr	r2, [pc, #48]	; (80008d4 <LL_DMA_EnableChannel+0x40>)
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	4413      	add	r3, r2
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	461a      	mov	r2, r3
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	4413      	add	r3, r2
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4908      	ldr	r1, [pc, #32]	; (80008d4 <LL_DMA_EnableChannel+0x40>)
 80008b4:	683a      	ldr	r2, [r7, #0]
 80008b6:	440a      	add	r2, r1
 80008b8:	7812      	ldrb	r2, [r2, #0]
 80008ba:	4611      	mov	r1, r2
 80008bc:	68fa      	ldr	r2, [r7, #12]
 80008be:	440a      	add	r2, r1
 80008c0:	f043 0301 	orr.w	r3, r3, #1
 80008c4:	6013      	str	r3, [r2, #0]
}
 80008c6:	bf00      	nop
 80008c8:	3714      	adds	r7, #20
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	0800233c 	.word	0x0800233c

080008d8 <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80008d8:	b480      	push	{r7}
 80008da:	b085      	sub	sp, #20
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
 80008e0:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	60fb      	str	r3, [r7, #12]
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 80008e6:	4a0c      	ldr	r2, [pc, #48]	; (8000918 <LL_DMA_DisableChannel+0x40>)
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	4413      	add	r3, r2
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	461a      	mov	r2, r3
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	4413      	add	r3, r2
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4908      	ldr	r1, [pc, #32]	; (8000918 <LL_DMA_DisableChannel+0x40>)
 80008f8:	683a      	ldr	r2, [r7, #0]
 80008fa:	440a      	add	r2, r1
 80008fc:	7812      	ldrb	r2, [r2, #0]
 80008fe:	4611      	mov	r1, r2
 8000900:	68fa      	ldr	r2, [r7, #12]
 8000902:	440a      	add	r2, r1
 8000904:	f023 0301 	bic.w	r3, r3, #1
 8000908:	6013      	str	r3, [r2, #0]
}
 800090a:	bf00      	nop
 800090c:	3714      	adds	r7, #20
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	0800233c 	.word	0x0800233c

0800091c <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 800091c:	b480      	push	{r7}
 800091e:	b087      	sub	sp, #28
 8000920:	af00      	add	r7, sp, #0
 8000922:	60f8      	str	r0, [r7, #12]
 8000924:	60b9      	str	r1, [r7, #8]
 8000926:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 800092c:	4a0d      	ldr	r2, [pc, #52]	; (8000964 <LL_DMA_SetDataLength+0x48>)
 800092e:	68bb      	ldr	r3, [r7, #8]
 8000930:	4413      	add	r3, r2
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	461a      	mov	r2, r3
 8000936:	697b      	ldr	r3, [r7, #20]
 8000938:	4413      	add	r3, r2
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	0c1b      	lsrs	r3, r3, #16
 800093e:	041b      	lsls	r3, r3, #16
 8000940:	4908      	ldr	r1, [pc, #32]	; (8000964 <LL_DMA_SetDataLength+0x48>)
 8000942:	68ba      	ldr	r2, [r7, #8]
 8000944:	440a      	add	r2, r1
 8000946:	7812      	ldrb	r2, [r2, #0]
 8000948:	4611      	mov	r1, r2
 800094a:	697a      	ldr	r2, [r7, #20]
 800094c:	440a      	add	r2, r1
 800094e:	4611      	mov	r1, r2
 8000950:	687a      	ldr	r2, [r7, #4]
 8000952:	4313      	orrs	r3, r2
 8000954:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 8000956:	bf00      	nop
 8000958:	371c      	adds	r7, #28
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	0800233c 	.word	0x0800233c

08000968 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  MemoryAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAddress)
{
 8000968:	b480      	push	{r7}
 800096a:	b087      	sub	sp, #28
 800096c:	af00      	add	r7, sp, #0
 800096e:	60f8      	str	r0, [r7, #12]
 8000970:	60b9      	str	r1, [r7, #8]
 8000972:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 8000978:	4a07      	ldr	r2, [pc, #28]	; (8000998 <LL_DMA_SetMemoryAddress+0x30>)
 800097a:	68bb      	ldr	r3, [r7, #8]
 800097c:	4413      	add	r3, r2
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	461a      	mov	r2, r3
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	4413      	add	r3, r2
 8000986:	461a      	mov	r2, r3
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	60d3      	str	r3, [r2, #12]
}
 800098c:	bf00      	nop
 800098e:	371c      	adds	r7, #28
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr
 8000998:	0800233c 	.word	0x0800233c

0800099c <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  PeriphAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
 800099c:	b480      	push	{r7}
 800099e:	b087      	sub	sp, #28
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	60f8      	str	r0, [r7, #12]
 80009a4:	60b9      	str	r1, [r7, #8]
 80009a6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 80009ac:	4a07      	ldr	r2, [pc, #28]	; (80009cc <LL_DMA_SetPeriphAddress+0x30>)
 80009ae:	68bb      	ldr	r3, [r7, #8]
 80009b0:	4413      	add	r3, r2
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	461a      	mov	r2, r3
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	4413      	add	r3, r2
 80009ba:	461a      	mov	r2, r3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	6093      	str	r3, [r2, #8]
}
 80009c0:	bf00      	nop
 80009c2:	371c      	adds	r7, #28
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr
 80009cc:	0800233c 	.word	0x0800233c

080009d0 <LL_DMA_ClearFlag_TC1>:
  * @rmtoll IFCR         CTCIF1        LL_DMA_ClearFlag_TC1
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC1(DMA_TypeDef *DMAx)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2202      	movs	r2, #2
 80009dc:	605a      	str	r2, [r3, #4]
}
 80009de:	bf00      	nop
 80009e0:	370c      	adds	r7, #12
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
	...

080009ec <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b085      	sub	sp, #20
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
 80009f4:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;    
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 80009fa:	4a0c      	ldr	r2, [pc, #48]	; (8000a2c <LL_DMA_EnableIT_TC+0x40>)
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	4413      	add	r3, r2
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	461a      	mov	r2, r3
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	4413      	add	r3, r2
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4908      	ldr	r1, [pc, #32]	; (8000a2c <LL_DMA_EnableIT_TC+0x40>)
 8000a0c:	683a      	ldr	r2, [r7, #0]
 8000a0e:	440a      	add	r2, r1
 8000a10:	7812      	ldrb	r2, [r2, #0]
 8000a12:	4611      	mov	r1, r2
 8000a14:	68fa      	ldr	r2, [r7, #12]
 8000a16:	440a      	add	r2, r1
 8000a18:	f043 0302 	orr.w	r3, r3, #2
 8000a1c:	6013      	str	r3, [r2, #0]
}
 8000a1e:	bf00      	nop
 8000a20:	3714      	adds	r7, #20
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	0800233c 	.word	0x0800233c

08000a30 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000a34:	4b05      	ldr	r3, [pc, #20]	; (8000a4c <LL_RCC_HSI_Enable+0x1c>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a04      	ldr	r2, [pc, #16]	; (8000a4c <LL_RCC_HSI_Enable+0x1c>)
 8000a3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a3e:	6013      	str	r3, [r2, #0]
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	40021000 	.word	0x40021000

08000a50 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8000a54:	4b07      	ldr	r3, [pc, #28]	; (8000a74 <LL_RCC_HSI_IsReady+0x24>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a60:	d101      	bne.n	8000a66 <LL_RCC_HSI_IsReady+0x16>
 8000a62:	2301      	movs	r3, #1
 8000a64:	e000      	b.n	8000a68 <LL_RCC_HSI_IsReady+0x18>
 8000a66:	2300      	movs	r3, #0
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	40021000 	.word	0x40021000

08000a78 <LL_RCC_HSI_SetCalibTrimming>:
  * @param  Value Between Min_Data = 0 and Max_Data = 31 on STM32L43x/STM32L44x/STM32L47x/STM32L48x or
  *               between Min_Data = 0 and Max_Data = 127 on other devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000a80:	4b07      	ldr	r3, [pc, #28]	; (8000aa0 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	061b      	lsls	r3, r3, #24
 8000a8c:	4904      	ldr	r1, [pc, #16]	; (8000aa0 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000a8e:	4313      	orrs	r3, r2
 8000a90:	604b      	str	r3, [r1, #4]
}
 8000a92:	bf00      	nop
 8000a94:	370c      	adds	r7, #12
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	40021000 	.word	0x40021000

08000aa4 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000aac:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <LL_RCC_SetSysClkSource+0x24>)
 8000aae:	689b      	ldr	r3, [r3, #8]
 8000ab0:	f023 0203 	bic.w	r2, r3, #3
 8000ab4:	4904      	ldr	r1, [pc, #16]	; (8000ac8 <LL_RCC_SetSysClkSource+0x24>)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	608b      	str	r3, [r1, #8]
}
 8000abc:	bf00      	nop
 8000abe:	370c      	adds	r7, #12
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	40021000 	.word	0x40021000

08000acc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000ad0:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <LL_RCC_GetSysClkSource+0x18>)
 8000ad2:	689b      	ldr	r3, [r3, #8]
 8000ad4:	f003 030c 	and.w	r3, r3, #12
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	40021000 	.word	0x40021000

08000ae8 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000af0:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <LL_RCC_SetAHBPrescaler+0x24>)
 8000af2:	689b      	ldr	r3, [r3, #8]
 8000af4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000af8:	4904      	ldr	r1, [pc, #16]	; (8000b0c <LL_RCC_SetAHBPrescaler+0x24>)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4313      	orrs	r3, r2
 8000afe:	608b      	str	r3, [r1, #8]
}
 8000b00:	bf00      	nop
 8000b02:	370c      	adds	r7, #12
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	40021000 	.word	0x40021000

08000b10 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000b18:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000b1a:	689b      	ldr	r3, [r3, #8]
 8000b1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000b20:	4904      	ldr	r1, [pc, #16]	; (8000b34 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	4313      	orrs	r3, r2
 8000b26:	608b      	str	r3, [r1, #8]
}
 8000b28:	bf00      	nop
 8000b2a:	370c      	adds	r7, #12
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr
 8000b34:	40021000 	.word	0x40021000

08000b38 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000b40:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <LL_RCC_SetAPB2Prescaler+0x24>)
 8000b42:	689b      	ldr	r3, [r3, #8]
 8000b44:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000b48:	4904      	ldr	r1, [pc, #16]	; (8000b5c <LL_RCC_SetAPB2Prescaler+0x24>)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	608b      	str	r3, [r1, #8]
}
 8000b50:	bf00      	nop
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	40021000 	.word	0x40021000

08000b60 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000b68:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000b6a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000b6c:	4907      	ldr	r1, [pc, #28]	; (8000b8c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4313      	orrs	r3, r2
 8000b72:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000b74:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000b76:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b7e:	68fb      	ldr	r3, [r7, #12]
}
 8000b80:	bf00      	nop
 8000b82:	3714      	adds	r7, #20
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr
 8000b8c:	40021000 	.word	0x40021000

08000b90 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000b98:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <LL_APB2_GRP1_EnableClock+0x2c>)
 8000b9a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000b9c:	4907      	ldr	r1, [pc, #28]	; (8000bbc <LL_APB2_GRP1_EnableClock+0x2c>)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000ba4:	4b05      	ldr	r3, [pc, #20]	; (8000bbc <LL_APB2_GRP1_EnableClock+0x2c>)
 8000ba6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	4013      	ands	r3, r2
 8000bac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bae:	68fb      	ldr	r3, [r7, #12]
}
 8000bb0:	bf00      	nop
 8000bb2:	3714      	adds	r7, #20
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	40021000 	.word	0x40021000

08000bc0 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000bc8:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <LL_FLASH_SetLatency+0x24>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f023 0207 	bic.w	r2, r3, #7
 8000bd0:	4904      	ldr	r1, [pc, #16]	; (8000be4 <LL_FLASH_SetLatency+0x24>)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	600b      	str	r3, [r1, #0]
}
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	40022000 	.word	0x40022000

08000be8 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000bec:	4b04      	ldr	r3, [pc, #16]	; (8000c00 <LL_FLASH_GetLatency+0x18>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f003 0307 	and.w	r3, r3, #7
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	40022000 	.word	0x40022000

08000c04 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000c0c:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8000c14:	4904      	ldr	r1, [pc, #16]	; (8000c28 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	600b      	str	r3, [r1, #0]
}
 8000c1c:	bf00      	nop
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	40007000 	.word	0x40007000

08000c2c <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	601a      	str	r2, [r3, #0]
}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <LL_SPI_Disable>:
  * @rmtoll CR1          SPE           LL_SPI_Disable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Disable(SPI_TypeDef *SPIx)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	601a      	str	r2, [r3, #0]
}
 8000c60:	bf00      	nop
 8000c62:	370c      	adds	r7, #12
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr

08000c6c <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	689b      	ldr	r3, [r3, #8]
 8000c78:	f003 0301 	and.w	r3, r3, #1
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d101      	bne.n	8000c84 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8000c80:	2301      	movs	r3, #1
 8000c82:	e000      	b.n	8000c86 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8000c84:	2300      	movs	r3, #0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr

08000c92 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8000c92:	b480      	push	{r7}
 8000c94:	b083      	sub	sp, #12
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	689b      	ldr	r3, [r3, #8]
 8000c9e:	f003 0302 	and.w	r3, r3, #2
 8000ca2:	2b02      	cmp	r3, #2
 8000ca4:	d101      	bne.n	8000caa <LL_SPI_IsActiveFlag_TXE+0x18>
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e000      	b.n	8000cac <LL_SPI_IsActiveFlag_TXE+0x1a>
 8000caa:	2300      	movs	r3, #0
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <LL_SPI_IsActiveFlag_BSY>:
  * @rmtoll SR           BSY           LL_SPI_IsActiveFlag_BSY
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_BSY(SPI_TypeDef *SPIx)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	689b      	ldr	r3, [r3, #8]
 8000cc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cc8:	2b80      	cmp	r3, #128	; 0x80
 8000cca:	d101      	bne.n	8000cd0 <LL_SPI_IsActiveFlag_BSY+0x18>
 8000ccc:	2301      	movs	r3, #1
 8000cce:	e000      	b.n	8000cd2 <LL_SPI_IsActiveFlag_BSY+0x1a>
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr

08000cde <LL_SPI_GetTxFIFOLevel>:
  *         @arg @ref LL_SPI_TX_FIFO_QUARTER_FULL
  *         @arg @ref LL_SPI_TX_FIFO_HALF_FULL
  *         @arg @ref LL_SPI_TX_FIFO_FULL
  */
__STATIC_INLINE uint32_t LL_SPI_GetTxFIFOLevel(SPI_TypeDef *SPIx)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	b083      	sub	sp, #12
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(SPIx->SR, SPI_SR_FTLVL));
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	689b      	ldr	r3, [r3, #8]
 8000cea:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr

08000cfa <LL_SPI_EnableIT_RXNE>:
  * @rmtoll CR2          RXNEIE        LL_SPI_EnableIT_RXNE
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableIT_RXNE(SPI_TypeDef *SPIx)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	b083      	sub	sp, #12
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_RXNEIE);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	605a      	str	r2, [r3, #4]
}
 8000d0e:	bf00      	nop
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr

08000d1a <LL_SPI_EnableDMAReq_RX>:
  * @rmtoll CR2          RXDMAEN       LL_SPI_EnableDMAReq_RX
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableDMAReq_RX(SPI_TypeDef *SPIx)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	b083      	sub	sp, #12
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_RXDMAEN);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	f043 0201 	orr.w	r2, r3, #1
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	605a      	str	r2, [r3, #4]
}
 8000d2e:	bf00      	nop
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr

08000d3a <LL_SPI_DisableDMAReq_RX>:
  * @rmtoll CR2          RXDMAEN       LL_SPI_DisableDMAReq_RX
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableDMAReq_RX(SPI_TypeDef *SPIx)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	b083      	sub	sp, #12
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_RXDMAEN);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	f023 0201 	bic.w	r2, r3, #1
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	605a      	str	r2, [r3, #4]
}
 8000d4e:	bf00      	nop
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr

08000d5a <LL_SPI_DMA_GetRegAddr>:
  * @rmtoll DR           DR            LL_SPI_DMA_GetRegAddr
  * @param  SPIx SPI Instance
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_SPI_DMA_GetRegAddr(SPI_TypeDef *SPIx)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	b083      	sub	sp, #12
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
  return (uint32_t) &(SPIx->DR);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	330c      	adds	r3, #12
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr

08000d72 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8000d72:	b480      	push	{r7}
 8000d74:	b083      	sub	sp, #12
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	330c      	adds	r3, #12
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	b2db      	uxtb	r3, r3
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr

08000d8e <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	b085      	sub	sp, #20
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	6078      	str	r0, [r7, #4]
 8000d96:	460b      	mov	r3, r1
 8000d98:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	330c      	adds	r3, #12
 8000d9e:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	78fa      	ldrb	r2, [r7, #3]
 8000da4:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8000da6:	bf00      	nop
 8000da8:	3714      	adds	r7, #20
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr

08000db2 <LL_GPIO_SetOutputPin>:
{
 8000db2:	b480      	push	{r7}
 8000db4:	b083      	sub	sp, #12
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]
 8000dba:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	683a      	ldr	r2, [r7, #0]
 8000dc0:	619a      	str	r2, [r3, #24]
}
 8000dc2:	bf00      	nop
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	b083      	sub	sp, #12
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
 8000dd6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	683a      	ldr	r2, [r7, #0]
 8000ddc:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000dde:	bf00      	nop
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
	...

08000dec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000df2:	2001      	movs	r0, #1
 8000df4:	f7ff fecc 	bl	8000b90 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000df8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000dfc:	f7ff feb0 	bl	8000b60 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e00:	2003      	movs	r0, #3
 8000e02:	f7ff fc75 	bl	80006f0 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8000e06:	f7ff fc97 	bl	8000738 <__NVIC_GetPriorityGrouping>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	210f      	movs	r1, #15
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff fd0b 	bl	800082c <NVIC_EncodePriority>
 8000e16:	4603      	mov	r3, r0
 8000e18:	4619      	mov	r1, r3
 8000e1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e1e:	f7ff fcdb 	bl	80007d8 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e22:	f000 f84b 	bl	8000ebc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e26:	f7ff fbe9 	bl	80005fc <MX_GPIO_Init>
  MX_TIM2_Init();
 8000e2a:	f000 fc7f 	bl	800172c <MX_TIM2_Init>
  MX_DMA_Init();
 8000e2e:	f7ff fa6d 	bl	800030c <MX_DMA_Init>
  MX_SPI3_Init();
 8000e32:	f000 fb21 	bl	8001478 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  NVIC_DisableIRQ(EXTI4_IRQn); // disable DRDY interrupts until setup is completed
 8000e36:	200a      	movs	r0, #10
 8000e38:	f7ff fcaa 	bl	8000790 <__NVIC_DisableIRQ>
  ADC_first_read();
 8000e3c:	f000 f874 	bl	8000f28 <ADC_first_read>
  ADC_SPI_DMA_init();
 8000e40:	f000 f918 	bl	8001074 <ADC_SPI_DMA_init>
  NVIC_EnableIRQ(EXTI4_IRQn);
 8000e44:	200a      	movs	r0, #10
 8000e46:	f7ff fc85 	bl	8000754 <__NVIC_EnableIRQ>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (current_sample_count < NUM_SAMPLES) {
 8000e4a:	4b19      	ldr	r3, [pc, #100]	; (8000eb0 <main+0xc4>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	2b04      	cmp	r3, #4
 8000e50:	d8fb      	bhi.n	8000e4a <main+0x5e>
		  if (start == 1) {
 8000e52:	4b18      	ldr	r3, [pc, #96]	; (8000eb4 <main+0xc8>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d1f6      	bne.n	8000e4a <main+0x5e>
			NVIC_DisableIRQ(EXTI4_IRQn);
 8000e5c:	200a      	movs	r0, #10
 8000e5e:	f7ff fc97 	bl	8000790 <__NVIC_DisableIRQ>
			start = 0;
 8000e62:	4b14      	ldr	r3, [pc, #80]	; (8000eb4 <main+0xc8>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	701a      	strb	r2, [r3, #0]

			LL_GPIO_ResetOutputPin(ADC_CS_GPIOx, ADC_CS_PIN);
 8000e68:	2102      	movs	r1, #2
 8000e6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e6e:	f7ff ffae 	bl	8000dce <LL_GPIO_ResetOutputPin>
			LL_SPI_Enable(SB_SPIx);
 8000e72:	4811      	ldr	r0, [pc, #68]	; (8000eb8 <main+0xcc>)
 8000e74:	f7ff feda 	bl	8000c2c <LL_SPI_Enable>

			// send 30 dummy bytes to drive SPI clock, meanwhile DMA handles RX transfer
			for (int i = 0; i < 30; i++) {
 8000e78:	2300      	movs	r3, #0
 8000e7a:	607b      	str	r3, [r7, #4]
 8000e7c:	e00d      	b.n	8000e9a <main+0xae>
				while ( !LL_SPI_IsActiveFlag_TXE(SB_SPIx) ); // wait for TXE
 8000e7e:	bf00      	nop
 8000e80:	480d      	ldr	r0, [pc, #52]	; (8000eb8 <main+0xcc>)
 8000e82:	f7ff ff06 	bl	8000c92 <LL_SPI_IsActiveFlag_TXE>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d0f9      	beq.n	8000e80 <main+0x94>
				LL_SPI_TransmitData8(SB_SPIx, 0x00); // transmit dummy byte
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	480a      	ldr	r0, [pc, #40]	; (8000eb8 <main+0xcc>)
 8000e90:	f7ff ff7d 	bl	8000d8e <LL_SPI_TransmitData8>
			for (int i = 0; i < 30; i++) {
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	3301      	adds	r3, #1
 8000e98:	607b      	str	r3, [r7, #4]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2b1d      	cmp	r3, #29
 8000e9e:	ddee      	ble.n	8000e7e <main+0x92>
			}

			current_sample_count++;
 8000ea0:	4b03      	ldr	r3, [pc, #12]	; (8000eb0 <main+0xc4>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	b2da      	uxtb	r2, r3
 8000ea8:	4b01      	ldr	r3, [pc, #4]	; (8000eb0 <main+0xc4>)
 8000eaa:	701a      	strb	r2, [r3, #0]
	  if (current_sample_count < NUM_SAMPLES) {
 8000eac:	e7cd      	b.n	8000e4a <main+0x5e>
 8000eae:	bf00      	nop
 8000eb0:	20000020 	.word	0x20000020
 8000eb4:	200000ba 	.word	0x200000ba
 8000eb8:	40003c00 	.word	0x40003c00

08000ebc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8000ec0:	2000      	movs	r0, #0
 8000ec2:	f7ff fe7d 	bl	8000bc0 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8000ec6:	bf00      	nop
 8000ec8:	f7ff fe8e 	bl	8000be8 <LL_FLASH_GetLatency>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d1fa      	bne.n	8000ec8 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000ed2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ed6:	f7ff fe95 	bl	8000c04 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_Enable();
 8000eda:	f7ff fda9 	bl	8000a30 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000ede:	bf00      	nop
 8000ee0:	f7ff fdb6 	bl	8000a50 <LL_RCC_HSI_IsReady>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d1fa      	bne.n	8000ee0 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8000eea:	2010      	movs	r0, #16
 8000eec:	f7ff fdc4 	bl	8000a78 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	f7ff fdd7 	bl	8000aa4 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8000ef6:	bf00      	nop
 8000ef8:	f7ff fde8 	bl	8000acc <LL_RCC_GetSysClkSource>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b04      	cmp	r3, #4
 8000f00:	d1fa      	bne.n	8000ef8 <SystemClock_Config+0x3c>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000f02:	2000      	movs	r0, #0
 8000f04:	f7ff fdf0 	bl	8000ae8 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000f08:	2000      	movs	r0, #0
 8000f0a:	f7ff fe01 	bl	8000b10 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000f0e:	2000      	movs	r0, #0
 8000f10:	f7ff fe12 	bl	8000b38 <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick(16000000);
 8000f14:	4803      	ldr	r0, [pc, #12]	; (8000f24 <SystemClock_Config+0x68>)
 8000f16:	f001 f9bb 	bl	8002290 <LL_Init1msTick>

  LL_SetSystemCoreClock(16000000);
 8000f1a:	4802      	ldr	r0, [pc, #8]	; (8000f24 <SystemClock_Config+0x68>)
 8000f1c:	f001 f9c6 	bl	80022ac <LL_SetSystemCoreClock>
}
 8000f20:	bf00      	nop
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	00f42400 	.word	0x00f42400

08000f28 <ADC_first_read>:

/* USER CODE BEGIN 4 */
void ADC_first_read() {
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08c      	sub	sp, #48	; 0x30
 8000f2c:	af00      	add	r7, sp, #0
	uint8_t rx_buffer[30];

	LL_GPIO_ResetOutputPin(ADC_CS_GPIOx, ADC_CS_PIN); // \CS low
 8000f2e:	2102      	movs	r1, #2
 8000f30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f34:	f7ff ff4b 	bl	8000dce <LL_GPIO_ResetOutputPin>
	LL_SPI_Enable(SB_SPIx);
 8000f38:	484d      	ldr	r0, [pc, #308]	; (8001070 <ADC_first_read+0x148>)
 8000f3a:	f7ff fe77 	bl	8000c2c <LL_SPI_Enable>

	LL_SPI_TransmitData8(SB_SPIx, 0x00);
 8000f3e:	2100      	movs	r1, #0
 8000f40:	484b      	ldr	r0, [pc, #300]	; (8001070 <ADC_first_read+0x148>)
 8000f42:	f7ff ff24 	bl	8000d8e <LL_SPI_TransmitData8>

	for (int i = 0; i <= 28; i++) {
 8000f46:	2300      	movs	r3, #0
 8000f48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f4a:	e01e      	b.n	8000f8a <ADC_first_read+0x62>
	  while ( !LL_SPI_IsActiveFlag_TXE(SB_SPIx) ); // wait until TXE is set
 8000f4c:	bf00      	nop
 8000f4e:	4848      	ldr	r0, [pc, #288]	; (8001070 <ADC_first_read+0x148>)
 8000f50:	f7ff fe9f 	bl	8000c92 <LL_SPI_IsActiveFlag_TXE>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d0f9      	beq.n	8000f4e <ADC_first_read+0x26>
	  LL_SPI_TransmitData8(SB_SPIx, 0x00);
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	4844      	ldr	r0, [pc, #272]	; (8001070 <ADC_first_read+0x148>)
 8000f5e:	f7ff ff16 	bl	8000d8e <LL_SPI_TransmitData8>
	  while ( !LL_SPI_IsActiveFlag_RXNE(SB_SPIx) ); // wait until RXNE is set
 8000f62:	bf00      	nop
 8000f64:	4842      	ldr	r0, [pc, #264]	; (8001070 <ADC_first_read+0x148>)
 8000f66:	f7ff fe81 	bl	8000c6c <LL_SPI_IsActiveFlag_RXNE>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d0f9      	beq.n	8000f64 <ADC_first_read+0x3c>
	  rx_buffer[i] = LL_SPI_ReceiveData8(SB_SPIx); // read DR (clears RXNE)
 8000f70:	483f      	ldr	r0, [pc, #252]	; (8001070 <ADC_first_read+0x148>)
 8000f72:	f7ff fefe 	bl	8000d72 <LL_SPI_ReceiveData8>
 8000f76:	4603      	mov	r3, r0
 8000f78:	4619      	mov	r1, r3
 8000f7a:	1d3a      	adds	r2, r7, #4
 8000f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f7e:	4413      	add	r3, r2
 8000f80:	460a      	mov	r2, r1
 8000f82:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i <= 28; i++) {
 8000f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f86:	3301      	adds	r3, #1
 8000f88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f8c:	2b1c      	cmp	r3, #28
 8000f8e:	dddd      	ble.n	8000f4c <ADC_first_read+0x24>
	}

	while ( !LL_SPI_IsActiveFlag_RXNE(SB_SPIx) ); // wait until RXNE is set
 8000f90:	bf00      	nop
 8000f92:	4837      	ldr	r0, [pc, #220]	; (8001070 <ADC_first_read+0x148>)
 8000f94:	f7ff fe6a 	bl	8000c6c <LL_SPI_IsActiveFlag_RXNE>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d0f9      	beq.n	8000f92 <ADC_first_read+0x6a>
	rx_buffer[29] = LL_SPI_ReceiveData8(SB_SPIx); // read DR (clears RXNE)
 8000f9e:	4834      	ldr	r0, [pc, #208]	; (8001070 <ADC_first_read+0x148>)
 8000fa0:	f7ff fee7 	bl	8000d72 <LL_SPI_ReceiveData8>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	LL_GPIO_SetOutputPin(ADC_CS_GPIOx, ADC_CS_PIN); // \CS high
 8000faa:	2102      	movs	r1, #2
 8000fac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fb0:	f7ff feff 	bl	8000db2 <LL_GPIO_SetOutputPin>

	for(int i = 0; i < 100; i++); // TODO: write a delay function to replace this
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fb8:	e002      	b.n	8000fc0 <ADC_first_read+0x98>
 8000fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fc2:	2b63      	cmp	r3, #99	; 0x63
 8000fc4:	ddf9      	ble.n	8000fba <ADC_first_read+0x92>

	LL_GPIO_ResetOutputPin(ADC_CS_GPIOx, ADC_CS_PIN); // \CS low
 8000fc6:	2102      	movs	r1, #2
 8000fc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fcc:	f7ff feff 	bl	8000dce <LL_GPIO_ResetOutputPin>

	LL_SPI_TransmitData8(SB_SPIx, 0x00);
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	4827      	ldr	r0, [pc, #156]	; (8001070 <ADC_first_read+0x148>)
 8000fd4:	f7ff fedb 	bl	8000d8e <LL_SPI_TransmitData8>

	for (int i = 0; i <= 28; i++) {
 8000fd8:	2300      	movs	r3, #0
 8000fda:	627b      	str	r3, [r7, #36]	; 0x24
 8000fdc:	e01e      	b.n	800101c <ADC_first_read+0xf4>
	  while ( !LL_SPI_IsActiveFlag_TXE(SB_SPIx) ); // wait until TXE is set
 8000fde:	bf00      	nop
 8000fe0:	4823      	ldr	r0, [pc, #140]	; (8001070 <ADC_first_read+0x148>)
 8000fe2:	f7ff fe56 	bl	8000c92 <LL_SPI_IsActiveFlag_TXE>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d0f9      	beq.n	8000fe0 <ADC_first_read+0xb8>
	  LL_SPI_TransmitData8(SB_SPIx, 0x00);
 8000fec:	2100      	movs	r1, #0
 8000fee:	4820      	ldr	r0, [pc, #128]	; (8001070 <ADC_first_read+0x148>)
 8000ff0:	f7ff fecd 	bl	8000d8e <LL_SPI_TransmitData8>
	  while ( !LL_SPI_IsActiveFlag_RXNE(SB_SPIx) ); // wait until RXNE is set
 8000ff4:	bf00      	nop
 8000ff6:	481e      	ldr	r0, [pc, #120]	; (8001070 <ADC_first_read+0x148>)
 8000ff8:	f7ff fe38 	bl	8000c6c <LL_SPI_IsActiveFlag_RXNE>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d0f9      	beq.n	8000ff6 <ADC_first_read+0xce>
	  rx_buffer[i] = LL_SPI_ReceiveData8(SB_SPIx); // read DR (clears RXNE)
 8001002:	481b      	ldr	r0, [pc, #108]	; (8001070 <ADC_first_read+0x148>)
 8001004:	f7ff feb5 	bl	8000d72 <LL_SPI_ReceiveData8>
 8001008:	4603      	mov	r3, r0
 800100a:	4619      	mov	r1, r3
 800100c:	1d3a      	adds	r2, r7, #4
 800100e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001010:	4413      	add	r3, r2
 8001012:	460a      	mov	r2, r1
 8001014:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i <= 28; i++) {
 8001016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001018:	3301      	adds	r3, #1
 800101a:	627b      	str	r3, [r7, #36]	; 0x24
 800101c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101e:	2b1c      	cmp	r3, #28
 8001020:	dddd      	ble.n	8000fde <ADC_first_read+0xb6>
	}

	while ( !LL_SPI_IsActiveFlag_RXNE(SB_SPIx) ); // wait until RXNE is set
 8001022:	bf00      	nop
 8001024:	4812      	ldr	r0, [pc, #72]	; (8001070 <ADC_first_read+0x148>)
 8001026:	f7ff fe21 	bl	8000c6c <LL_SPI_IsActiveFlag_RXNE>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d0f9      	beq.n	8001024 <ADC_first_read+0xfc>
	rx_buffer[29] = LL_SPI_ReceiveData8(SB_SPIx); // read DR (clears RXNE)
 8001030:	480f      	ldr	r0, [pc, #60]	; (8001070 <ADC_first_read+0x148>)
 8001032:	f7ff fe9e 	bl	8000d72 <LL_SPI_ReceiveData8>
 8001036:	4603      	mov	r3, r0
 8001038:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	LL_GPIO_SetOutputPin(ADC_CS_GPIOx, ADC_CS_PIN); // \CS high
 800103c:	2102      	movs	r1, #2
 800103e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001042:	f7ff feb6 	bl	8000db2 <LL_GPIO_SetOutputPin>

	while (LL_SPI_GetTxFIFOLevel(SB_SPIx) != LL_SPI_TX_FIFO_EMPTY); // wait for TX FIFO to become empty
 8001046:	bf00      	nop
 8001048:	4809      	ldr	r0, [pc, #36]	; (8001070 <ADC_first_read+0x148>)
 800104a:	f7ff fe48 	bl	8000cde <LL_SPI_GetTxFIFOLevel>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d1f9      	bne.n	8001048 <ADC_first_read+0x120>
	while (LL_SPI_IsActiveFlag_BSY(SB_SPIx)); // wait for BSY flag to go low
 8001054:	bf00      	nop
 8001056:	4806      	ldr	r0, [pc, #24]	; (8001070 <ADC_first_read+0x148>)
 8001058:	f7ff fe2e 	bl	8000cb8 <LL_SPI_IsActiveFlag_BSY>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d1f9      	bne.n	8001056 <ADC_first_read+0x12e>
	LL_SPI_Disable(SB_SPIx);
 8001062:	4803      	ldr	r0, [pc, #12]	; (8001070 <ADC_first_read+0x148>)
 8001064:	f7ff fdf2 	bl	8000c4c <LL_SPI_Disable>
}
 8001068:	bf00      	nop
 800106a:	3730      	adds	r7, #48	; 0x30
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	40003c00 	.word	0x40003c00

08001074 <ADC_SPI_DMA_init>:
	LL_TIM_EnableCounter(TIM2); // enable counter
	while ( !LL_TIM_IsActiveFlag_UPDATE(TIM2) ); // wait for update flag
	LL_TIM_ClearFlag_UPDATE(TIM2); // clear update flag
}

void ADC_SPI_DMA_init() {
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
	LL_DMA_SetPeriphAddress(DMA2, LL_DMA_CHANNEL_1, LL_SPI_DMA_GetRegAddr(SB_SPIx));
 8001078:	4807      	ldr	r0, [pc, #28]	; (8001098 <ADC_SPI_DMA_init+0x24>)
 800107a:	f7ff fe6e 	bl	8000d5a <LL_SPI_DMA_GetRegAddr>
 800107e:	4603      	mov	r3, r0
 8001080:	461a      	mov	r2, r3
 8001082:	2100      	movs	r1, #0
 8001084:	4805      	ldr	r0, [pc, #20]	; (800109c <ADC_SPI_DMA_init+0x28>)
 8001086:	f7ff fc89 	bl	800099c <LL_DMA_SetPeriphAddress>
	LL_DMA_EnableIT_TC(DMA2, LL_DMA_CHANNEL_1);
 800108a:	2100      	movs	r1, #0
 800108c:	4803      	ldr	r0, [pc, #12]	; (800109c <ADC_SPI_DMA_init+0x28>)
 800108e:	f7ff fcad 	bl	80009ec <LL_DMA_EnableIT_TC>
}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40003c00 	.word	0x40003c00
 800109c:	40020400 	.word	0x40020400

080010a0 <ADC_DRDY_interrupt_handler>:

void ADC_DRDY_interrupt_handler() {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	LL_DMA_SetDataLength(DMA2, LL_DMA_CHANNEL_1, 30);
 80010a4:	221e      	movs	r2, #30
 80010a6:	2100      	movs	r1, #0
 80010a8:	480f      	ldr	r0, [pc, #60]	; (80010e8 <ADC_DRDY_interrupt_handler+0x48>)
 80010aa:	f7ff fc37 	bl	800091c <LL_DMA_SetDataLength>
	LL_DMA_SetMemoryAddress(DMA2, LL_DMA_CHANNEL_1, (uint32_t) rx_buffer[current_sample_count]);
 80010ae:	4b0f      	ldr	r3, [pc, #60]	; (80010ec <ADC_DRDY_interrupt_handler+0x4c>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	461a      	mov	r2, r3
 80010b4:	4613      	mov	r3, r2
 80010b6:	011b      	lsls	r3, r3, #4
 80010b8:	1a9b      	subs	r3, r3, r2
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	4a0c      	ldr	r2, [pc, #48]	; (80010f0 <ADC_DRDY_interrupt_handler+0x50>)
 80010be:	4413      	add	r3, r2
 80010c0:	461a      	mov	r2, r3
 80010c2:	2100      	movs	r1, #0
 80010c4:	4808      	ldr	r0, [pc, #32]	; (80010e8 <ADC_DRDY_interrupt_handler+0x48>)
 80010c6:	f7ff fc4f 	bl	8000968 <LL_DMA_SetMemoryAddress>

	LL_SPI_EnableDMAReq_RX(SB_SPIx);
 80010ca:	480a      	ldr	r0, [pc, #40]	; (80010f4 <ADC_DRDY_interrupt_handler+0x54>)
 80010cc:	f7ff fe25 	bl	8000d1a <LL_SPI_EnableDMAReq_RX>
	LL_DMA_EnableChannel(DMA2, LL_DMA_CHANNEL_1);
 80010d0:	2100      	movs	r1, #0
 80010d2:	4805      	ldr	r0, [pc, #20]	; (80010e8 <ADC_DRDY_interrupt_handler+0x48>)
 80010d4:	f7ff fbde 	bl	8000894 <LL_DMA_EnableChannel>
	LL_SPI_EnableIT_RXNE(SB_SPIx);
 80010d8:	4806      	ldr	r0, [pc, #24]	; (80010f4 <ADC_DRDY_interrupt_handler+0x54>)
 80010da:	f7ff fe0e 	bl	8000cfa <LL_SPI_EnableIT_RXNE>

	start = 1;
 80010de:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <ADC_DRDY_interrupt_handler+0x58>)
 80010e0:	2201      	movs	r2, #1
 80010e2:	701a      	strb	r2, [r3, #0]
}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	40020400 	.word	0x40020400
 80010ec:	20000020 	.word	0x20000020
 80010f0:	20000024 	.word	0x20000024
 80010f4:	40003c00 	.word	0x40003c00
 80010f8:	200000ba 	.word	0x200000ba

080010fc <DMA_Transfer_Complete_interrupt_handler>:

void DMA_Transfer_Complete_interrupt_handler() {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
	LL_DMA_ClearFlag_TC1(DMA2);
 8001100:	4812      	ldr	r0, [pc, #72]	; (800114c <DMA_Transfer_Complete_interrupt_handler+0x50>)
 8001102:	f7ff fc65 	bl	80009d0 <LL_DMA_ClearFlag_TC1>

	LL_DMA_DisableChannel(DMA2, LL_DMA_CHANNEL_1);
 8001106:	2100      	movs	r1, #0
 8001108:	4810      	ldr	r0, [pc, #64]	; (800114c <DMA_Transfer_Complete_interrupt_handler+0x50>)
 800110a:	f7ff fbe5 	bl	80008d8 <LL_DMA_DisableChannel>

	// SPI Disable procedure
	while (LL_SPI_GetTxFIFOLevel(SB_SPIx) != LL_SPI_TX_FIFO_EMPTY); // wait for TX FIFO to become empty
 800110e:	bf00      	nop
 8001110:	480f      	ldr	r0, [pc, #60]	; (8001150 <DMA_Transfer_Complete_interrupt_handler+0x54>)
 8001112:	f7ff fde4 	bl	8000cde <LL_SPI_GetTxFIFOLevel>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d1f9      	bne.n	8001110 <DMA_Transfer_Complete_interrupt_handler+0x14>
	while (LL_SPI_IsActiveFlag_BSY(SB_SPIx)); // wait for BSY flag to go low
 800111c:	bf00      	nop
 800111e:	480c      	ldr	r0, [pc, #48]	; (8001150 <DMA_Transfer_Complete_interrupt_handler+0x54>)
 8001120:	f7ff fdca 	bl	8000cb8 <LL_SPI_IsActiveFlag_BSY>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d1f9      	bne.n	800111e <DMA_Transfer_Complete_interrupt_handler+0x22>
	LL_SPI_Disable(SB_SPIx);
 800112a:	4809      	ldr	r0, [pc, #36]	; (8001150 <DMA_Transfer_Complete_interrupt_handler+0x54>)
 800112c:	f7ff fd8e 	bl	8000c4c <LL_SPI_Disable>

	LL_SPI_DisableDMAReq_RX(SB_SPIx);
 8001130:	4807      	ldr	r0, [pc, #28]	; (8001150 <DMA_Transfer_Complete_interrupt_handler+0x54>)
 8001132:	f7ff fe02 	bl	8000d3a <LL_SPI_DisableDMAReq_RX>

	LL_GPIO_SetOutputPin(ADC_CS_GPIOx, ADC_CS_PIN);
 8001136:	2102      	movs	r1, #2
 8001138:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800113c:	f7ff fe39 	bl	8000db2 <LL_GPIO_SetOutputPin>

	NVIC_EnableIRQ(EXTI4_IRQn);
 8001140:	200a      	movs	r0, #10
 8001142:	f7ff fb07 	bl	8000754 <__NVIC_EnableIRQ>
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40020400 	.word	0x40020400
 8001150:	40003c00 	.word	0x40003c00

08001154 <LL_DMA_SetDataTransferDirection>:
{
 8001154:	b480      	push	{r7}
 8001156:	b087      	sub	sp, #28
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8001164:	4a0e      	ldr	r2, [pc, #56]	; (80011a0 <LL_DMA_SetDataTransferDirection+0x4c>)
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	4413      	add	r3, r2
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	461a      	mov	r2, r3
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	4413      	add	r3, r2
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001178:	f023 0310 	bic.w	r3, r3, #16
 800117c:	4908      	ldr	r1, [pc, #32]	; (80011a0 <LL_DMA_SetDataTransferDirection+0x4c>)
 800117e:	68ba      	ldr	r2, [r7, #8]
 8001180:	440a      	add	r2, r1
 8001182:	7812      	ldrb	r2, [r2, #0]
 8001184:	4611      	mov	r1, r2
 8001186:	697a      	ldr	r2, [r7, #20]
 8001188:	440a      	add	r2, r1
 800118a:	4611      	mov	r1, r2
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	4313      	orrs	r3, r2
 8001190:	600b      	str	r3, [r1, #0]
}
 8001192:	bf00      	nop
 8001194:	371c      	adds	r7, #28
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	08002344 	.word	0x08002344

080011a4 <LL_DMA_SetMode>:
{
 80011a4:	b480      	push	{r7}
 80011a6:	b087      	sub	sp, #28
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	60f8      	str	r0, [r7, #12]
 80011ac:	60b9      	str	r1, [r7, #8]
 80011ae:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 80011b4:	4a0d      	ldr	r2, [pc, #52]	; (80011ec <LL_DMA_SetMode+0x48>)
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	4413      	add	r3, r2
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	461a      	mov	r2, r3
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	4413      	add	r3, r2
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f023 0220 	bic.w	r2, r3, #32
 80011c8:	4908      	ldr	r1, [pc, #32]	; (80011ec <LL_DMA_SetMode+0x48>)
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	440b      	add	r3, r1
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	4619      	mov	r1, r3
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	440b      	add	r3, r1
 80011d6:	4619      	mov	r1, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4313      	orrs	r3, r2
 80011dc:	600b      	str	r3, [r1, #0]
}
 80011de:	bf00      	nop
 80011e0:	371c      	adds	r7, #28
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	08002344 	.word	0x08002344

080011f0 <LL_DMA_SetPeriphIncMode>:
{
 80011f0:	b480      	push	{r7}
 80011f2:	b087      	sub	sp, #28
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	60f8      	str	r0, [r7, #12]
 80011f8:	60b9      	str	r1, [r7, #8]
 80011fa:	607a      	str	r2, [r7, #4]
    uint32_t dma_base_addr = (uint32_t)DMAx;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	617b      	str	r3, [r7, #20]
    MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 8001200:	4a0d      	ldr	r2, [pc, #52]	; (8001238 <LL_DMA_SetPeriphIncMode+0x48>)
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	4413      	add	r3, r2
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	461a      	mov	r2, r3
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	4413      	add	r3, r2
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001214:	4908      	ldr	r1, [pc, #32]	; (8001238 <LL_DMA_SetPeriphIncMode+0x48>)
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	440b      	add	r3, r1
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	4619      	mov	r1, r3
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	440b      	add	r3, r1
 8001222:	4619      	mov	r1, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	4313      	orrs	r3, r2
 8001228:	600b      	str	r3, [r1, #0]
}
 800122a:	bf00      	nop
 800122c:	371c      	adds	r7, #28
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	08002344 	.word	0x08002344

0800123c <LL_DMA_SetMemoryIncMode>:
{
 800123c:	b480      	push	{r7}
 800123e:	b087      	sub	sp, #28
 8001240:	af00      	add	r7, sp, #0
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 800124c:	4a0d      	ldr	r2, [pc, #52]	; (8001284 <LL_DMA_SetMemoryIncMode+0x48>)
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	4413      	add	r3, r2
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	461a      	mov	r2, r3
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	4413      	add	r3, r2
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001260:	4908      	ldr	r1, [pc, #32]	; (8001284 <LL_DMA_SetMemoryIncMode+0x48>)
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	440b      	add	r3, r1
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	4619      	mov	r1, r3
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	440b      	add	r3, r1
 800126e:	4619      	mov	r1, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	4313      	orrs	r3, r2
 8001274:	600b      	str	r3, [r1, #0]
}
 8001276:	bf00      	nop
 8001278:	371c      	adds	r7, #28
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	08002344 	.word	0x08002344

08001288 <LL_DMA_SetPeriphSize>:
{
 8001288:	b480      	push	{r7}
 800128a:	b087      	sub	sp, #28
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE, 
 8001298:	4a0d      	ldr	r2, [pc, #52]	; (80012d0 <LL_DMA_SetPeriphSize+0x48>)
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	4413      	add	r3, r2
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	461a      	mov	r2, r3
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	4413      	add	r3, r2
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80012ac:	4908      	ldr	r1, [pc, #32]	; (80012d0 <LL_DMA_SetPeriphSize+0x48>)
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	440b      	add	r3, r1
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	4619      	mov	r1, r3
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	440b      	add	r3, r1
 80012ba:	4619      	mov	r1, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	4313      	orrs	r3, r2
 80012c0:	600b      	str	r3, [r1, #0]
}
 80012c2:	bf00      	nop
 80012c4:	371c      	adds	r7, #28
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	08002344 	.word	0x08002344

080012d4 <LL_DMA_SetMemorySize>:
{
 80012d4:	b480      	push	{r7}
 80012d6:	b087      	sub	sp, #28
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 80012e4:	4a0d      	ldr	r2, [pc, #52]	; (800131c <LL_DMA_SetMemorySize+0x48>)
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	4413      	add	r3, r2
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	461a      	mov	r2, r3
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	4413      	add	r3, r2
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80012f8:	4908      	ldr	r1, [pc, #32]	; (800131c <LL_DMA_SetMemorySize+0x48>)
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	440b      	add	r3, r1
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	4619      	mov	r1, r3
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	440b      	add	r3, r1
 8001306:	4619      	mov	r1, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4313      	orrs	r3, r2
 800130c:	600b      	str	r3, [r1, #0]
}
 800130e:	bf00      	nop
 8001310:	371c      	adds	r7, #28
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	08002344 	.word	0x08002344

08001320 <LL_DMA_SetChannelPriorityLevel>:
{
 8001320:	b480      	push	{r7}
 8001322:	b087      	sub	sp, #28
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 8001330:	4a0d      	ldr	r2, [pc, #52]	; (8001368 <LL_DMA_SetChannelPriorityLevel+0x48>)
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	4413      	add	r3, r2
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	461a      	mov	r2, r3
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	4413      	add	r3, r2
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001344:	4908      	ldr	r1, [pc, #32]	; (8001368 <LL_DMA_SetChannelPriorityLevel+0x48>)
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	440b      	add	r3, r1
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	4619      	mov	r1, r3
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	440b      	add	r3, r1
 8001352:	4619      	mov	r1, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	4313      	orrs	r3, r2
 8001358:	600b      	str	r3, [r1, #0]
}
 800135a:	bf00      	nop
 800135c:	371c      	adds	r7, #28
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	08002344 	.word	0x08002344

0800136c <LL_DMA_SetPeriphRequest>:
{
 800136c:	b480      	push	{r7}
 800136e:	b089      	sub	sp, #36	; 0x24
 8001370:	af00      	add	r7, sp, #0
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	60b9      	str	r1, [r7, #8]
 8001376:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Request_TypeDef *)((uint32_t)((uint32_t)DMAx + DMA_CSELR_OFFSET)))->CSELR,
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	33a8      	adds	r3, #168	; 0xa8
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	210f      	movs	r1, #15
 8001384:	fa01 f303 	lsl.w	r3, r1, r3
 8001388:	43db      	mvns	r3, r3
 800138a:	401a      	ands	r2, r3
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	210f      	movs	r1, #15
 8001392:	fa01 f303 	lsl.w	r3, r1, r3
 8001396:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	fa93 f3a3 	rbit	r3, r3
 800139e:	617b      	str	r3, [r7, #20]
  return result;
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d101      	bne.n	80013ae <LL_DMA_SetPeriphRequest+0x42>
    return 32U;
 80013aa:	2320      	movs	r3, #32
 80013ac:	e003      	b.n	80013b6 <LL_DMA_SetPeriphRequest+0x4a>
  return __builtin_clz(value);
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	fab3 f383 	clz	r3, r3
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	4619      	mov	r1, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	408b      	lsls	r3, r1
 80013bc:	68f9      	ldr	r1, [r7, #12]
 80013be:	31a8      	adds	r1, #168	; 0xa8
 80013c0:	4313      	orrs	r3, r2
 80013c2:	600b      	str	r3, [r1, #0]
}
 80013c4:	bf00      	nop
 80013c6:	3724      	adds	r7, #36	; 0x24
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <LL_AHB2_GRP1_EnableClock>:
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80013d8:	4b08      	ldr	r3, [pc, #32]	; (80013fc <LL_AHB2_GRP1_EnableClock+0x2c>)
 80013da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013dc:	4907      	ldr	r1, [pc, #28]	; (80013fc <LL_AHB2_GRP1_EnableClock+0x2c>)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80013e4:	4b05      	ldr	r3, [pc, #20]	; (80013fc <LL_AHB2_GRP1_EnableClock+0x2c>)
 80013e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	4013      	ands	r3, r2
 80013ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013ee:	68fb      	ldr	r3, [r7, #12]
}
 80013f0:	bf00      	nop
 80013f2:	3714      	adds	r7, #20
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	40021000 	.word	0x40021000

08001400 <LL_APB1_GRP1_EnableClock>:
{
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001408:	4b08      	ldr	r3, [pc, #32]	; (800142c <LL_APB1_GRP1_EnableClock+0x2c>)
 800140a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800140c:	4907      	ldr	r1, [pc, #28]	; (800142c <LL_APB1_GRP1_EnableClock+0x2c>)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4313      	orrs	r3, r2
 8001412:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001414:	4b05      	ldr	r3, [pc, #20]	; (800142c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001416:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	4013      	ands	r3, r2
 800141c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800141e:	68fb      	ldr	r3, [r7, #12]
}
 8001420:	bf00      	nop
 8001422:	3714      	adds	r7, #20
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	40021000 	.word	0x40021000

08001430 <LL_SPI_SetStandard>:
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f023 0210 	bic.w	r2, r3, #16
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	431a      	orrs	r2, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	605a      	str	r2, [r3, #4]
}
 800144a:	bf00      	nop
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <LL_SPI_DisableNSSPulseMgt>:
{
 8001456:	b480      	push	{r7}
 8001458:	b083      	sub	sp, #12
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f023 0208 	bic.w	r2, r3, #8
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	605a      	str	r2, [r3, #4]
}
 800146a:	bf00      	nop
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
	...

08001478 <MX_SPI3_Init>:

/* USER CODE END 0 */

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b090      	sub	sp, #64	; 0x40
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800147e:	f107 0318 	add.w	r3, r7, #24
 8001482:	2228      	movs	r2, #40	; 0x28
 8001484:	2100      	movs	r1, #0
 8001486:	4618      	mov	r0, r3
 8001488:	f000 ff44 	bl	8002314 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148c:	463b      	mov	r3, r7
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]
 8001494:	609a      	str	r2, [r3, #8]
 8001496:	60da      	str	r2, [r3, #12]
 8001498:	611a      	str	r2, [r3, #16]
 800149a:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 800149c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80014a0:	f7ff ffae 	bl	8001400 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80014a4:	2004      	movs	r0, #4
 80014a6:	f7ff ff93 	bl	80013d0 <LL_AHB2_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PC10   ------> SPI3_SCK
  PC11   ------> SPI3_MISO
  PC12   ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 80014aa:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80014ae:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80014b0:	2302      	movs	r3, #2
 80014b2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80014b4:	2303      	movs	r3, #3
 80014b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80014bc:	2300      	movs	r3, #0
 80014be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 80014c0:	2306      	movs	r3, #6
 80014c2:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014c4:	463b      	mov	r3, r7
 80014c6:	4619      	mov	r1, r3
 80014c8:	4829      	ldr	r0, [pc, #164]	; (8001570 <MX_SPI3_Init+0xf8>)
 80014ca:	f000 fcfd 	bl	8001ec8 <LL_GPIO_Init>

  /* SPI3 DMA Init */

  /* SPI3_RX Init */
  LL_DMA_SetPeriphRequest(DMA2, LL_DMA_CHANNEL_1, LL_DMA_REQUEST_3);
 80014ce:	2203      	movs	r2, #3
 80014d0:	2100      	movs	r1, #0
 80014d2:	4828      	ldr	r0, [pc, #160]	; (8001574 <MX_SPI3_Init+0xfc>)
 80014d4:	f7ff ff4a 	bl	800136c <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 80014d8:	2200      	movs	r2, #0
 80014da:	2100      	movs	r1, #0
 80014dc:	4825      	ldr	r0, [pc, #148]	; (8001574 <MX_SPI3_Init+0xfc>)
 80014de:	f7ff fe39 	bl	8001154 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA2, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_LOW);
 80014e2:	2200      	movs	r2, #0
 80014e4:	2100      	movs	r1, #0
 80014e6:	4823      	ldr	r0, [pc, #140]	; (8001574 <MX_SPI3_Init+0xfc>)
 80014e8:	f7ff ff1a 	bl	8001320 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_CHANNEL_1, LL_DMA_MODE_NORMAL);
 80014ec:	2200      	movs	r2, #0
 80014ee:	2100      	movs	r1, #0
 80014f0:	4820      	ldr	r0, [pc, #128]	; (8001574 <MX_SPI3_Init+0xfc>)
 80014f2:	f7ff fe57 	bl	80011a4 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 80014f6:	2200      	movs	r2, #0
 80014f8:	2100      	movs	r1, #0
 80014fa:	481e      	ldr	r0, [pc, #120]	; (8001574 <MX_SPI3_Init+0xfc>)
 80014fc:	f7ff fe78 	bl	80011f0 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 8001500:	2280      	movs	r2, #128	; 0x80
 8001502:	2100      	movs	r1, #0
 8001504:	481b      	ldr	r0, [pc, #108]	; (8001574 <MX_SPI3_Init+0xfc>)
 8001506:	f7ff fe99 	bl	800123c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_BYTE);
 800150a:	2200      	movs	r2, #0
 800150c:	2100      	movs	r1, #0
 800150e:	4819      	ldr	r0, [pc, #100]	; (8001574 <MX_SPI3_Init+0xfc>)
 8001510:	f7ff feba 	bl	8001288 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_BYTE);
 8001514:	2200      	movs	r2, #0
 8001516:	2100      	movs	r1, #0
 8001518:	4816      	ldr	r0, [pc, #88]	; (8001574 <MX_SPI3_Init+0xfc>)
 800151a:	f7ff fedb 	bl	80012d4 <LL_DMA_SetMemorySize>

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800151e:	2300      	movs	r3, #0
 8001520:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001522:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001526:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001528:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800152c:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800152e:	2302      	movs	r3, #2
 8001530:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001532:	2301      	movs	r3, #1
 8001534:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001536:	f44f 7300 	mov.w	r3, #512	; 0x200
 800153a:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV32;
 800153c:	2320      	movs	r3, #32
 800153e:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001540:	2300      	movs	r3, #0
 8001542:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001544:	2300      	movs	r3, #0
 8001546:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 8001548:	2307      	movs	r3, #7
 800154a:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 800154c:	f107 0318 	add.w	r3, r7, #24
 8001550:	4619      	mov	r1, r3
 8001552:	4809      	ldr	r0, [pc, #36]	; (8001578 <MX_SPI3_Init+0x100>)
 8001554:	f000 fd5c 	bl	8002010 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 8001558:	2100      	movs	r1, #0
 800155a:	4807      	ldr	r0, [pc, #28]	; (8001578 <MX_SPI3_Init+0x100>)
 800155c:	f7ff ff68 	bl	8001430 <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI3);
 8001560:	4805      	ldr	r0, [pc, #20]	; (8001578 <MX_SPI3_Init+0x100>)
 8001562:	f7ff ff78 	bl	8001456 <LL_SPI_DisableNSSPulseMgt>
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001566:	bf00      	nop
 8001568:	3740      	adds	r7, #64	; 0x40
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	48000800 	.word	0x48000800
 8001574:	40020400 	.word	0x40020400
 8001578:	40003c00 	.word	0x40003c00

0800157c <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8001584:	4b07      	ldr	r3, [pc, #28]	; (80015a4 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8001586:	695a      	ldr	r2, [r3, #20]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4013      	ands	r3, r2
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	429a      	cmp	r2, r3
 8001590:	d101      	bne.n	8001596 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8001592:	2301      	movs	r3, #1
 8001594:	e000      	b.n	8001598 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8001596:	2300      	movs	r3, #0
}
 8001598:	4618      	mov	r0, r3
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	40010400 	.word	0x40010400

080015a8 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80015b0:	4a04      	ldr	r2, [pc, #16]	; (80015c4 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6153      	str	r3, [r2, #20]
}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	40010400 	.word	0x40010400

080015c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015cc:	e7fe      	b.n	80015cc <NMI_Handler+0x4>

080015ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ce:	b480      	push	{r7}
 80015d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015d2:	e7fe      	b.n	80015d2 <HardFault_Handler+0x4>

080015d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d8:	e7fe      	b.n	80015d8 <MemManage_Handler+0x4>

080015da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015da:	b480      	push	{r7}
 80015dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015de:	e7fe      	b.n	80015de <BusFault_Handler+0x4>

080015e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015e4:	e7fe      	b.n	80015e4 <UsageFault_Handler+0x4>

080015e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr

08001602 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001614:	bf00      	nop
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_4) != RESET)
 8001622:	2010      	movs	r0, #16
 8001624:	f7ff ffaa 	bl	800157c <LL_EXTI_IsActiveFlag_0_31>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d004      	beq.n	8001638 <EXTI4_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_4);
 800162e:	2010      	movs	r0, #16
 8001630:	f7ff ffba 	bl	80015a8 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_4 */
    ADC_DRDY_interrupt_handler();
 8001634:	f7ff fd34 	bl	80010a0 <ADC_DRDY_interrupt_handler>
    /* USER CODE END LL_EXTI_LINE_4 */
  }
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001638:	bf00      	nop
 800163a:	bd80      	pop	{r7, pc}

0800163c <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */
	DMA_Transfer_Complete_interrupt_handler();
 8001640:	f7ff fd5c 	bl	80010fc <DMA_Transfer_Complete_interrupt_handler>
  /* USER CODE END DMA2_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8001644:	bf00      	nop
 8001646:	bd80      	pop	{r7, pc}

08001648 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800164c:	4b06      	ldr	r3, [pc, #24]	; (8001668 <SystemInit+0x20>)
 800164e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001652:	4a05      	ldr	r2, [pc, #20]	; (8001668 <SystemInit+0x20>)
 8001654:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001658:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	e000ed00 	.word	0xe000ed00

0800166c <LL_APB1_GRP1_EnableClock>:
{
 800166c:	b480      	push	{r7}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001674:	4b08      	ldr	r3, [pc, #32]	; (8001698 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001676:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001678:	4907      	ldr	r1, [pc, #28]	; (8001698 <LL_APB1_GRP1_EnableClock+0x2c>)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4313      	orrs	r3, r2
 800167e:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001680:	4b05      	ldr	r3, [pc, #20]	; (8001698 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001682:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	4013      	ands	r3, r2
 8001688:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800168a:	68fb      	ldr	r3, [r7, #12]
}
 800168c:	bf00      	nop
 800168e:	3714      	adds	r7, #20
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr
 8001698:	40021000 	.word	0x40021000

0800169c <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	601a      	str	r2, [r3, #0]
}
 80016b0:	bf00      	nop
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80016ce:	f023 0307 	bic.w	r3, r3, #7
 80016d2:	683a      	ldr	r2, [r7, #0]
 80016d4:	431a      	orrs	r2, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	609a      	str	r2, [r3, #8]
}
 80016da:	bf00      	nop
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 80016e6:	b480      	push	{r7}
 80016e8:	b083      	sub	sp, #12
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
 80016ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	431a      	orrs	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	605a      	str	r2, [r3, #4]
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	609a      	str	r2, [r3, #8]
}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001732:	1d3b      	adds	r3, r7, #4
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	60da      	str	r2, [r3, #12]
 800173e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8001740:	2001      	movs	r0, #1
 8001742:	f7ff ff93 	bl	800166c <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8001746:	2300      	movs	r3, #0
 8001748:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800174a:	2300      	movs	r3, #0
 800174c:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 16;
 800174e:	2310      	movs	r3, #16
 8001750:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001752:	2300      	movs	r3, #0
 8001754:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8001756:	1d3b      	adds	r3, r7, #4
 8001758:	4619      	mov	r1, r3
 800175a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800175e:	f000 fce9 	bl	8002134 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8001762:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001766:	f7ff ff99 	bl	800169c <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 800176a:	2100      	movs	r1, #0
 800176c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001770:	f7ff ffa4 	bl	80016bc <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8001774:	2100      	movs	r1, #0
 8001776:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800177a:	f7ff ffb4 	bl	80016e6 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 800177e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001782:	f7ff ffc3 	bl	800170c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001786:	bf00      	nop
 8001788:	3718      	adds	r7, #24
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
	...

08001790 <Reset_Handler>:
 8001790:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017c8 <LoopForever+0x2>
 8001794:	f7ff ff58 	bl	8001648 <SystemInit>
 8001798:	480c      	ldr	r0, [pc, #48]	; (80017cc <LoopForever+0x6>)
 800179a:	490d      	ldr	r1, [pc, #52]	; (80017d0 <LoopForever+0xa>)
 800179c:	4a0d      	ldr	r2, [pc, #52]	; (80017d4 <LoopForever+0xe>)
 800179e:	2300      	movs	r3, #0
 80017a0:	e002      	b.n	80017a8 <LoopCopyDataInit>

080017a2 <CopyDataInit>:
 80017a2:	58d4      	ldr	r4, [r2, r3]
 80017a4:	50c4      	str	r4, [r0, r3]
 80017a6:	3304      	adds	r3, #4

080017a8 <LoopCopyDataInit>:
 80017a8:	18c4      	adds	r4, r0, r3
 80017aa:	428c      	cmp	r4, r1
 80017ac:	d3f9      	bcc.n	80017a2 <CopyDataInit>
 80017ae:	4a0a      	ldr	r2, [pc, #40]	; (80017d8 <LoopForever+0x12>)
 80017b0:	4c0a      	ldr	r4, [pc, #40]	; (80017dc <LoopForever+0x16>)
 80017b2:	2300      	movs	r3, #0
 80017b4:	e001      	b.n	80017ba <LoopFillZerobss>

080017b6 <FillZerobss>:
 80017b6:	6013      	str	r3, [r2, #0]
 80017b8:	3204      	adds	r2, #4

080017ba <LoopFillZerobss>:
 80017ba:	42a2      	cmp	r2, r4
 80017bc:	d3fb      	bcc.n	80017b6 <FillZerobss>
 80017be:	f000 fd85 	bl	80022cc <__libc_init_array>
 80017c2:	f7ff fb13 	bl	8000dec <main>

080017c6 <LoopForever>:
 80017c6:	e7fe      	b.n	80017c6 <LoopForever>
 80017c8:	20018000 	.word	0x20018000
 80017cc:	20000000 	.word	0x20000000
 80017d0:	20000004 	.word	0x20000004
 80017d4:	08002354 	.word	0x08002354
 80017d8:	20000004 	.word	0x20000004
 80017dc:	200000bc 	.word	0x200000bc

080017e0 <ADC1_2_IRQHandler>:
 80017e0:	e7fe      	b.n	80017e0 <ADC1_2_IRQHandler>
	...

080017e4 <LL_EXTI_EnableIT_0_31>:
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80017ec:	4b05      	ldr	r3, [pc, #20]	; (8001804 <LL_EXTI_EnableIT_0_31+0x20>)
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	4904      	ldr	r1, [pc, #16]	; (8001804 <LL_EXTI_EnableIT_0_31+0x20>)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	600b      	str	r3, [r1, #0]
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	40010400 	.word	0x40010400

08001808 <LL_EXTI_EnableIT_32_63>:
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001810:	4b05      	ldr	r3, [pc, #20]	; (8001828 <LL_EXTI_EnableIT_32_63+0x20>)
 8001812:	6a1a      	ldr	r2, [r3, #32]
 8001814:	4904      	ldr	r1, [pc, #16]	; (8001828 <LL_EXTI_EnableIT_32_63+0x20>)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4313      	orrs	r3, r2
 800181a:	620b      	str	r3, [r1, #32]
}
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	40010400 	.word	0x40010400

0800182c <LL_EXTI_DisableIT_0_31>:
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8001834:	4b06      	ldr	r3, [pc, #24]	; (8001850 <LL_EXTI_DisableIT_0_31+0x24>)
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	43db      	mvns	r3, r3
 800183c:	4904      	ldr	r1, [pc, #16]	; (8001850 <LL_EXTI_DisableIT_0_31+0x24>)
 800183e:	4013      	ands	r3, r2
 8001840:	600b      	str	r3, [r1, #0]
}
 8001842:	bf00      	nop
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	40010400 	.word	0x40010400

08001854 <LL_EXTI_DisableIT_32_63>:
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800185c:	4b06      	ldr	r3, [pc, #24]	; (8001878 <LL_EXTI_DisableIT_32_63+0x24>)
 800185e:	6a1a      	ldr	r2, [r3, #32]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	43db      	mvns	r3, r3
 8001864:	4904      	ldr	r1, [pc, #16]	; (8001878 <LL_EXTI_DisableIT_32_63+0x24>)
 8001866:	4013      	ands	r3, r2
 8001868:	620b      	str	r3, [r1, #32]
}
 800186a:	bf00      	nop
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	40010400 	.word	0x40010400

0800187c <LL_EXTI_EnableEvent_0_31>:
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8001884:	4b05      	ldr	r3, [pc, #20]	; (800189c <LL_EXTI_EnableEvent_0_31+0x20>)
 8001886:	685a      	ldr	r2, [r3, #4]
 8001888:	4904      	ldr	r1, [pc, #16]	; (800189c <LL_EXTI_EnableEvent_0_31+0x20>)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4313      	orrs	r3, r2
 800188e:	604b      	str	r3, [r1, #4]
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	40010400 	.word	0x40010400

080018a0 <LL_EXTI_EnableEvent_32_63>:
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 80018a8:	4b05      	ldr	r3, [pc, #20]	; (80018c0 <LL_EXTI_EnableEvent_32_63+0x20>)
 80018aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018ac:	4904      	ldr	r1, [pc, #16]	; (80018c0 <LL_EXTI_EnableEvent_32_63+0x20>)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	624b      	str	r3, [r1, #36]	; 0x24
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	40010400 	.word	0x40010400

080018c4 <LL_EXTI_DisableEvent_0_31>:
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80018cc:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <LL_EXTI_DisableEvent_0_31+0x24>)
 80018ce:	685a      	ldr	r2, [r3, #4]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	43db      	mvns	r3, r3
 80018d4:	4904      	ldr	r1, [pc, #16]	; (80018e8 <LL_EXTI_DisableEvent_0_31+0x24>)
 80018d6:	4013      	ands	r3, r2
 80018d8:	604b      	str	r3, [r1, #4]
}
 80018da:	bf00      	nop
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	40010400 	.word	0x40010400

080018ec <LL_EXTI_DisableEvent_32_63>:
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 80018f4:	4b06      	ldr	r3, [pc, #24]	; (8001910 <LL_EXTI_DisableEvent_32_63+0x24>)
 80018f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	43db      	mvns	r3, r3
 80018fc:	4904      	ldr	r1, [pc, #16]	; (8001910 <LL_EXTI_DisableEvent_32_63+0x24>)
 80018fe:	4013      	ands	r3, r2
 8001900:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001902:	bf00      	nop
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	40010400 	.word	0x40010400

08001914 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800191c:	4b05      	ldr	r3, [pc, #20]	; (8001934 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800191e:	689a      	ldr	r2, [r3, #8]
 8001920:	4904      	ldr	r1, [pc, #16]	; (8001934 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4313      	orrs	r3, r2
 8001926:	608b      	str	r3, [r1, #8]
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	40010400 	.word	0x40010400

08001938 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8001940:	4b05      	ldr	r3, [pc, #20]	; (8001958 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8001942:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001944:	4904      	ldr	r1, [pc, #16]	; (8001958 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4313      	orrs	r3, r2
 800194a:	628b      	str	r3, [r1, #40]	; 0x28
}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr
 8001958:	40010400 	.word	0x40010400

0800195c <LL_EXTI_DisableRisingTrig_0_31>:
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8001964:	4b06      	ldr	r3, [pc, #24]	; (8001980 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001966:	689a      	ldr	r2, [r3, #8]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	43db      	mvns	r3, r3
 800196c:	4904      	ldr	r1, [pc, #16]	; (8001980 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800196e:	4013      	ands	r3, r2
 8001970:	608b      	str	r3, [r1, #8]
}
 8001972:	bf00      	nop
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	40010400 	.word	0x40010400

08001984 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800198c:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800198e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	43db      	mvns	r3, r3
 8001994:	4904      	ldr	r1, [pc, #16]	; (80019a8 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8001996:	4013      	ands	r3, r2
 8001998:	628b      	str	r3, [r1, #40]	; 0x28
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	40010400 	.word	0x40010400

080019ac <LL_EXTI_EnableFallingTrig_0_31>:
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80019b4:	4b05      	ldr	r3, [pc, #20]	; (80019cc <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80019b6:	68da      	ldr	r2, [r3, #12]
 80019b8:	4904      	ldr	r1, [pc, #16]	; (80019cc <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4313      	orrs	r3, r2
 80019be:	60cb      	str	r3, [r1, #12]
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	40010400 	.word	0x40010400

080019d0 <LL_EXTI_EnableFallingTrig_32_63>:
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 80019d8:	4b05      	ldr	r3, [pc, #20]	; (80019f0 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80019da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019dc:	4904      	ldr	r1, [pc, #16]	; (80019f0 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80019e4:	bf00      	nop
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	40010400 	.word	0x40010400

080019f4 <LL_EXTI_DisableFallingTrig_0_31>:
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80019fc:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80019fe:	68da      	ldr	r2, [r3, #12]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	43db      	mvns	r3, r3
 8001a04:	4904      	ldr	r1, [pc, #16]	; (8001a18 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001a06:	4013      	ands	r3, r2
 8001a08:	60cb      	str	r3, [r1, #12]
}
 8001a0a:	bf00      	nop
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	40010400 	.word	0x40010400

08001a1c <LL_EXTI_DisableFallingTrig_32_63>:
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8001a24:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8001a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	43db      	mvns	r3, r3
 8001a2c:	4904      	ldr	r1, [pc, #16]	; (8001a40 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8001a2e:	4013      	ands	r3, r2
 8001a30:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8001a32:	bf00      	nop
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	40010400 	.word	0x40010400

08001a44 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other value : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	7a1b      	ldrb	r3, [r3, #8]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	f000 80d1 	beq.w	8001bfc <LL_EXTI_Init+0x1b8>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d063      	beq.n	8001b2a <LL_EXTI_Init+0xe6>
    {
      switch (EXTI_InitStruct->Mode)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	7a5b      	ldrb	r3, [r3, #9]
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d01c      	beq.n	8001aa4 <LL_EXTI_Init+0x60>
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	dc25      	bgt.n	8001aba <LL_EXTI_Init+0x76>
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d002      	beq.n	8001a78 <LL_EXTI_Init+0x34>
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d00b      	beq.n	8001a8e <LL_EXTI_Init+0x4a>
 8001a76:	e020      	b.n	8001aba <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff ff21 	bl	80018c4 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff feac 	bl	80017e4 <LL_EXTI_EnableIT_0_31>
          break;
 8001a8c:	e018      	b.n	8001ac0 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff feca 	bl	800182c <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff feed 	bl	800187c <LL_EXTI_EnableEvent_0_31>
          break;
 8001aa2:	e00d      	b.n	8001ac0 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff fe9b 	bl	80017e4 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff fee2 	bl	800187c <LL_EXTI_EnableEvent_0_31>
          break;
 8001ab8:	e002      	b.n	8001ac0 <LL_EXTI_Init+0x7c>
        default:
          status = 0x01u;
 8001aba:	2301      	movs	r3, #1
 8001abc:	60fb      	str	r3, [r7, #12]
          break;
 8001abe:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	7a9b      	ldrb	r3, [r3, #10]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d030      	beq.n	8001b2a <LL_EXTI_Init+0xe6>
      {
        switch (EXTI_InitStruct->Trigger)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	7a9b      	ldrb	r3, [r3, #10]
 8001acc:	2b03      	cmp	r3, #3
 8001ace:	d01c      	beq.n	8001b0a <LL_EXTI_Init+0xc6>
 8001ad0:	2b03      	cmp	r3, #3
 8001ad2:	dc25      	bgt.n	8001b20 <LL_EXTI_Init+0xdc>
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d002      	beq.n	8001ade <LL_EXTI_Init+0x9a>
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d00b      	beq.n	8001af4 <LL_EXTI_Init+0xb0>
 8001adc:	e020      	b.n	8001b20 <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff ff86 	bl	80019f4 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff ff11 	bl	8001914 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8001af2:	e01b      	b.n	8001b2c <LL_EXTI_Init+0xe8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff ff2f 	bl	800195c <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff ff52 	bl	80019ac <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001b08:	e010      	b.n	8001b2c <LL_EXTI_Init+0xe8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff ff00 	bl	8001914 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff ff47 	bl	80019ac <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001b1e:	e005      	b.n	8001b2c <LL_EXTI_Init+0xe8>
          default:
            status |= 0x02u;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f043 0302 	orr.w	r3, r3, #2
 8001b26:	60fb      	str	r3, [r7, #12]
            break;
 8001b28:	e000      	b.n	8001b2c <LL_EXTI_Init+0xe8>
        }
      }
 8001b2a:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d078      	beq.n	8001c26 <LL_EXTI_Init+0x1e2>
    {
      switch (EXTI_InitStruct->Mode)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	7a5b      	ldrb	r3, [r3, #9]
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d01c      	beq.n	8001b76 <LL_EXTI_Init+0x132>
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	dc25      	bgt.n	8001b8c <LL_EXTI_Init+0x148>
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d002      	beq.n	8001b4a <LL_EXTI_Init+0x106>
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d00b      	beq.n	8001b60 <LL_EXTI_Init+0x11c>
 8001b48:	e020      	b.n	8001b8c <LL_EXTI_Init+0x148>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff fecc 	bl	80018ec <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff fe55 	bl	8001808 <LL_EXTI_EnableIT_32_63>
          break;
 8001b5e:	e01a      	b.n	8001b96 <LL_EXTI_Init+0x152>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff fe75 	bl	8001854 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff fe96 	bl	80018a0 <LL_EXTI_EnableEvent_32_63>
          break;
 8001b74:	e00f      	b.n	8001b96 <LL_EXTI_Init+0x152>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff fe44 	bl	8001808 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff fe8b 	bl	80018a0 <LL_EXTI_EnableEvent_32_63>
          break;
 8001b8a:	e004      	b.n	8001b96 <LL_EXTI_Init+0x152>
        default:
          status |= 0x04u;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f043 0304 	orr.w	r3, r3, #4
 8001b92:	60fb      	str	r3, [r7, #12]
          break;
 8001b94:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	7a9b      	ldrb	r3, [r3, #10]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d043      	beq.n	8001c26 <LL_EXTI_Init+0x1e2>
      {
        switch (EXTI_InitStruct->Trigger)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	7a9b      	ldrb	r3, [r3, #10]
 8001ba2:	2b03      	cmp	r3, #3
 8001ba4:	d01c      	beq.n	8001be0 <LL_EXTI_Init+0x19c>
 8001ba6:	2b03      	cmp	r3, #3
 8001ba8:	dc25      	bgt.n	8001bf6 <LL_EXTI_Init+0x1b2>
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d002      	beq.n	8001bb4 <LL_EXTI_Init+0x170>
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d00b      	beq.n	8001bca <LL_EXTI_Init+0x186>
 8001bb2:	e020      	b.n	8001bf6 <LL_EXTI_Init+0x1b2>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff ff2f 	bl	8001a1c <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7ff feb8 	bl	8001938 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8001bc8:	e02e      	b.n	8001c28 <LL_EXTI_Init+0x1e4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff fed8 	bl	8001984 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff fef9 	bl	80019d0 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8001bde:	e023      	b.n	8001c28 <LL_EXTI_Init+0x1e4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff fea7 	bl	8001938 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7ff feee 	bl	80019d0 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8001bf4:	e018      	b.n	8001c28 <LL_EXTI_Init+0x1e4>
          default:
            status = ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	60fb      	str	r3, [r7, #12]
            break;
 8001bfa:	e015      	b.n	8001c28 <LL_EXTI_Init+0x1e4>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff fe13 	bl	800182c <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff fe5a 	bl	80018c4 <LL_EXTI_DisableEvent_0_31>
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff fe1d 	bl	8001854 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff fe64 	bl	80018ec <LL_EXTI_DisableEvent_32_63>
 8001c24:	e000      	b.n	8001c28 <LL_EXTI_Init+0x1e4>
      }
 8001c26:	bf00      	nop
  }

  return status;
 8001c28:	68fb      	ldr	r3, [r7, #12]
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3710      	adds	r7, #16
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <LL_GPIO_SetPinMode>:
{
 8001c32:	b480      	push	{r7}
 8001c34:	b08b      	sub	sp, #44	; 0x2c
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	60f8      	str	r0, [r7, #12]
 8001c3a:	60b9      	str	r1, [r7, #8]
 8001c3c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	fa93 f3a3 	rbit	r3, r3
 8001c4c:	613b      	str	r3, [r7, #16]
  return result;
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d101      	bne.n	8001c5c <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8001c58:	2320      	movs	r3, #32
 8001c5a:	e003      	b.n	8001c64 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	fab3 f383 	clz	r3, r3
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	2103      	movs	r1, #3
 8001c68:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	401a      	ands	r2, r3
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c74:	6a3b      	ldr	r3, [r7, #32]
 8001c76:	fa93 f3a3 	rbit	r3, r3
 8001c7a:	61fb      	str	r3, [r7, #28]
  return result;
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d101      	bne.n	8001c8a <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8001c86:	2320      	movs	r3, #32
 8001c88:	e003      	b.n	8001c92 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8001c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8c:	fab3 f383 	clz	r3, r3
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	6879      	ldr	r1, [r7, #4]
 8001c96:	fa01 f303 	lsl.w	r3, r1, r3
 8001c9a:	431a      	orrs	r2, r3
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	601a      	str	r2, [r3, #0]
}
 8001ca0:	bf00      	nop
 8001ca2:	372c      	adds	r7, #44	; 0x2c
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <LL_GPIO_SetPinOutputType>:
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	685a      	ldr	r2, [r3, #4]
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	401a      	ands	r2, r3
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	6879      	ldr	r1, [r7, #4]
 8001cc6:	fb01 f303 	mul.w	r3, r1, r3
 8001cca:	431a      	orrs	r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	605a      	str	r2, [r3, #4]
}
 8001cd0:	bf00      	nop
 8001cd2:	3714      	adds	r7, #20
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <LL_GPIO_SetPinSpeed>:
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b08b      	sub	sp, #44	; 0x2c
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	689a      	ldr	r2, [r3, #8]
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	fa93 f3a3 	rbit	r3, r3
 8001cf6:	613b      	str	r3, [r7, #16]
  return result;
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8001d02:	2320      	movs	r3, #32
 8001d04:	e003      	b.n	8001d0e <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	fab3 f383 	clz	r3, r3
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	2103      	movs	r1, #3
 8001d12:	fa01 f303 	lsl.w	r3, r1, r3
 8001d16:	43db      	mvns	r3, r3
 8001d18:	401a      	ands	r2, r3
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1e:	6a3b      	ldr	r3, [r7, #32]
 8001d20:	fa93 f3a3 	rbit	r3, r3
 8001d24:	61fb      	str	r3, [r7, #28]
  return result;
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d101      	bne.n	8001d34 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8001d30:	2320      	movs	r3, #32
 8001d32:	e003      	b.n	8001d3c <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8001d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d36:	fab3 f383 	clz	r3, r3
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	6879      	ldr	r1, [r7, #4]
 8001d40:	fa01 f303 	lsl.w	r3, r1, r3
 8001d44:	431a      	orrs	r2, r3
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	609a      	str	r2, [r3, #8]
}
 8001d4a:	bf00      	nop
 8001d4c:	372c      	adds	r7, #44	; 0x2c
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr

08001d56 <LL_GPIO_SetPinPull>:
{
 8001d56:	b480      	push	{r7}
 8001d58:	b08b      	sub	sp, #44	; 0x2c
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	60f8      	str	r0, [r7, #12]
 8001d5e:	60b9      	str	r1, [r7, #8]
 8001d60:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	68da      	ldr	r2, [r3, #12]
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	fa93 f3a3 	rbit	r3, r3
 8001d70:	613b      	str	r3, [r7, #16]
  return result;
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d101      	bne.n	8001d80 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8001d7c:	2320      	movs	r3, #32
 8001d7e:	e003      	b.n	8001d88 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	fab3 f383 	clz	r3, r3
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	2103      	movs	r1, #3
 8001d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d90:	43db      	mvns	r3, r3
 8001d92:	401a      	ands	r2, r3
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d98:	6a3b      	ldr	r3, [r7, #32]
 8001d9a:	fa93 f3a3 	rbit	r3, r3
 8001d9e:	61fb      	str	r3, [r7, #28]
  return result;
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d101      	bne.n	8001dae <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8001daa:	2320      	movs	r3, #32
 8001dac:	e003      	b.n	8001db6 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8001dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db0:	fab3 f383 	clz	r3, r3
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	6879      	ldr	r1, [r7, #4]
 8001dba:	fa01 f303 	lsl.w	r3, r1, r3
 8001dbe:	431a      	orrs	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	60da      	str	r2, [r3, #12]
}
 8001dc4:	bf00      	nop
 8001dc6:	372c      	adds	r7, #44	; 0x2c
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <LL_GPIO_SetAFPin_0_7>:
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b08b      	sub	sp, #44	; 0x2c
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	6a1a      	ldr	r2, [r3, #32]
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	fa93 f3a3 	rbit	r3, r3
 8001dea:	613b      	str	r3, [r7, #16]
  return result;
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d101      	bne.n	8001dfa <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8001df6:	2320      	movs	r3, #32
 8001df8:	e003      	b.n	8001e02 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	fab3 f383 	clz	r3, r3
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	210f      	movs	r1, #15
 8001e06:	fa01 f303 	lsl.w	r3, r1, r3
 8001e0a:	43db      	mvns	r3, r3
 8001e0c:	401a      	ands	r2, r3
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e12:	6a3b      	ldr	r3, [r7, #32]
 8001e14:	fa93 f3a3 	rbit	r3, r3
 8001e18:	61fb      	str	r3, [r7, #28]
  return result;
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d101      	bne.n	8001e28 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8001e24:	2320      	movs	r3, #32
 8001e26:	e003      	b.n	8001e30 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8001e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2a:	fab3 f383 	clz	r3, r3
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	6879      	ldr	r1, [r7, #4]
 8001e34:	fa01 f303 	lsl.w	r3, r1, r3
 8001e38:	431a      	orrs	r2, r3
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	621a      	str	r2, [r3, #32]
}
 8001e3e:	bf00      	nop
 8001e40:	372c      	adds	r7, #44	; 0x2c
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr

08001e4a <LL_GPIO_SetAFPin_8_15>:
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	b08b      	sub	sp, #44	; 0x2c
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	60f8      	str	r0, [r7, #12]
 8001e52:	60b9      	str	r1, [r7, #8]
 8001e54:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	0a1b      	lsrs	r3, r3, #8
 8001e5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	fa93 f3a3 	rbit	r3, r3
 8001e66:	613b      	str	r3, [r7, #16]
  return result;
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8001e72:	2320      	movs	r3, #32
 8001e74:	e003      	b.n	8001e7e <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	fab3 f383 	clz	r3, r3
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	210f      	movs	r1, #15
 8001e82:	fa01 f303 	lsl.w	r3, r1, r3
 8001e86:	43db      	mvns	r3, r3
 8001e88:	401a      	ands	r2, r3
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	0a1b      	lsrs	r3, r3, #8
 8001e8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e90:	6a3b      	ldr	r3, [r7, #32]
 8001e92:	fa93 f3a3 	rbit	r3, r3
 8001e96:	61fb      	str	r3, [r7, #28]
  return result;
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d101      	bne.n	8001ea6 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8001ea2:	2320      	movs	r3, #32
 8001ea4:	e003      	b.n	8001eae <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8001ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea8:	fab3 f383 	clz	r3, r3
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	6879      	ldr	r1, [r7, #4]
 8001eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb6:	431a      	orrs	r2, r3
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001ebc:	bf00      	nop
 8001ebe:	372c      	adds	r7, #44	; 0x2c
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b088      	sub	sp, #32
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	fa93 f3a3 	rbit	r3, r3
 8001ede:	60fb      	str	r3, [r7, #12]
  return result;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d101      	bne.n	8001eee <LL_GPIO_Init+0x26>
    return 32U;
 8001eea:	2320      	movs	r3, #32
 8001eec:	e003      	b.n	8001ef6 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	fab3 f383 	clz	r3, r3
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001ef8:	e048      	b.n	8001f8c <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	2101      	movs	r1, #1
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	fa01 f303 	lsl.w	r3, r1, r3
 8001f06:	4013      	ands	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d03a      	beq.n	8001f86 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d003      	beq.n	8001f20 <LL_GPIO_Init+0x58>
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d10e      	bne.n	8001f3e <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	461a      	mov	r2, r3
 8001f26:	69b9      	ldr	r1, [r7, #24]
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f7ff fed7 	bl	8001cdc <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	6819      	ldr	r1, [r3, #0]
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	461a      	mov	r2, r3
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f7ff feb7 	bl	8001cac <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	461a      	mov	r2, r3
 8001f44:	69b9      	ldr	r1, [r7, #24]
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f7ff ff05 	bl	8001d56 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d111      	bne.n	8001f78 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	2bff      	cmp	r3, #255	; 0xff
 8001f58:	d807      	bhi.n	8001f6a <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	695b      	ldr	r3, [r3, #20]
 8001f5e:	461a      	mov	r2, r3
 8001f60:	69b9      	ldr	r1, [r7, #24]
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f7ff ff34 	bl	8001dd0 <LL_GPIO_SetAFPin_0_7>
 8001f68:	e006      	b.n	8001f78 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	695b      	ldr	r3, [r3, #20]
 8001f6e:	461a      	mov	r2, r3
 8001f70:	69b9      	ldr	r1, [r7, #24]
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f7ff ff69 	bl	8001e4a <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	69b9      	ldr	r1, [r7, #24]
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f7ff fe56 	bl	8001c32 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	3301      	adds	r3, #1
 8001f8a:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	fa22 f303 	lsr.w	r3, r2, r3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1af      	bne.n	8001efa <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3720      	adds	r7, #32
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <LL_SPI_IsEnabled>:
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fb4:	2b40      	cmp	r3, #64	; 0x40
 8001fb6:	d101      	bne.n	8001fbc <LL_SPI_IsEnabled+0x18>
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e000      	b.n	8001fbe <LL_SPI_IsEnabled+0x1a>
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr

08001fca <LL_SPI_SetRxFIFOThreshold>:
{
 8001fca:	b480      	push	{r7}
 8001fcc:	b083      	sub	sp, #12
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
 8001fd2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	605a      	str	r2, [r3, #4]
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <LL_SPI_SetCRCPolynomial>:
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	461a      	mov	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	611a      	str	r2, [r3, #16]
}
 8002004:	bf00      	nop
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f7ff ffc0 	bl	8001fa4 <LL_SPI_IsEnabled>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d145      	bne.n	80020b6 <LL_SPI_Init+0xa6>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002032:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8002036:	683a      	ldr	r2, [r7, #0]
 8002038:	6811      	ldr	r1, [r2, #0]
 800203a:	683a      	ldr	r2, [r7, #0]
 800203c:	6852      	ldr	r2, [r2, #4]
 800203e:	4311      	orrs	r1, r2
 8002040:	683a      	ldr	r2, [r7, #0]
 8002042:	68d2      	ldr	r2, [r2, #12]
 8002044:	4311      	orrs	r1, r2
 8002046:	683a      	ldr	r2, [r7, #0]
 8002048:	6912      	ldr	r2, [r2, #16]
 800204a:	4311      	orrs	r1, r2
 800204c:	683a      	ldr	r2, [r7, #0]
 800204e:	6952      	ldr	r2, [r2, #20]
 8002050:	4311      	orrs	r1, r2
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	6992      	ldr	r2, [r2, #24]
 8002056:	4311      	orrs	r1, r2
 8002058:	683a      	ldr	r2, [r7, #0]
 800205a:	69d2      	ldr	r2, [r2, #28]
 800205c:	4311      	orrs	r1, r2
 800205e:	683a      	ldr	r2, [r7, #0]
 8002060:	6a12      	ldr	r2, [r2, #32]
 8002062:	430a      	orrs	r2, r1
 8002064:	431a      	orrs	r2, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002072:	f023 0304 	bic.w	r3, r3, #4
 8002076:	683a      	ldr	r2, [r7, #0]
 8002078:	6891      	ldr	r1, [r2, #8]
 800207a:	683a      	ldr	r2, [r7, #0]
 800207c:	6952      	ldr	r2, [r2, #20]
 800207e:	0c12      	lsrs	r2, r2, #16
 8002080:	430a      	orrs	r2, r1
 8002082:	431a      	orrs	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	605a      	str	r2, [r3, #4]
               SPI_CR2_DS | SPI_CR2_SSOE,
               SPI_InitStruct->DataWidth | (SPI_InitStruct->NSS >> 16U));

    /* Set Rx FIFO to Quarter (1 Byte) in case of 8 Bits mode. No DataPacking by default */
    if (SPI_InitStruct->DataWidth < LL_SPI_DATAWIDTH_9BIT)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002090:	d204      	bcs.n	800209c <LL_SPI_Init+0x8c>
    {
      LL_SPI_SetRxFIFOThreshold(SPIx, LL_SPI_RX_FIFO_TH_QUARTER);
 8002092:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f7ff ff97 	bl	8001fca <LL_SPI_SetRxFIFOThreshold>

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	6a1b      	ldr	r3, [r3, #32]
 80020a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020a4:	d105      	bne.n	80020b2 <LL_SPI_Init+0xa2>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020aa:	4619      	mov	r1, r3
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f7ff ff9f 	bl	8001ff0 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 80020b2:	2300      	movs	r3, #0
 80020b4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80020b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3710      	adds	r7, #16
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <LL_TIM_SetPrescaler>:
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	683a      	ldr	r2, [r7, #0]
 80020ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <LL_TIM_SetAutoReload>:
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	683a      	ldr	r2, [r7, #0]
 80020ea:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <LL_TIM_SetRepetitionCounter>:
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	695b      	ldr	r3, [r3, #20]
 8002120:	f043 0201 	orr.w	r2, r3, #1
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	615a      	str	r2, [r3, #20]
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a3d      	ldr	r2, [pc, #244]	; (800223c <LL_TIM_Init+0x108>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d013      	beq.n	8002174 <LL_TIM_Init+0x40>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002152:	d00f      	beq.n	8002174 <LL_TIM_Init+0x40>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a3a      	ldr	r2, [pc, #232]	; (8002240 <LL_TIM_Init+0x10c>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d00b      	beq.n	8002174 <LL_TIM_Init+0x40>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4a39      	ldr	r2, [pc, #228]	; (8002244 <LL_TIM_Init+0x110>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d007      	beq.n	8002174 <LL_TIM_Init+0x40>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4a38      	ldr	r2, [pc, #224]	; (8002248 <LL_TIM_Init+0x114>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d003      	beq.n	8002174 <LL_TIM_Init+0x40>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4a37      	ldr	r2, [pc, #220]	; (800224c <LL_TIM_Init+0x118>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d106      	bne.n	8002182 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	4313      	orrs	r3, r2
 8002180:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a2d      	ldr	r2, [pc, #180]	; (800223c <LL_TIM_Init+0x108>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d01f      	beq.n	80021ca <LL_TIM_Init+0x96>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002190:	d01b      	beq.n	80021ca <LL_TIM_Init+0x96>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a2a      	ldr	r2, [pc, #168]	; (8002240 <LL_TIM_Init+0x10c>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d017      	beq.n	80021ca <LL_TIM_Init+0x96>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a29      	ldr	r2, [pc, #164]	; (8002244 <LL_TIM_Init+0x110>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d013      	beq.n	80021ca <LL_TIM_Init+0x96>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a28      	ldr	r2, [pc, #160]	; (8002248 <LL_TIM_Init+0x114>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d00f      	beq.n	80021ca <LL_TIM_Init+0x96>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a27      	ldr	r2, [pc, #156]	; (800224c <LL_TIM_Init+0x118>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d00b      	beq.n	80021ca <LL_TIM_Init+0x96>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a26      	ldr	r2, [pc, #152]	; (8002250 <LL_TIM_Init+0x11c>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d007      	beq.n	80021ca <LL_TIM_Init+0x96>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a25      	ldr	r2, [pc, #148]	; (8002254 <LL_TIM_Init+0x120>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d003      	beq.n	80021ca <LL_TIM_Init+0x96>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a24      	ldr	r2, [pc, #144]	; (8002258 <LL_TIM_Init+0x124>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d106      	bne.n	80021d8 <LL_TIM_Init+0xa4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	68fa      	ldr	r2, [r7, #12]
 80021dc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	4619      	mov	r1, r3
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f7ff ff79 	bl	80020dc <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	881b      	ldrh	r3, [r3, #0]
 80021ee:	4619      	mov	r1, r3
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f7ff ff65 	bl	80020c0 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a10      	ldr	r2, [pc, #64]	; (800223c <LL_TIM_Init+0x108>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d00f      	beq.n	800221e <LL_TIM_Init+0xea>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a12      	ldr	r2, [pc, #72]	; (800224c <LL_TIM_Init+0x118>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d00b      	beq.n	800221e <LL_TIM_Init+0xea>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a11      	ldr	r2, [pc, #68]	; (8002250 <LL_TIM_Init+0x11c>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d007      	beq.n	800221e <LL_TIM_Init+0xea>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a10      	ldr	r2, [pc, #64]	; (8002254 <LL_TIM_Init+0x120>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d003      	beq.n	800221e <LL_TIM_Init+0xea>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a0f      	ldr	r2, [pc, #60]	; (8002258 <LL_TIM_Init+0x124>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d105      	bne.n	800222a <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	4619      	mov	r1, r3
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f7ff ff67 	bl	80020f8 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f7ff ff72 	bl	8002114 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002230:	2300      	movs	r3, #0
}
 8002232:	4618      	mov	r0, r3
 8002234:	3710      	adds	r7, #16
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	40012c00 	.word	0x40012c00
 8002240:	40000400 	.word	0x40000400
 8002244:	40000800 	.word	0x40000800
 8002248:	40000c00 	.word	0x40000c00
 800224c:	40013400 	.word	0x40013400
 8002250:	40014000 	.word	0x40014000
 8002254:	40014400 	.word	0x40014400
 8002258:	40014800 	.word	0x40014800

0800225c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	fbb2 f3f3 	udiv	r3, r2, r3
 800226e:	4a07      	ldr	r2, [pc, #28]	; (800228c <LL_InitTick+0x30>)
 8002270:	3b01      	subs	r3, #1
 8002272:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002274:	4b05      	ldr	r3, [pc, #20]	; (800228c <LL_InitTick+0x30>)
 8002276:	2200      	movs	r2, #0
 8002278:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800227a:	4b04      	ldr	r3, [pc, #16]	; (800228c <LL_InitTick+0x30>)
 800227c:	2205      	movs	r2, #5
 800227e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr
 800228c:	e000e010 	.word	0xe000e010

08002290 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002298:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f7ff ffdd 	bl	800225c <LL_InitTick>
}
 80022a2:	bf00      	nop
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
	...

080022ac <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80022b4:	4a04      	ldr	r2, [pc, #16]	; (80022c8 <LL_SetSystemCoreClock+0x1c>)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6013      	str	r3, [r2, #0]
}
 80022ba:	bf00      	nop
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	20000000 	.word	0x20000000

080022cc <__libc_init_array>:
 80022cc:	b570      	push	{r4, r5, r6, lr}
 80022ce:	4d0d      	ldr	r5, [pc, #52]	; (8002304 <__libc_init_array+0x38>)
 80022d0:	4c0d      	ldr	r4, [pc, #52]	; (8002308 <__libc_init_array+0x3c>)
 80022d2:	1b64      	subs	r4, r4, r5
 80022d4:	10a4      	asrs	r4, r4, #2
 80022d6:	2600      	movs	r6, #0
 80022d8:	42a6      	cmp	r6, r4
 80022da:	d109      	bne.n	80022f0 <__libc_init_array+0x24>
 80022dc:	4d0b      	ldr	r5, [pc, #44]	; (800230c <__libc_init_array+0x40>)
 80022de:	4c0c      	ldr	r4, [pc, #48]	; (8002310 <__libc_init_array+0x44>)
 80022e0:	f000 f820 	bl	8002324 <_init>
 80022e4:	1b64      	subs	r4, r4, r5
 80022e6:	10a4      	asrs	r4, r4, #2
 80022e8:	2600      	movs	r6, #0
 80022ea:	42a6      	cmp	r6, r4
 80022ec:	d105      	bne.n	80022fa <__libc_init_array+0x2e>
 80022ee:	bd70      	pop	{r4, r5, r6, pc}
 80022f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80022f4:	4798      	blx	r3
 80022f6:	3601      	adds	r6, #1
 80022f8:	e7ee      	b.n	80022d8 <__libc_init_array+0xc>
 80022fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80022fe:	4798      	blx	r3
 8002300:	3601      	adds	r6, #1
 8002302:	e7f2      	b.n	80022ea <__libc_init_array+0x1e>
 8002304:	0800234c 	.word	0x0800234c
 8002308:	0800234c 	.word	0x0800234c
 800230c:	0800234c 	.word	0x0800234c
 8002310:	08002350 	.word	0x08002350

08002314 <memset>:
 8002314:	4402      	add	r2, r0
 8002316:	4603      	mov	r3, r0
 8002318:	4293      	cmp	r3, r2
 800231a:	d100      	bne.n	800231e <memset+0xa>
 800231c:	4770      	bx	lr
 800231e:	f803 1b01 	strb.w	r1, [r3], #1
 8002322:	e7f9      	b.n	8002318 <memset+0x4>

08002324 <_init>:
 8002324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002326:	bf00      	nop
 8002328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800232a:	bc08      	pop	{r3}
 800232c:	469e      	mov	lr, r3
 800232e:	4770      	bx	lr

08002330 <_fini>:
 8002330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002332:	bf00      	nop
 8002334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002336:	bc08      	pop	{r3}
 8002338:	469e      	mov	lr, r3
 800233a:	4770      	bx	lr
