
fersat_pdh.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002520  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080026a8  080026a8  000126a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026b8  080026b8  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080026b8  080026b8  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080026b8  080026b8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026b8  080026b8  000126b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026bc  080026bc  000126bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080026c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003c4c  20000004  080026c4  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003c50  080026c4  00023c50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008e7d  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001970  00000000  00000000  00028eb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000908  00000000  00000000  0002a828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000830  00000000  00000000  0002b130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dad6  00000000  00000000  0002b960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000069b9  00000000  00000000  00049436  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a31b5  00000000  00000000  0004fdef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f2fa4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024bc  00000000  00000000  000f2ff4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002690 	.word	0x08002690

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08002690 	.word	0x08002690

080001c8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	db12      	blt.n	8000200 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001da:	79fb      	ldrb	r3, [r7, #7]
 80001dc:	f003 021f 	and.w	r2, r3, #31
 80001e0:	490a      	ldr	r1, [pc, #40]	; (800020c <__NVIC_DisableIRQ+0x44>)
 80001e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e6:	095b      	lsrs	r3, r3, #5
 80001e8:	2001      	movs	r0, #1
 80001ea:	fa00 f202 	lsl.w	r2, r0, r2
 80001ee:	3320      	adds	r3, #32
 80001f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80001f4:	f3bf 8f4f 	dsb	sy
}
 80001f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80001fa:	f3bf 8f6f 	isb	sy
}
 80001fe:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000200:	bf00      	nop
 8000202:	370c      	adds	r7, #12
 8000204:	46bd      	mov	sp, r7
 8000206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020a:	4770      	bx	lr
 800020c:	e000e100 	.word	0xe000e100

08000210 <LL_SPI_DMA_GetRegAddr>:
  * @rmtoll DR           DR            LL_SPI_DMA_GetRegAddr
  * @param  SPIx SPI Instance
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_SPI_DMA_GetRegAddr(SPI_TypeDef *SPIx)
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  return (uint32_t) &(SPIx->DR);
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	330c      	adds	r3, #12
}
 800021c:	4618      	mov	r0, r3
 800021e:	370c      	adds	r7, #12
 8000220:	46bd      	mov	sp, r7
 8000222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000226:	4770      	bx	lr

08000228 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000228:	b480      	push	{r7}
 800022a:	b083      	sub	sp, #12
 800022c:	af00      	add	r7, sp, #0
 800022e:	6078      	str	r0, [r7, #4]
 8000230:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	683a      	ldr	r2, [r7, #0]
 8000236:	619a      	str	r2, [r3, #24]
}
 8000238:	bf00      	nop
 800023a:	370c      	adds	r7, #12
 800023c:	46bd      	mov	sp, r7
 800023e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000242:	4770      	bx	lr

08000244 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000244:	b480      	push	{r7}
 8000246:	b083      	sub	sp, #12
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
 800024c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	683a      	ldr	r2, [r7, #0]
 8000252:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000254:	bf00      	nop
 8000256:	370c      	adds	r7, #12
 8000258:	46bd      	mov	sp, r7
 800025a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025e:	4770      	bx	lr

08000260 <ADC_Init>:
ADS131M08 *ads131m08;

// Function used to perform ADC initialization. Performs two SPI read operations
// that are necessary to synchronize DRDY pin and allocates memory for the samples.
// This function can also be used to perform initial ADC configuration if necessary.
void ADC_Init(ADS131M08 *adc_struct, SPI_TypeDef *SPIx, DMA_TypeDef *DMAx) {
 8000260:	b580      	push	{r7, lr}
 8000262:	b084      	sub	sp, #16
 8000264:	af00      	add	r7, sp, #0
 8000266:	60f8      	str	r0, [r7, #12]
 8000268:	60b9      	str	r1, [r7, #8]
 800026a:	607a      	str	r2, [r7, #4]
	// insert memory allocation here
	static uint8_t samples_array[NUM_SAMPLES * BYTES_PER_SAMPLE];
	samples = samples_array;
 800026c:	4b0f      	ldr	r3, [pc, #60]	; (80002ac <ADC_Init+0x4c>)
 800026e:	4a10      	ldr	r2, [pc, #64]	; (80002b0 <ADC_Init+0x50>)
 8000270:	601a      	str	r2, [r3, #0]

	adc_struct->SPIx = SPIx;
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	68ba      	ldr	r2, [r7, #8]
 8000276:	601a      	str	r2, [r3, #0]
	adc_struct->DMAx = DMAx;
 8000278:	68fb      	ldr	r3, [r7, #12]
 800027a:	687a      	ldr	r2, [r7, #4]
 800027c:	605a      	str	r2, [r3, #4]
	adc_struct->num_samples = NUM_SAMPLES;
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000284:	811a      	strh	r2, [r3, #8]
	adc_struct->samples = samples;
 8000286:	4b09      	ldr	r3, [pc, #36]	; (80002ac <ADC_Init+0x4c>)
 8000288:	681a      	ldr	r2, [r3, #0]
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	60da      	str	r2, [r3, #12]

	ads131m08 = adc_struct;
 800028e:	4a09      	ldr	r2, [pc, #36]	; (80002b4 <ADC_Init+0x54>)
 8000290:	68fb      	ldr	r3, [r7, #12]
 8000292:	6013      	str	r3, [r2, #0]
	ADC_first_read(SPIx);
 8000294:	68b8      	ldr	r0, [r7, #8]
 8000296:	f000 f811 	bl	80002bc <ADC_first_read>
	ADC_DMA_init();
 800029a:	f000 f881 	bl	80003a0 <ADC_DMA_init>
	drdy_it_initialized = 1;
 800029e:	4b06      	ldr	r3, [pc, #24]	; (80002b8 <ADC_Init+0x58>)
 80002a0:	2201      	movs	r2, #1
 80002a2:	701a      	strb	r2, [r3, #0]
}
 80002a4:	bf00      	nop
 80002a6:	3710      	adds	r7, #16
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	20000024 	.word	0x20000024
 80002b0:	2000004c 	.word	0x2000004c
 80002b4:	20000048 	.word	0x20000048
 80002b8:	20000022 	.word	0x20000022

080002bc <ADC_first_read>:

// Perform two sample reads to clear ADC's 2-deep FIFO buffer and ensure predictable
// DRDY pin behavior.
void ADC_first_read(SPI_TypeDef *SPIx) {
 80002bc:	b580      	push	{r7, lr}
 80002be:	b08c      	sub	sp, #48	; 0x30
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
	uint8_t rx_buffer[30];

	LL_GPIO_ResetOutputPin(ADC_CS_GPIOx, ADC_CS_PIN); // \CS low
 80002c4:	2102      	movs	r1, #2
 80002c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002ca:	f7ff ffbb 	bl	8000244 <LL_GPIO_ResetOutputPin>
	SPI_TransmitReceive(SPIx, 30, dummy_bytes, rx_buffer);
 80002ce:	f107 030c 	add.w	r3, r7, #12
 80002d2:	4a15      	ldr	r2, [pc, #84]	; (8000328 <ADC_first_read+0x6c>)
 80002d4:	211e      	movs	r1, #30
 80002d6:	6878      	ldr	r0, [r7, #4]
 80002d8:	f001 fa98 	bl	800180c <SPI_TransmitReceive>
	LL_GPIO_SetOutputPin(ADC_CS_GPIOx, ADC_CS_PIN); // \CS high
 80002dc:	2102      	movs	r1, #2
 80002de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002e2:	f7ff ffa1 	bl	8000228 <LL_GPIO_SetOutputPin>

	for(int i = 0; i < 100; i++); // TODO: write a delay function to replace this
 80002e6:	2300      	movs	r3, #0
 80002e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80002ea:	e002      	b.n	80002f2 <ADC_first_read+0x36>
 80002ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80002ee:	3301      	adds	r3, #1
 80002f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80002f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80002f4:	2b63      	cmp	r3, #99	; 0x63
 80002f6:	ddf9      	ble.n	80002ec <ADC_first_read+0x30>

	LL_GPIO_ResetOutputPin(ADC_CS_GPIOx, ADC_CS_PIN); // \CS low
 80002f8:	2102      	movs	r1, #2
 80002fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002fe:	f7ff ffa1 	bl	8000244 <LL_GPIO_ResetOutputPin>
	SPI_TransmitReceive(SPIx, 30, dummy_bytes, rx_buffer);
 8000302:	f107 030c 	add.w	r3, r7, #12
 8000306:	4a08      	ldr	r2, [pc, #32]	; (8000328 <ADC_first_read+0x6c>)
 8000308:	211e      	movs	r1, #30
 800030a:	6878      	ldr	r0, [r7, #4]
 800030c:	f001 fa7e 	bl	800180c <SPI_TransmitReceive>
	LL_GPIO_SetOutputPin(ADC_CS_GPIOx, ADC_CS_PIN); // \CS high
 8000310:	2102      	movs	r1, #2
 8000312:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000316:	f7ff ff87 	bl	8000228 <LL_GPIO_SetOutputPin>

	SPI_Disable(SPIx);
 800031a:	6878      	ldr	r0, [r7, #4]
 800031c:	f001 fac5 	bl	80018aa <SPI_Disable>
}
 8000320:	bf00      	nop
 8000322:	3730      	adds	r7, #48	; 0x30
 8000324:	46bd      	mov	sp, r7
 8000326:	bd80      	pop	{r7, pc}
 8000328:	20000028 	.word	0x20000028

0800032c <ADC_DRDY_interrupt_handler>:

// Called by DRDY interrupt routine, starts SPI DMA transfer.
void ADC_DRDY_interrupt_handler() {
 800032c:	b598      	push	{r3, r4, r7, lr}
 800032e:	af00      	add	r7, sp, #0
	if (drdy_it_initialized && current_sample_count < NUM_SAMPLES) {
 8000330:	4b17      	ldr	r3, [pc, #92]	; (8000390 <ADC_DRDY_interrupt_handler+0x64>)
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	b2db      	uxtb	r3, r3
 8000336:	2b00      	cmp	r3, #0
 8000338:	d028      	beq.n	800038c <ADC_DRDY_interrupt_handler+0x60>
 800033a:	4b16      	ldr	r3, [pc, #88]	; (8000394 <ADC_DRDY_interrupt_handler+0x68>)
 800033c:	881b      	ldrh	r3, [r3, #0]
 800033e:	b29b      	uxth	r3, r3
 8000340:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000344:	d222      	bcs.n	800038c <ADC_DRDY_interrupt_handler+0x60>
		ADC_Set_DMA_Data_Length();
 8000346:	f000 f855 	bl	80003f4 <ADC_Set_DMA_Data_Length>
		DMA_Reload_Memory_Address(ads131m08->DMAx, LL_DMA_CHANNEL_1, samples + current_sample_count++ * BYTES_PER_SAMPLE);
 800034a:	4b13      	ldr	r3, [pc, #76]	; (8000398 <ADC_DRDY_interrupt_handler+0x6c>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	6858      	ldr	r0, [r3, #4]
 8000350:	4b12      	ldr	r3, [pc, #72]	; (800039c <ADC_DRDY_interrupt_handler+0x70>)
 8000352:	681a      	ldr	r2, [r3, #0]
 8000354:	4b0f      	ldr	r3, [pc, #60]	; (8000394 <ADC_DRDY_interrupt_handler+0x68>)
 8000356:	881b      	ldrh	r3, [r3, #0]
 8000358:	b29b      	uxth	r3, r3
 800035a:	1c59      	adds	r1, r3, #1
 800035c:	b28c      	uxth	r4, r1
 800035e:	490d      	ldr	r1, [pc, #52]	; (8000394 <ADC_DRDY_interrupt_handler+0x68>)
 8000360:	800c      	strh	r4, [r1, #0]
 8000362:	4619      	mov	r1, r3
 8000364:	460b      	mov	r3, r1
 8000366:	011b      	lsls	r3, r3, #4
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	005b      	lsls	r3, r3, #1
 800036c:	4413      	add	r3, r2
 800036e:	461a      	mov	r2, r3
 8000370:	2100      	movs	r1, #0
 8000372:	f000 fa4d 	bl	8000810 <DMA_Reload_Memory_Address>
		ADC_Enable_SPI_DMA_transfer();
 8000376:	f000 f853 	bl	8000420 <ADC_Enable_SPI_DMA_transfer>

		NVIC_DisableIRQ(ADC_DRDY_IRQn); // Interrupt is re-enabled in DMA transfer complete routine
 800037a:	200a      	movs	r0, #10
 800037c:	f7ff ff24 	bl	80001c8 <__NVIC_DisableIRQ>

		SPI_Start_Transfer(ads131m08->SPIx);
 8000380:	4b05      	ldr	r3, [pc, #20]	; (8000398 <ADC_DRDY_interrupt_handler+0x6c>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	4618      	mov	r0, r3
 8000388:	f001 fa30 	bl	80017ec <SPI_Start_Transfer>
	}
}
 800038c:	bf00      	nop
 800038e:	bd98      	pop	{r3, r4, r7, pc}
 8000390:	20000022 	.word	0x20000022
 8000394:	20000020 	.word	0x20000020
 8000398:	20000048 	.word	0x20000048
 800039c:	20000024 	.word	0x20000024

080003a0 <ADC_DMA_init>:

void ADC_DMA_init() {
 80003a0:	b598      	push	{r3, r4, r7, lr}
 80003a2:	af00      	add	r7, sp, #0
	DMA_Channel_Init(ads131m08->DMAx, LL_DMA_CHANNEL_1, LL_SPI_DMA_GetRegAddr(ads131m08->SPIx), samples);
 80003a4:	4b10      	ldr	r3, [pc, #64]	; (80003e8 <ADC_DMA_init+0x48>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	685c      	ldr	r4, [r3, #4]
 80003aa:	4b0f      	ldr	r3, [pc, #60]	; (80003e8 <ADC_DMA_init+0x48>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	4618      	mov	r0, r3
 80003b2:	f7ff ff2d 	bl	8000210 <LL_SPI_DMA_GetRegAddr>
 80003b6:	4602      	mov	r2, r0
 80003b8:	4b0c      	ldr	r3, [pc, #48]	; (80003ec <ADC_DMA_init+0x4c>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	2100      	movs	r1, #0
 80003be:	4620      	mov	r0, r4
 80003c0:	f000 f9fd 	bl	80007be <DMA_Channel_Init>
	DMA_Channel_Init(ads131m08->DMAx, LL_DMA_CHANNEL_2, LL_SPI_DMA_GetRegAddr(ads131m08->SPIx), dummy_bytes);
 80003c4:	4b08      	ldr	r3, [pc, #32]	; (80003e8 <ADC_DMA_init+0x48>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	685c      	ldr	r4, [r3, #4]
 80003ca:	4b07      	ldr	r3, [pc, #28]	; (80003e8 <ADC_DMA_init+0x48>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4618      	mov	r0, r3
 80003d2:	f7ff ff1d 	bl	8000210 <LL_SPI_DMA_GetRegAddr>
 80003d6:	4602      	mov	r2, r0
 80003d8:	4b05      	ldr	r3, [pc, #20]	; (80003f0 <ADC_DMA_init+0x50>)
 80003da:	2101      	movs	r1, #1
 80003dc:	4620      	mov	r0, r4
 80003de:	f000 f9ee 	bl	80007be <DMA_Channel_Init>
}
 80003e2:	bf00      	nop
 80003e4:	bd98      	pop	{r3, r4, r7, pc}
 80003e6:	bf00      	nop
 80003e8:	20000048 	.word	0x20000048
 80003ec:	20000024 	.word	0x20000024
 80003f0:	20000028 	.word	0x20000028

080003f4 <ADC_Set_DMA_Data_Length>:

void ADC_Set_DMA_Data_Length() {
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
	DMA_Set_Channel_Data_Length(ads131m08->DMAx, LL_DMA_CHANNEL_1, BYTES_PER_SAMPLE);
 80003f8:	4b08      	ldr	r3, [pc, #32]	; (800041c <ADC_Set_DMA_Data_Length+0x28>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	685b      	ldr	r3, [r3, #4]
 80003fe:	221e      	movs	r2, #30
 8000400:	2100      	movs	r1, #0
 8000402:	4618      	mov	r0, r3
 8000404:	f000 f9f5 	bl	80007f2 <DMA_Set_Channel_Data_Length>
	DMA_Set_Channel_Data_Length(ads131m08->DMAx, LL_DMA_CHANNEL_2, BYTES_PER_SAMPLE);
 8000408:	4b04      	ldr	r3, [pc, #16]	; (800041c <ADC_Set_DMA_Data_Length+0x28>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	685b      	ldr	r3, [r3, #4]
 800040e:	221e      	movs	r2, #30
 8000410:	2101      	movs	r1, #1
 8000412:	4618      	mov	r0, r3
 8000414:	f000 f9ed 	bl	80007f2 <DMA_Set_Channel_Data_Length>
}
 8000418:	bf00      	nop
 800041a:	bd80      	pop	{r7, pc}
 800041c:	20000048 	.word	0x20000048

08000420 <ADC_Enable_SPI_DMA_transfer>:

void ADC_Enable_SPI_DMA_transfer() {
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
	SPI_Enable_DMA_Rx_Request(ads131m08->SPIx);
 8000424:	4b0c      	ldr	r3, [pc, #48]	; (8000458 <ADC_Enable_SPI_DMA_transfer+0x38>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	4618      	mov	r0, r3
 800042c:	f001 f9ac 	bl	8001788 <SPI_Enable_DMA_Rx_Request>
	DMA_Enable_CH1_CH2(ads131m08->DMAx);
 8000430:	4b09      	ldr	r3, [pc, #36]	; (8000458 <ADC_Enable_SPI_DMA_transfer+0x38>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	685b      	ldr	r3, [r3, #4]
 8000436:	4618      	mov	r0, r3
 8000438:	f000 f9fa 	bl	8000830 <DMA_Enable_CH1_CH2>
	SPI_Enable_DMA_Tx_Request(ads131m08->SPIx);
 800043c:	4b06      	ldr	r3, [pc, #24]	; (8000458 <ADC_Enable_SPI_DMA_transfer+0x38>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	4618      	mov	r0, r3
 8000444:	f001 f9ab 	bl	800179e <SPI_Enable_DMA_Tx_Request>
	SPI_Enable_RXNE_TXE_Interrupts(ads131m08->SPIx);
 8000448:	4b03      	ldr	r3, [pc, #12]	; (8000458 <ADC_Enable_SPI_DMA_transfer+0x38>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	4618      	mov	r0, r3
 8000450:	f001 f9be 	bl	80017d0 <SPI_Enable_RXNE_TXE_Interrupts>
}
 8000454:	bf00      	nop
 8000456:	bd80      	pop	{r7, pc}
 8000458:	20000048 	.word	0x20000048

0800045c <__NVIC_GetPriorityGrouping>:
{
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000460:	4b04      	ldr	r3, [pc, #16]	; (8000474 <__NVIC_GetPriorityGrouping+0x18>)
 8000462:	68db      	ldr	r3, [r3, #12]
 8000464:	0a1b      	lsrs	r3, r3, #8
 8000466:	f003 0307 	and.w	r3, r3, #7
}
 800046a:	4618      	mov	r0, r3
 800046c:	46bd      	mov	sp, r7
 800046e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000472:	4770      	bx	lr
 8000474:	e000ed00 	.word	0xe000ed00

08000478 <__NVIC_EnableIRQ>:
{
 8000478:	b480      	push	{r7}
 800047a:	b083      	sub	sp, #12
 800047c:	af00      	add	r7, sp, #0
 800047e:	4603      	mov	r3, r0
 8000480:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000486:	2b00      	cmp	r3, #0
 8000488:	db0b      	blt.n	80004a2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800048a:	79fb      	ldrb	r3, [r7, #7]
 800048c:	f003 021f 	and.w	r2, r3, #31
 8000490:	4907      	ldr	r1, [pc, #28]	; (80004b0 <__NVIC_EnableIRQ+0x38>)
 8000492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000496:	095b      	lsrs	r3, r3, #5
 8000498:	2001      	movs	r0, #1
 800049a:	fa00 f202 	lsl.w	r2, r0, r2
 800049e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80004a2:	bf00      	nop
 80004a4:	370c      	adds	r7, #12
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop
 80004b0:	e000e100 	.word	0xe000e100

080004b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80004b4:	b480      	push	{r7}
 80004b6:	b083      	sub	sp, #12
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	4603      	mov	r3, r0
 80004bc:	6039      	str	r1, [r7, #0]
 80004be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	db0a      	blt.n	80004de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004c8:	683b      	ldr	r3, [r7, #0]
 80004ca:	b2da      	uxtb	r2, r3
 80004cc:	490c      	ldr	r1, [pc, #48]	; (8000500 <__NVIC_SetPriority+0x4c>)
 80004ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004d2:	0112      	lsls	r2, r2, #4
 80004d4:	b2d2      	uxtb	r2, r2
 80004d6:	440b      	add	r3, r1
 80004d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80004dc:	e00a      	b.n	80004f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004de:	683b      	ldr	r3, [r7, #0]
 80004e0:	b2da      	uxtb	r2, r3
 80004e2:	4908      	ldr	r1, [pc, #32]	; (8000504 <__NVIC_SetPriority+0x50>)
 80004e4:	79fb      	ldrb	r3, [r7, #7]
 80004e6:	f003 030f 	and.w	r3, r3, #15
 80004ea:	3b04      	subs	r3, #4
 80004ec:	0112      	lsls	r2, r2, #4
 80004ee:	b2d2      	uxtb	r2, r2
 80004f0:	440b      	add	r3, r1
 80004f2:	761a      	strb	r2, [r3, #24]
}
 80004f4:	bf00      	nop
 80004f6:	370c      	adds	r7, #12
 80004f8:	46bd      	mov	sp, r7
 80004fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fe:	4770      	bx	lr
 8000500:	e000e100 	.word	0xe000e100
 8000504:	e000ed00 	.word	0xe000ed00

08000508 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000508:	b480      	push	{r7}
 800050a:	b089      	sub	sp, #36	; 0x24
 800050c:	af00      	add	r7, sp, #0
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	60b9      	str	r1, [r7, #8]
 8000512:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	f003 0307 	and.w	r3, r3, #7
 800051a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800051c:	69fb      	ldr	r3, [r7, #28]
 800051e:	f1c3 0307 	rsb	r3, r3, #7
 8000522:	2b04      	cmp	r3, #4
 8000524:	bf28      	it	cs
 8000526:	2304      	movcs	r3, #4
 8000528:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800052a:	69fb      	ldr	r3, [r7, #28]
 800052c:	3304      	adds	r3, #4
 800052e:	2b06      	cmp	r3, #6
 8000530:	d902      	bls.n	8000538 <NVIC_EncodePriority+0x30>
 8000532:	69fb      	ldr	r3, [r7, #28]
 8000534:	3b03      	subs	r3, #3
 8000536:	e000      	b.n	800053a <NVIC_EncodePriority+0x32>
 8000538:	2300      	movs	r3, #0
 800053a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800053c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000540:	69bb      	ldr	r3, [r7, #24]
 8000542:	fa02 f303 	lsl.w	r3, r2, r3
 8000546:	43da      	mvns	r2, r3
 8000548:	68bb      	ldr	r3, [r7, #8]
 800054a:	401a      	ands	r2, r3
 800054c:	697b      	ldr	r3, [r7, #20]
 800054e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000550:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000554:	697b      	ldr	r3, [r7, #20]
 8000556:	fa01 f303 	lsl.w	r3, r1, r3
 800055a:	43d9      	mvns	r1, r3
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000560:	4313      	orrs	r3, r2
         );
}
 8000562:	4618      	mov	r0, r3
 8000564:	3724      	adds	r7, #36	; 0x24
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr
	...

08000570 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 800057e:	4a0c      	ldr	r2, [pc, #48]	; (80005b0 <LL_DMA_EnableChannel+0x40>)
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	4413      	add	r3, r2
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	461a      	mov	r2, r3
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	4413      	add	r3, r2
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	4908      	ldr	r1, [pc, #32]	; (80005b0 <LL_DMA_EnableChannel+0x40>)
 8000590:	683a      	ldr	r2, [r7, #0]
 8000592:	440a      	add	r2, r1
 8000594:	7812      	ldrb	r2, [r2, #0]
 8000596:	4611      	mov	r1, r2
 8000598:	68fa      	ldr	r2, [r7, #12]
 800059a:	440a      	add	r2, r1
 800059c:	f043 0301 	orr.w	r3, r3, #1
 80005a0:	6013      	str	r3, [r2, #0]
}
 80005a2:	bf00      	nop
 80005a4:	3714      	adds	r7, #20
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	080026a8 	.word	0x080026a8

080005b4 <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	60fb      	str	r3, [r7, #12]
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 80005c2:	4a0c      	ldr	r2, [pc, #48]	; (80005f4 <LL_DMA_DisableChannel+0x40>)
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	4413      	add	r3, r2
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	461a      	mov	r2, r3
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	4413      	add	r3, r2
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4908      	ldr	r1, [pc, #32]	; (80005f4 <LL_DMA_DisableChannel+0x40>)
 80005d4:	683a      	ldr	r2, [r7, #0]
 80005d6:	440a      	add	r2, r1
 80005d8:	7812      	ldrb	r2, [r2, #0]
 80005da:	4611      	mov	r1, r2
 80005dc:	68fa      	ldr	r2, [r7, #12]
 80005de:	440a      	add	r2, r1
 80005e0:	f023 0301 	bic.w	r3, r3, #1
 80005e4:	6013      	str	r3, [r2, #0]
}
 80005e6:	bf00      	nop
 80005e8:	3714      	adds	r7, #20
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	080026a8 	.word	0x080026a8

080005f8 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b087      	sub	sp, #28
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	60f8      	str	r0, [r7, #12]
 8000600:	60b9      	str	r1, [r7, #8]
 8000602:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8000608:	4a0d      	ldr	r2, [pc, #52]	; (8000640 <LL_DMA_SetDataLength+0x48>)
 800060a:	68bb      	ldr	r3, [r7, #8]
 800060c:	4413      	add	r3, r2
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	461a      	mov	r2, r3
 8000612:	697b      	ldr	r3, [r7, #20]
 8000614:	4413      	add	r3, r2
 8000616:	685b      	ldr	r3, [r3, #4]
 8000618:	0c1b      	lsrs	r3, r3, #16
 800061a:	041b      	lsls	r3, r3, #16
 800061c:	4908      	ldr	r1, [pc, #32]	; (8000640 <LL_DMA_SetDataLength+0x48>)
 800061e:	68ba      	ldr	r2, [r7, #8]
 8000620:	440a      	add	r2, r1
 8000622:	7812      	ldrb	r2, [r2, #0]
 8000624:	4611      	mov	r1, r2
 8000626:	697a      	ldr	r2, [r7, #20]
 8000628:	440a      	add	r2, r1
 800062a:	4611      	mov	r1, r2
 800062c:	687a      	ldr	r2, [r7, #4]
 800062e:	4313      	orrs	r3, r2
 8000630:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 8000632:	bf00      	nop
 8000634:	371c      	adds	r7, #28
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	080026a8 	.word	0x080026a8

08000644 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  MemoryAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAddress)
{
 8000644:	b480      	push	{r7}
 8000646:	b087      	sub	sp, #28
 8000648:	af00      	add	r7, sp, #0
 800064a:	60f8      	str	r0, [r7, #12]
 800064c:	60b9      	str	r1, [r7, #8]
 800064e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 8000654:	4a07      	ldr	r2, [pc, #28]	; (8000674 <LL_DMA_SetMemoryAddress+0x30>)
 8000656:	68bb      	ldr	r3, [r7, #8]
 8000658:	4413      	add	r3, r2
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	461a      	mov	r2, r3
 800065e:	697b      	ldr	r3, [r7, #20]
 8000660:	4413      	add	r3, r2
 8000662:	461a      	mov	r2, r3
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	60d3      	str	r3, [r2, #12]
}
 8000668:	bf00      	nop
 800066a:	371c      	adds	r7, #28
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	080026a8 	.word	0x080026a8

08000678 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  PeriphAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
 8000678:	b480      	push	{r7}
 800067a:	b087      	sub	sp, #28
 800067c:	af00      	add	r7, sp, #0
 800067e:	60f8      	str	r0, [r7, #12]
 8000680:	60b9      	str	r1, [r7, #8]
 8000682:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 8000688:	4a07      	ldr	r2, [pc, #28]	; (80006a8 <LL_DMA_SetPeriphAddress+0x30>)
 800068a:	68bb      	ldr	r3, [r7, #8]
 800068c:	4413      	add	r3, r2
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	461a      	mov	r2, r3
 8000692:	697b      	ldr	r3, [r7, #20]
 8000694:	4413      	add	r3, r2
 8000696:	461a      	mov	r2, r3
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	6093      	str	r3, [r2, #8]
}
 800069c:	bf00      	nop
 800069e:	371c      	adds	r7, #28
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr
 80006a8:	080026a8 	.word	0x080026a8

080006ac <LL_DMA_ClearFlag_TC1>:
  * @rmtoll IFCR         CTCIF1        LL_DMA_ClearFlag_TC1
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC1(DMA_TypeDef *DMAx)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	2202      	movs	r2, #2
 80006b8:	605a      	str	r2, [r3, #4]
}
 80006ba:	bf00      	nop
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr

080006c6 <LL_DMA_ClearFlag_TC2>:
  * @rmtoll IFCR         CTCIF2        LL_DMA_ClearFlag_TC2
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC2(DMA_TypeDef *DMAx)
{
 80006c6:	b480      	push	{r7}
 80006c8:	b083      	sub	sp, #12
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF2);
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	2220      	movs	r2, #32
 80006d2:	605a      	str	r2, [r3, #4]
}
 80006d4:	bf00      	nop
 80006d6:	370c      	adds	r7, #12
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr

080006e0 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b085      	sub	sp, #20
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;    
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 80006ee:	4a0c      	ldr	r2, [pc, #48]	; (8000720 <LL_DMA_EnableIT_TC+0x40>)
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	4413      	add	r3, r2
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	461a      	mov	r2, r3
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	4413      	add	r3, r2
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4908      	ldr	r1, [pc, #32]	; (8000720 <LL_DMA_EnableIT_TC+0x40>)
 8000700:	683a      	ldr	r2, [r7, #0]
 8000702:	440a      	add	r2, r1
 8000704:	7812      	ldrb	r2, [r2, #0]
 8000706:	4611      	mov	r1, r2
 8000708:	68fa      	ldr	r2, [r7, #12]
 800070a:	440a      	add	r2, r1
 800070c:	f043 0302 	orr.w	r3, r3, #2
 8000710:	6013      	str	r3, [r2, #0]
}
 8000712:	bf00      	nop
 8000714:	3714      	adds	r7, #20
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	080026a8 	.word	0x080026a8

08000724 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000724:	b480      	push	{r7}
 8000726:	b085      	sub	sp, #20
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800072c:	4b08      	ldr	r3, [pc, #32]	; (8000750 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800072e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000730:	4907      	ldr	r1, [pc, #28]	; (8000750 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	4313      	orrs	r3, r2
 8000736:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000738:	4b05      	ldr	r3, [pc, #20]	; (8000750 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800073a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	4013      	ands	r3, r2
 8000740:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000742:	68fb      	ldr	r3, [r7, #12]
}
 8000744:	bf00      	nop
 8000746:	3714      	adds	r7, #20
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr
 8000750:	40021000 	.word	0x40021000

08000754 <LL_GPIO_SetOutputPin>:
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	683a      	ldr	r2, [r7, #0]
 8000762:	619a      	str	r2, [r3, #24]
}
 8000764:	bf00      	nop
 8000766:	370c      	adds	r7, #12
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr

08000770 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 8000774:	2002      	movs	r0, #2
 8000776:	f7ff ffd5 	bl	8000724 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA2_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800077a:	f7ff fe6f 	bl	800045c <__NVIC_GetPriorityGrouping>
 800077e:	4603      	mov	r3, r0
 8000780:	2200      	movs	r2, #0
 8000782:	2100      	movs	r1, #0
 8000784:	4618      	mov	r0, r3
 8000786:	f7ff febf 	bl	8000508 <NVIC_EncodePriority>
 800078a:	4603      	mov	r3, r0
 800078c:	4619      	mov	r1, r3
 800078e:	2038      	movs	r0, #56	; 0x38
 8000790:	f7ff fe90 	bl	80004b4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8000794:	2038      	movs	r0, #56	; 0x38
 8000796:	f7ff fe6f 	bl	8000478 <__NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Channel2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800079a:	f7ff fe5f 	bl	800045c <__NVIC_GetPriorityGrouping>
 800079e:	4603      	mov	r3, r0
 80007a0:	2200      	movs	r2, #0
 80007a2:	2100      	movs	r1, #0
 80007a4:	4618      	mov	r0, r3
 80007a6:	f7ff feaf 	bl	8000508 <NVIC_EncodePriority>
 80007aa:	4603      	mov	r3, r0
 80007ac:	4619      	mov	r1, r3
 80007ae:	2039      	movs	r0, #57	; 0x39
 80007b0:	f7ff fe80 	bl	80004b4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 80007b4:	2039      	movs	r0, #57	; 0x39
 80007b6:	f7ff fe5f 	bl	8000478 <__NVIC_EnableIRQ>

}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}

080007be <DMA_Channel_Init>:

/* USER CODE BEGIN 2 */
void DMA_Channel_Init(DMA_TypeDef *DMAx, uint32_t channel, uint32_t periph_addr, uint8_t *mem_addr) {
 80007be:	b580      	push	{r7, lr}
 80007c0:	b084      	sub	sp, #16
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	60f8      	str	r0, [r7, #12]
 80007c6:	60b9      	str	r1, [r7, #8]
 80007c8:	607a      	str	r2, [r7, #4]
 80007ca:	603b      	str	r3, [r7, #0]
	LL_DMA_SetPeriphAddress(DMAx, channel, periph_addr);
 80007cc:	687a      	ldr	r2, [r7, #4]
 80007ce:	68b9      	ldr	r1, [r7, #8]
 80007d0:	68f8      	ldr	r0, [r7, #12]
 80007d2:	f7ff ff51 	bl	8000678 <LL_DMA_SetPeriphAddress>
	LL_DMA_SetMemoryAddress(DMAx, channel, (uint32_t) mem_addr);
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	461a      	mov	r2, r3
 80007da:	68b9      	ldr	r1, [r7, #8]
 80007dc:	68f8      	ldr	r0, [r7, #12]
 80007de:	f7ff ff31 	bl	8000644 <LL_DMA_SetMemoryAddress>
	LL_DMA_EnableIT_TC(DMAx, channel);
 80007e2:	68b9      	ldr	r1, [r7, #8]
 80007e4:	68f8      	ldr	r0, [r7, #12]
 80007e6:	f7ff ff7b 	bl	80006e0 <LL_DMA_EnableIT_TC>
}
 80007ea:	bf00      	nop
 80007ec:	3710      	adds	r7, #16
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <DMA_Set_Channel_Data_Length>:

void DMA_Set_Channel_Data_Length(DMA_TypeDef *DMAx, uint32_t channel, uint32_t length) {
 80007f2:	b580      	push	{r7, lr}
 80007f4:	b084      	sub	sp, #16
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	60f8      	str	r0, [r7, #12]
 80007fa:	60b9      	str	r1, [r7, #8]
 80007fc:	607a      	str	r2, [r7, #4]
	LL_DMA_SetDataLength(DMAx, channel, length);
 80007fe:	687a      	ldr	r2, [r7, #4]
 8000800:	68b9      	ldr	r1, [r7, #8]
 8000802:	68f8      	ldr	r0, [r7, #12]
 8000804:	f7ff fef8 	bl	80005f8 <LL_DMA_SetDataLength>
}
 8000808:	bf00      	nop
 800080a:	3710      	adds	r7, #16
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}

08000810 <DMA_Reload_Memory_Address>:

void DMA_Reload_Memory_Address(DMA_TypeDef *DMAx, uint32_t channel, uint8_t *mem_addr) {
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
 8000816:	60f8      	str	r0, [r7, #12]
 8000818:	60b9      	str	r1, [r7, #8]
 800081a:	607a      	str	r2, [r7, #4]
	LL_DMA_SetMemoryAddress(DMAx, channel, (uint32_t) mem_addr);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	461a      	mov	r2, r3
 8000820:	68b9      	ldr	r1, [r7, #8]
 8000822:	68f8      	ldr	r0, [r7, #12]
 8000824:	f7ff ff0e 	bl	8000644 <LL_DMA_SetMemoryAddress>
}
 8000828:	bf00      	nop
 800082a:	3710      	adds	r7, #16
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}

08000830 <DMA_Enable_CH1_CH2>:

void DMA_Enable_CH1_CH2(DMA_TypeDef *DMAx) {
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
	LL_DMA_EnableChannel(DMAx, LL_DMA_CHANNEL_1);
 8000838:	2100      	movs	r1, #0
 800083a:	6878      	ldr	r0, [r7, #4]
 800083c:	f7ff fe98 	bl	8000570 <LL_DMA_EnableChannel>
	LL_DMA_EnableChannel(DMAx, LL_DMA_CHANNEL_2);
 8000840:	2101      	movs	r1, #1
 8000842:	6878      	ldr	r0, [r7, #4]
 8000844:	f7ff fe94 	bl	8000570 <LL_DMA_EnableChannel>
}
 8000848:	bf00      	nop
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}

08000850 <DMA_Transfer_Complete_RX_interrupt_handler>:

void DMA_Transfer_Complete_RX_interrupt_handler() {
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
	LL_DMA_ClearFlag_TC1(DMA2);
 8000854:	480b      	ldr	r0, [pc, #44]	; (8000884 <DMA_Transfer_Complete_RX_interrupt_handler+0x34>)
 8000856:	f7ff ff29 	bl	80006ac <LL_DMA_ClearFlag_TC1>
	LL_DMA_DisableChannel(DMA2, LL_DMA_CHANNEL_1);
 800085a:	2100      	movs	r1, #0
 800085c:	4809      	ldr	r0, [pc, #36]	; (8000884 <DMA_Transfer_Complete_RX_interrupt_handler+0x34>)
 800085e:	f7ff fea9 	bl	80005b4 <LL_DMA_DisableChannel>

	if (tc == 1) {
 8000862:	4b09      	ldr	r3, [pc, #36]	; (8000888 <DMA_Transfer_Complete_RX_interrupt_handler+0x38>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	b2db      	uxtb	r3, r3
 8000868:	2b01      	cmp	r3, #1
 800086a:	d106      	bne.n	800087a <DMA_Transfer_Complete_RX_interrupt_handler+0x2a>
		DMA_Disable(SB_SPIx);
 800086c:	4807      	ldr	r0, [pc, #28]	; (800088c <DMA_Transfer_Complete_RX_interrupt_handler+0x3c>)
 800086e:	f000 f82f 	bl	80008d0 <DMA_Disable>
		tc = 0;
 8000872:	4b05      	ldr	r3, [pc, #20]	; (8000888 <DMA_Transfer_Complete_RX_interrupt_handler+0x38>)
 8000874:	2200      	movs	r2, #0
 8000876:	701a      	strb	r2, [r3, #0]
	} else {
		tc = 1;
	}
}
 8000878:	e002      	b.n	8000880 <DMA_Transfer_Complete_RX_interrupt_handler+0x30>
		tc = 1;
 800087a:	4b03      	ldr	r3, [pc, #12]	; (8000888 <DMA_Transfer_Complete_RX_interrupt_handler+0x38>)
 800087c:	2201      	movs	r2, #1
 800087e:	701a      	strb	r2, [r3, #0]
}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40020400 	.word	0x40020400
 8000888:	20003c4c 	.word	0x20003c4c
 800088c:	40003c00 	.word	0x40003c00

08000890 <DMA_Transfer_Complete_TX_interrupt_handler>:

void DMA_Transfer_Complete_TX_interrupt_handler() {
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
	LL_DMA_ClearFlag_TC2(DMA2);
 8000894:	480b      	ldr	r0, [pc, #44]	; (80008c4 <DMA_Transfer_Complete_TX_interrupt_handler+0x34>)
 8000896:	f7ff ff16 	bl	80006c6 <LL_DMA_ClearFlag_TC2>
	LL_DMA_DisableChannel(DMA2, LL_DMA_CHANNEL_2);
 800089a:	2101      	movs	r1, #1
 800089c:	4809      	ldr	r0, [pc, #36]	; (80008c4 <DMA_Transfer_Complete_TX_interrupt_handler+0x34>)
 800089e:	f7ff fe89 	bl	80005b4 <LL_DMA_DisableChannel>

	if (tc == 1) {
 80008a2:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <DMA_Transfer_Complete_TX_interrupt_handler+0x38>)
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	2b01      	cmp	r3, #1
 80008aa:	d106      	bne.n	80008ba <DMA_Transfer_Complete_TX_interrupt_handler+0x2a>
		DMA_Disable(SB_SPIx);
 80008ac:	4807      	ldr	r0, [pc, #28]	; (80008cc <DMA_Transfer_Complete_TX_interrupt_handler+0x3c>)
 80008ae:	f000 f80f 	bl	80008d0 <DMA_Disable>
		tc = 0;
 80008b2:	4b05      	ldr	r3, [pc, #20]	; (80008c8 <DMA_Transfer_Complete_TX_interrupt_handler+0x38>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	701a      	strb	r2, [r3, #0]
	} else {
		tc = 1;
	}
}
 80008b8:	e002      	b.n	80008c0 <DMA_Transfer_Complete_TX_interrupt_handler+0x30>
		tc = 1;
 80008ba:	4b03      	ldr	r3, [pc, #12]	; (80008c8 <DMA_Transfer_Complete_TX_interrupt_handler+0x38>)
 80008bc:	2201      	movs	r2, #1
 80008be:	701a      	strb	r2, [r3, #0]
}
 80008c0:	bf00      	nop
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40020400 	.word	0x40020400
 80008c8:	20003c4c 	.word	0x20003c4c
 80008cc:	40003c00 	.word	0x40003c00

080008d0 <DMA_Disable>:


void DMA_Disable(SPI_TypeDef *SPIx) {
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
	SPI_Disable(SPIx);
 80008d8:	6878      	ldr	r0, [r7, #4]
 80008da:	f000 ffe6 	bl	80018aa <SPI_Disable>

	SPI_Disable_DMA_Requests(SPIx);
 80008de:	6878      	ldr	r0, [r7, #4]
 80008e0:	f000 ff68 	bl	80017b4 <SPI_Disable_DMA_Requests>

	LL_GPIO_SetOutputPin(ADC_CS_GPIOx, ADC_CS_PIN);
 80008e4:	2102      	movs	r1, #2
 80008e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ea:	f7ff ff33 	bl	8000754 <LL_GPIO_SetOutputPin>
	NVIC_EnableIRQ(EXTI4_IRQn);
 80008ee:	200a      	movs	r0, #10
 80008f0:	f7ff fdc2 	bl	8000478 <__NVIC_EnableIRQ>
}
 80008f4:	bf00      	nop
 80008f6:	3708      	adds	r7, #8
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}

080008fc <__NVIC_GetPriorityGrouping>:
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000900:	4b04      	ldr	r3, [pc, #16]	; (8000914 <__NVIC_GetPriorityGrouping+0x18>)
 8000902:	68db      	ldr	r3, [r3, #12]
 8000904:	0a1b      	lsrs	r3, r3, #8
 8000906:	f003 0307 	and.w	r3, r3, #7
}
 800090a:	4618      	mov	r0, r3
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr
 8000914:	e000ed00 	.word	0xe000ed00

08000918 <__NVIC_EnableIRQ>:
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000926:	2b00      	cmp	r3, #0
 8000928:	db0b      	blt.n	8000942 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800092a:	79fb      	ldrb	r3, [r7, #7]
 800092c:	f003 021f 	and.w	r2, r3, #31
 8000930:	4907      	ldr	r1, [pc, #28]	; (8000950 <__NVIC_EnableIRQ+0x38>)
 8000932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000936:	095b      	lsrs	r3, r3, #5
 8000938:	2001      	movs	r0, #1
 800093a:	fa00 f202 	lsl.w	r2, r0, r2
 800093e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000942:	bf00      	nop
 8000944:	370c      	adds	r7, #12
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	e000e100 	.word	0xe000e100

08000954 <__NVIC_SetPriority>:
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	6039      	str	r1, [r7, #0]
 800095e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000964:	2b00      	cmp	r3, #0
 8000966:	db0a      	blt.n	800097e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	b2da      	uxtb	r2, r3
 800096c:	490c      	ldr	r1, [pc, #48]	; (80009a0 <__NVIC_SetPriority+0x4c>)
 800096e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000972:	0112      	lsls	r2, r2, #4
 8000974:	b2d2      	uxtb	r2, r2
 8000976:	440b      	add	r3, r1
 8000978:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800097c:	e00a      	b.n	8000994 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	b2da      	uxtb	r2, r3
 8000982:	4908      	ldr	r1, [pc, #32]	; (80009a4 <__NVIC_SetPriority+0x50>)
 8000984:	79fb      	ldrb	r3, [r7, #7]
 8000986:	f003 030f 	and.w	r3, r3, #15
 800098a:	3b04      	subs	r3, #4
 800098c:	0112      	lsls	r2, r2, #4
 800098e:	b2d2      	uxtb	r2, r2
 8000990:	440b      	add	r3, r1
 8000992:	761a      	strb	r2, [r3, #24]
}
 8000994:	bf00      	nop
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr
 80009a0:	e000e100 	.word	0xe000e100
 80009a4:	e000ed00 	.word	0xe000ed00

080009a8 <NVIC_EncodePriority>:
{
 80009a8:	b480      	push	{r7}
 80009aa:	b089      	sub	sp, #36	; 0x24
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	60f8      	str	r0, [r7, #12]
 80009b0:	60b9      	str	r1, [r7, #8]
 80009b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	f003 0307 	and.w	r3, r3, #7
 80009ba:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009bc:	69fb      	ldr	r3, [r7, #28]
 80009be:	f1c3 0307 	rsb	r3, r3, #7
 80009c2:	2b04      	cmp	r3, #4
 80009c4:	bf28      	it	cs
 80009c6:	2304      	movcs	r3, #4
 80009c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ca:	69fb      	ldr	r3, [r7, #28]
 80009cc:	3304      	adds	r3, #4
 80009ce:	2b06      	cmp	r3, #6
 80009d0:	d902      	bls.n	80009d8 <NVIC_EncodePriority+0x30>
 80009d2:	69fb      	ldr	r3, [r7, #28]
 80009d4:	3b03      	subs	r3, #3
 80009d6:	e000      	b.n	80009da <NVIC_EncodePriority+0x32>
 80009d8:	2300      	movs	r3, #0
 80009da:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009e0:	69bb      	ldr	r3, [r7, #24]
 80009e2:	fa02 f303 	lsl.w	r3, r2, r3
 80009e6:	43da      	mvns	r2, r3
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	401a      	ands	r2, r3
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	fa01 f303 	lsl.w	r3, r1, r3
 80009fa:	43d9      	mvns	r1, r3
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a00:	4313      	orrs	r3, r2
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3724      	adds	r7, #36	; 0x24
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
	...

08000a10 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000a18:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000a1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a1c:	4907      	ldr	r1, [pc, #28]	; (8000a3c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4313      	orrs	r3, r2
 8000a22:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000a24:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000a26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a2e:	68fb      	ldr	r3, [r7, #12]
}
 8000a30:	bf00      	nop
 8000a32:	3714      	adds	r7, #20
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	40021000 	.word	0x40021000

08000a40 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b087      	sub	sp, #28
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8000a4a:	4a17      	ldr	r2, [pc, #92]	; (8000aa8 <LL_SYSCFG_SetEXTISource+0x68>)
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	3302      	adds	r3, #2
 8000a52:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	0c1b      	lsrs	r3, r3, #16
 8000a5a:	43db      	mvns	r3, r3
 8000a5c:	ea02 0103 	and.w	r1, r2, r3
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	0c1b      	lsrs	r3, r3, #16
 8000a64:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a66:	693b      	ldr	r3, [r7, #16]
 8000a68:	fa93 f3a3 	rbit	r3, r3
 8000a6c:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d101      	bne.n	8000a7c <LL_SYSCFG_SetEXTISource+0x3c>
  {
    return 32U;
 8000a78:	2320      	movs	r3, #32
 8000a7a:	e003      	b.n	8000a84 <LL_SYSCFG_SetEXTISource+0x44>
  }
  return __builtin_clz(value);
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	fab3 f383 	clz	r3, r3
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	461a      	mov	r2, r3
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	fa03 f202 	lsl.w	r2, r3, r2
 8000a8c:	4806      	ldr	r0, [pc, #24]	; (8000aa8 <LL_SYSCFG_SetEXTISource+0x68>)
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	430a      	orrs	r2, r1
 8000a94:	3302      	adds	r3, #2
 8000a96:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000a9a:	bf00      	nop
 8000a9c:	371c      	adds	r7, #28
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	40010000 	.word	0x40010000

08000aac <LL_GPIO_SetPinMode>:
{
 8000aac:	b480      	push	{r7}
 8000aae:	b08b      	sub	sp, #44	; 0x2c
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	60f8      	str	r0, [r7, #12]
 8000ab4:	60b9      	str	r1, [r7, #8]
 8000ab6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	fa93 f3a3 	rbit	r3, r3
 8000ac6:	613b      	str	r3, [r7, #16]
  return result;
 8000ac8:	693b      	ldr	r3, [r7, #16]
 8000aca:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000acc:	69bb      	ldr	r3, [r7, #24]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d101      	bne.n	8000ad6 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8000ad2:	2320      	movs	r3, #32
 8000ad4:	e003      	b.n	8000ade <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8000ad6:	69bb      	ldr	r3, [r7, #24]
 8000ad8:	fab3 f383 	clz	r3, r3
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	005b      	lsls	r3, r3, #1
 8000ae0:	2103      	movs	r1, #3
 8000ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae6:	43db      	mvns	r3, r3
 8000ae8:	401a      	ands	r2, r3
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000aee:	6a3b      	ldr	r3, [r7, #32]
 8000af0:	fa93 f3a3 	rbit	r3, r3
 8000af4:	61fb      	str	r3, [r7, #28]
  return result;
 8000af6:	69fb      	ldr	r3, [r7, #28]
 8000af8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d101      	bne.n	8000b04 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8000b00:	2320      	movs	r3, #32
 8000b02:	e003      	b.n	8000b0c <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b06:	fab3 f383 	clz	r3, r3
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	005b      	lsls	r3, r3, #1
 8000b0e:	6879      	ldr	r1, [r7, #4]
 8000b10:	fa01 f303 	lsl.w	r3, r1, r3
 8000b14:	431a      	orrs	r2, r3
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	601a      	str	r2, [r3, #0]
}
 8000b1a:	bf00      	nop
 8000b1c:	372c      	adds	r7, #44	; 0x2c
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr

08000b26 <LL_GPIO_SetPinPull>:
{
 8000b26:	b480      	push	{r7}
 8000b28:	b08b      	sub	sp, #44	; 0x2c
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	60f8      	str	r0, [r7, #12]
 8000b2e:	60b9      	str	r1, [r7, #8]
 8000b30:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	68da      	ldr	r2, [r3, #12]
 8000b36:	68bb      	ldr	r3, [r7, #8]
 8000b38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	fa93 f3a3 	rbit	r3, r3
 8000b40:	613b      	str	r3, [r7, #16]
  return result;
 8000b42:	693b      	ldr	r3, [r7, #16]
 8000b44:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000b46:	69bb      	ldr	r3, [r7, #24]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d101      	bne.n	8000b50 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8000b4c:	2320      	movs	r3, #32
 8000b4e:	e003      	b.n	8000b58 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8000b50:	69bb      	ldr	r3, [r7, #24]
 8000b52:	fab3 f383 	clz	r3, r3
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	005b      	lsls	r3, r3, #1
 8000b5a:	2103      	movs	r1, #3
 8000b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b60:	43db      	mvns	r3, r3
 8000b62:	401a      	ands	r2, r3
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b68:	6a3b      	ldr	r3, [r7, #32]
 8000b6a:	fa93 f3a3 	rbit	r3, r3
 8000b6e:	61fb      	str	r3, [r7, #28]
  return result;
 8000b70:	69fb      	ldr	r3, [r7, #28]
 8000b72:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d101      	bne.n	8000b7e <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8000b7a:	2320      	movs	r3, #32
 8000b7c:	e003      	b.n	8000b86 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8000b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b80:	fab3 f383 	clz	r3, r3
 8000b84:	b2db      	uxtb	r3, r3
 8000b86:	005b      	lsls	r3, r3, #1
 8000b88:	6879      	ldr	r1, [r7, #4]
 8000b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b8e:	431a      	orrs	r2, r3
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	60da      	str	r2, [r3, #12]
}
 8000b94:	bf00      	nop
 8000b96:	372c      	adds	r7, #44	; 0x2c
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr

08000ba0 <LL_GPIO_SetOutputPin>:
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	683a      	ldr	r2, [r7, #0]
 8000bae:	619a      	str	r2, [r3, #24]
}
 8000bb0:	bf00      	nop
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08a      	sub	sp, #40	; 0x28
 8000bc0:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000bc2:	f107 031c 	add.w	r3, r7, #28
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	605a      	str	r2, [r3, #4]
 8000bcc:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bce:	1d3b      	adds	r3, r7, #4
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
 8000bda:	611a      	str	r2, [r3, #16]
 8000bdc:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000bde:	2001      	movs	r0, #1
 8000be0:	f7ff ff16 	bl	8000a10 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000be4:	2004      	movs	r0, #4
 8000be6:	f7ff ff13 	bl	8000a10 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3);
 8000bea:	210e      	movs	r1, #14
 8000bec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf0:	f7ff ffd6 	bl	8000ba0 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_9);
 8000bf4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bf8:	482b      	ldr	r0, [pc, #172]	; (8000ca8 <MX_GPIO_Init+0xec>)
 8000bfa:	f7ff ffd1 	bl	8000ba0 <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8000bfe:	230e      	movs	r3, #14
 8000c00:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000c02:	2301      	movs	r3, #1
 8000c04:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000c06:	2300      	movs	r3, #0
 8000c08:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c12:	1d3b      	adds	r3, r7, #4
 8000c14:	4619      	mov	r1, r3
 8000c16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c1a:	f001 fb0b 	bl	8002234 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8000c1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c22:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000c24:	2301      	movs	r3, #1
 8000c26:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c30:	2300      	movs	r3, #0
 8000c32:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c34:	1d3b      	adds	r3, r7, #4
 8000c36:	4619      	mov	r1, r3
 8000c38:	481b      	ldr	r0, [pc, #108]	; (8000ca8 <MX_GPIO_Init+0xec>)
 8000c3a:	f001 fafb 	bl	8002234 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE4);
 8000c3e:	491b      	ldr	r1, [pc, #108]	; (8000cac <MX_GPIO_Init+0xf0>)
 8000c40:	2002      	movs	r0, #2
 8000c42:	f7ff fefd 	bl	8000a40 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_4;
 8000c46:	2310      	movs	r3, #16
 8000c48:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000c54:	2300      	movs	r3, #0
 8000c56:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000c60:	f107 031c 	add.w	r3, r7, #28
 8000c64:	4618      	mov	r0, r3
 8000c66:	f001 f8a3 	bl	8001db0 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(GPIOC, LL_GPIO_PIN_4, LL_GPIO_PULL_NO);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2110      	movs	r1, #16
 8000c6e:	480e      	ldr	r0, [pc, #56]	; (8000ca8 <MX_GPIO_Init+0xec>)
 8000c70:	f7ff ff59 	bl	8000b26 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_4, LL_GPIO_MODE_INPUT);
 8000c74:	2200      	movs	r2, #0
 8000c76:	2110      	movs	r1, #16
 8000c78:	480b      	ldr	r0, [pc, #44]	; (8000ca8 <MX_GPIO_Init+0xec>)
 8000c7a:	f7ff ff17 	bl	8000aac <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000c7e:	f7ff fe3d 	bl	80008fc <__NVIC_GetPriorityGrouping>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2200      	movs	r2, #0
 8000c86:	2100      	movs	r1, #0
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff fe8d 	bl	80009a8 <NVIC_EncodePriority>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	4619      	mov	r1, r3
 8000c92:	200a      	movs	r0, #10
 8000c94:	f7ff fe5e 	bl	8000954 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI4_IRQn);
 8000c98:	200a      	movs	r0, #10
 8000c9a:	f7ff fe3d 	bl	8000918 <__NVIC_EnableIRQ>

}
 8000c9e:	bf00      	nop
 8000ca0:	3728      	adds	r7, #40	; 0x28
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	48000800 	.word	0x48000800
 8000cac:	000f0001 	.word	0x000f0001

08000cb0 <__NVIC_SetPriorityGrouping>:
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b085      	sub	sp, #20
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	f003 0307 	and.w	r3, r3, #7
 8000cbe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cc0:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cc6:	68ba      	ldr	r2, [r7, #8]
 8000cc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ccc:	4013      	ands	r3, r2
 8000cce:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ce0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ce2:	4a04      	ldr	r2, [pc, #16]	; (8000cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	60d3      	str	r3, [r2, #12]
}
 8000ce8:	bf00      	nop
 8000cea:	3714      	adds	r7, #20
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	e000ed00 	.word	0xe000ed00

08000cf8 <__NVIC_GetPriorityGrouping>:
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cfc:	4b04      	ldr	r3, [pc, #16]	; (8000d10 <__NVIC_GetPriorityGrouping+0x18>)
 8000cfe:	68db      	ldr	r3, [r3, #12]
 8000d00:	0a1b      	lsrs	r3, r3, #8
 8000d02:	f003 0307 	and.w	r3, r3, #7
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <__NVIC_EnableIRQ>:
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	db0b      	blt.n	8000d3e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d26:	79fb      	ldrb	r3, [r7, #7]
 8000d28:	f003 021f 	and.w	r2, r3, #31
 8000d2c:	4907      	ldr	r1, [pc, #28]	; (8000d4c <__NVIC_EnableIRQ+0x38>)
 8000d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d32:	095b      	lsrs	r3, r3, #5
 8000d34:	2001      	movs	r0, #1
 8000d36:	fa00 f202 	lsl.w	r2, r0, r2
 8000d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000d3e:	bf00      	nop
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	e000e100 	.word	0xe000e100

08000d50 <__NVIC_DisableIRQ>:
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	db12      	blt.n	8000d88 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d62:	79fb      	ldrb	r3, [r7, #7]
 8000d64:	f003 021f 	and.w	r2, r3, #31
 8000d68:	490a      	ldr	r1, [pc, #40]	; (8000d94 <__NVIC_DisableIRQ+0x44>)
 8000d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6e:	095b      	lsrs	r3, r3, #5
 8000d70:	2001      	movs	r0, #1
 8000d72:	fa00 f202 	lsl.w	r2, r0, r2
 8000d76:	3320      	adds	r3, #32
 8000d78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8000d7c:	f3bf 8f4f 	dsb	sy
}
 8000d80:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d82:	f3bf 8f6f 	isb	sy
}
 8000d86:	bf00      	nop
}
 8000d88:	bf00      	nop
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	e000e100 	.word	0xe000e100

08000d98 <__NVIC_SetPriority>:
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	6039      	str	r1, [r7, #0]
 8000da2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	db0a      	blt.n	8000dc2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	b2da      	uxtb	r2, r3
 8000db0:	490c      	ldr	r1, [pc, #48]	; (8000de4 <__NVIC_SetPriority+0x4c>)
 8000db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db6:	0112      	lsls	r2, r2, #4
 8000db8:	b2d2      	uxtb	r2, r2
 8000dba:	440b      	add	r3, r1
 8000dbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000dc0:	e00a      	b.n	8000dd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	4908      	ldr	r1, [pc, #32]	; (8000de8 <__NVIC_SetPriority+0x50>)
 8000dc8:	79fb      	ldrb	r3, [r7, #7]
 8000dca:	f003 030f 	and.w	r3, r3, #15
 8000dce:	3b04      	subs	r3, #4
 8000dd0:	0112      	lsls	r2, r2, #4
 8000dd2:	b2d2      	uxtb	r2, r2
 8000dd4:	440b      	add	r3, r1
 8000dd6:	761a      	strb	r2, [r3, #24]
}
 8000dd8:	bf00      	nop
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	e000e100 	.word	0xe000e100
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <NVIC_EncodePriority>:
{
 8000dec:	b480      	push	{r7}
 8000dee:	b089      	sub	sp, #36	; 0x24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	f003 0307 	and.w	r3, r3, #7
 8000dfe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	f1c3 0307 	rsb	r3, r3, #7
 8000e06:	2b04      	cmp	r3, #4
 8000e08:	bf28      	it	cs
 8000e0a:	2304      	movcs	r3, #4
 8000e0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	3304      	adds	r3, #4
 8000e12:	2b06      	cmp	r3, #6
 8000e14:	d902      	bls.n	8000e1c <NVIC_EncodePriority+0x30>
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	3b03      	subs	r3, #3
 8000e1a:	e000      	b.n	8000e1e <NVIC_EncodePriority+0x32>
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e24:	69bb      	ldr	r3, [r7, #24]
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	43da      	mvns	r2, r3
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	401a      	ands	r2, r3
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e3e:	43d9      	mvns	r1, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e44:	4313      	orrs	r3, r2
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3724      	adds	r7, #36	; 0x24
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
	...

08000e54 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000e58:	4b05      	ldr	r3, [pc, #20]	; (8000e70 <LL_RCC_HSI_Enable+0x1c>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a04      	ldr	r2, [pc, #16]	; (8000e70 <LL_RCC_HSI_Enable+0x1c>)
 8000e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e62:	6013      	str	r3, [r2, #0]
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	40021000 	.word	0x40021000

08000e74 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8000e78:	4b07      	ldr	r3, [pc, #28]	; (8000e98 <LL_RCC_HSI_IsReady+0x24>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e84:	d101      	bne.n	8000e8a <LL_RCC_HSI_IsReady+0x16>
 8000e86:	2301      	movs	r3, #1
 8000e88:	e000      	b.n	8000e8c <LL_RCC_HSI_IsReady+0x18>
 8000e8a:	2300      	movs	r3, #0
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	40021000 	.word	0x40021000

08000e9c <LL_RCC_HSI_SetCalibTrimming>:
  * @param  Value Between Min_Data = 0 and Max_Data = 31 on STM32L43x/STM32L44x/STM32L47x/STM32L48x or
  *               between Min_Data = 0 and Max_Data = 127 on other devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000ea4:	4b07      	ldr	r3, [pc, #28]	; (8000ec4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	061b      	lsls	r3, r3, #24
 8000eb0:	4904      	ldr	r1, [pc, #16]	; (8000ec4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	604b      	str	r3, [r1, #4]
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	40021000 	.word	0x40021000

08000ec8 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000ed0:	4b06      	ldr	r3, [pc, #24]	; (8000eec <LL_RCC_SetSysClkSource+0x24>)
 8000ed2:	689b      	ldr	r3, [r3, #8]
 8000ed4:	f023 0203 	bic.w	r2, r3, #3
 8000ed8:	4904      	ldr	r1, [pc, #16]	; (8000eec <LL_RCC_SetSysClkSource+0x24>)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	608b      	str	r3, [r1, #8]
}
 8000ee0:	bf00      	nop
 8000ee2:	370c      	adds	r7, #12
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	40021000 	.word	0x40021000

08000ef0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000ef4:	4b04      	ldr	r3, [pc, #16]	; (8000f08 <LL_RCC_GetSysClkSource+0x18>)
 8000ef6:	689b      	ldr	r3, [r3, #8]
 8000ef8:	f003 030c 	and.w	r3, r3, #12
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	40021000 	.word	0x40021000

08000f0c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <LL_RCC_SetAHBPrescaler+0x24>)
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f1c:	4904      	ldr	r1, [pc, #16]	; (8000f30 <LL_RCC_SetAHBPrescaler+0x24>)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	608b      	str	r3, [r1, #8]
}
 8000f24:	bf00      	nop
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	40021000 	.word	0x40021000

08000f34 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000f3c:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000f44:	4904      	ldr	r1, [pc, #16]	; (8000f58 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	608b      	str	r3, [r1, #8]
}
 8000f4c:	bf00      	nop
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	40021000 	.word	0x40021000

08000f5c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000f64:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000f6c:	4904      	ldr	r1, [pc, #16]	; (8000f80 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	608b      	str	r3, [r1, #8]
}
 8000f74:	bf00      	nop
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	40021000 	.word	0x40021000

08000f84 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000f8c:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000f8e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000f90:	4907      	ldr	r1, [pc, #28]	; (8000fb0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000f98:	4b05      	ldr	r3, [pc, #20]	; (8000fb0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000f9a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
}
 8000fa4:	bf00      	nop
 8000fa6:	3714      	adds	r7, #20
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	40021000 	.word	0x40021000

08000fb4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000fbc:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000fbe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000fc0:	4907      	ldr	r1, [pc, #28]	; (8000fe0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000fc8:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000fca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
}
 8000fd4:	bf00      	nop
 8000fd6:	3714      	adds	r7, #20
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	40021000 	.word	0x40021000

08000fe4 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <LL_FLASH_SetLatency+0x24>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f023 0207 	bic.w	r2, r3, #7
 8000ff4:	4904      	ldr	r1, [pc, #16]	; (8001008 <LL_FLASH_SetLatency+0x24>)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	600b      	str	r3, [r1, #0]
}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	40022000 	.word	0x40022000

0800100c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001010:	4b04      	ldr	r3, [pc, #16]	; (8001024 <LL_FLASH_GetLatency+0x18>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f003 0307 	and.w	r3, r3, #7
}
 8001018:	4618      	mov	r0, r3
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	40022000 	.word	0x40022000

08001028 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8001038:	4904      	ldr	r1, [pc, #16]	; (800104c <LL_PWR_SetRegulVoltageScaling+0x24>)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4313      	orrs	r3, r2
 800103e:	600b      	str	r3, [r1, #0]
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	40007000 	.word	0x40007000

08001050 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  NVIC_DisableIRQ(EXTI4_IRQn); // disable DRDY interrupts until setup is completed
 8001056:	200a      	movs	r0, #10
 8001058:	f7ff fe7a 	bl	8000d50 <__NVIC_DisableIRQ>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800105c:	2001      	movs	r0, #1
 800105e:	f7ff ffa9 	bl	8000fb4 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001062:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001066:	f7ff ff8d 	bl	8000f84 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800106a:	2003      	movs	r0, #3
 800106c:	f7ff fe20 	bl	8000cb0 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8001070:	f7ff fe42 	bl	8000cf8 <__NVIC_GetPriorityGrouping>
 8001074:	4603      	mov	r3, r0
 8001076:	2200      	movs	r2, #0
 8001078:	210f      	movs	r1, #15
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff feb6 	bl	8000dec <NVIC_EncodePriority>
 8001080:	4603      	mov	r3, r0
 8001082:	4619      	mov	r1, r3
 8001084:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001088:	f7ff fe86 	bl	8000d98 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800108c:	f000 f816 	bl	80010bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001090:	f7ff fd94 	bl	8000bbc <MX_GPIO_Init>
  MX_TIM2_Init();
 8001094:	f000 fd00 	bl	8001a98 <MX_TIM2_Init>
  MX_DMA_Init();
 8001098:	f7ff fb6a 	bl	8000770 <MX_DMA_Init>
  MX_SPI3_Init();
 800109c:	f000 faca 	bl	8001634 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  ADS131M08 adc;
  ADC_Init(&adc, SB_SPIx, SB_DMAx);
 80010a0:	463b      	mov	r3, r7
 80010a2:	4a04      	ldr	r2, [pc, #16]	; (80010b4 <main+0x64>)
 80010a4:	4904      	ldr	r1, [pc, #16]	; (80010b8 <main+0x68>)
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff f8da 	bl	8000260 <ADC_Init>
  NVIC_EnableIRQ(EXTI4_IRQn);
 80010ac:	200a      	movs	r0, #10
 80010ae:	f7ff fe31 	bl	8000d14 <__NVIC_EnableIRQ>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010b2:	e7fe      	b.n	80010b2 <main+0x62>
 80010b4:	40020400 	.word	0x40020400
 80010b8:	40003c00 	.word	0x40003c00

080010bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 80010c0:	2000      	movs	r0, #0
 80010c2:	f7ff ff8f 	bl	8000fe4 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 80010c6:	bf00      	nop
 80010c8:	f7ff ffa0 	bl	800100c <LL_FLASH_GetLatency>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d1fa      	bne.n	80010c8 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 80010d2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80010d6:	f7ff ffa7 	bl	8001028 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_Enable();
 80010da:	f7ff febb 	bl	8000e54 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80010de:	bf00      	nop
 80010e0:	f7ff fec8 	bl	8000e74 <LL_RCC_HSI_IsReady>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d1fa      	bne.n	80010e0 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80010ea:	2010      	movs	r0, #16
 80010ec:	f7ff fed6 	bl	8000e9c <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 80010f0:	2001      	movs	r0, #1
 80010f2:	f7ff fee9 	bl	8000ec8 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 80010f6:	bf00      	nop
 80010f8:	f7ff fefa 	bl	8000ef0 <LL_RCC_GetSysClkSource>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b04      	cmp	r3, #4
 8001100:	d1fa      	bne.n	80010f8 <SystemClock_Config+0x3c>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001102:	2000      	movs	r0, #0
 8001104:	f7ff ff02 	bl	8000f0c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001108:	2000      	movs	r0, #0
 800110a:	f7ff ff13 	bl	8000f34 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 800110e:	2000      	movs	r0, #0
 8001110:	f7ff ff24 	bl	8000f5c <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick(16000000);
 8001114:	4803      	ldr	r0, [pc, #12]	; (8001124 <SystemClock_Config+0x68>)
 8001116:	f001 fa71 	bl	80025fc <LL_Init1msTick>

  LL_SetSystemCoreClock(16000000);
 800111a:	4802      	ldr	r0, [pc, #8]	; (8001124 <SystemClock_Config+0x68>)
 800111c:	f001 fa7c 	bl	8002618 <LL_SetSystemCoreClock>
}
 8001120:	bf00      	nop
 8001122:	bd80      	pop	{r7, pc}
 8001124:	00f42400 	.word	0x00f42400

08001128 <LL_DMA_SetDataTransferDirection>:
{
 8001128:	b480      	push	{r7}
 800112a:	b087      	sub	sp, #28
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8001138:	4a0e      	ldr	r2, [pc, #56]	; (8001174 <LL_DMA_SetDataTransferDirection+0x4c>)
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	4413      	add	r3, r2
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	461a      	mov	r2, r3
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	4413      	add	r3, r2
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800114c:	f023 0310 	bic.w	r3, r3, #16
 8001150:	4908      	ldr	r1, [pc, #32]	; (8001174 <LL_DMA_SetDataTransferDirection+0x4c>)
 8001152:	68ba      	ldr	r2, [r7, #8]
 8001154:	440a      	add	r2, r1
 8001156:	7812      	ldrb	r2, [r2, #0]
 8001158:	4611      	mov	r1, r2
 800115a:	697a      	ldr	r2, [r7, #20]
 800115c:	440a      	add	r2, r1
 800115e:	4611      	mov	r1, r2
 8001160:	687a      	ldr	r2, [r7, #4]
 8001162:	4313      	orrs	r3, r2
 8001164:	600b      	str	r3, [r1, #0]
}
 8001166:	bf00      	nop
 8001168:	371c      	adds	r7, #28
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	080026b0 	.word	0x080026b0

08001178 <LL_DMA_SetMode>:
{
 8001178:	b480      	push	{r7}
 800117a:	b087      	sub	sp, #28
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 8001188:	4a0d      	ldr	r2, [pc, #52]	; (80011c0 <LL_DMA_SetMode+0x48>)
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	4413      	add	r3, r2
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	461a      	mov	r2, r3
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	4413      	add	r3, r2
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f023 0220 	bic.w	r2, r3, #32
 800119c:	4908      	ldr	r1, [pc, #32]	; (80011c0 <LL_DMA_SetMode+0x48>)
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	440b      	add	r3, r1
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	4619      	mov	r1, r3
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	440b      	add	r3, r1
 80011aa:	4619      	mov	r1, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	600b      	str	r3, [r1, #0]
}
 80011b2:	bf00      	nop
 80011b4:	371c      	adds	r7, #28
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	080026b0 	.word	0x080026b0

080011c4 <LL_DMA_SetPeriphIncMode>:
{
 80011c4:	b480      	push	{r7}
 80011c6:	b087      	sub	sp, #28
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
    uint32_t dma_base_addr = (uint32_t)DMAx;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 80011d4:	4a0d      	ldr	r2, [pc, #52]	; (800120c <LL_DMA_SetPeriphIncMode+0x48>)
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	4413      	add	r3, r2
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	461a      	mov	r2, r3
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	4413      	add	r3, r2
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80011e8:	4908      	ldr	r1, [pc, #32]	; (800120c <LL_DMA_SetPeriphIncMode+0x48>)
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	440b      	add	r3, r1
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	4619      	mov	r1, r3
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	440b      	add	r3, r1
 80011f6:	4619      	mov	r1, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	600b      	str	r3, [r1, #0]
}
 80011fe:	bf00      	nop
 8001200:	371c      	adds	r7, #28
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	080026b0 	.word	0x080026b0

08001210 <LL_DMA_SetMemoryIncMode>:
{
 8001210:	b480      	push	{r7}
 8001212:	b087      	sub	sp, #28
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 8001220:	4a0d      	ldr	r2, [pc, #52]	; (8001258 <LL_DMA_SetMemoryIncMode+0x48>)
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	4413      	add	r3, r2
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	461a      	mov	r2, r3
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	4413      	add	r3, r2
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001234:	4908      	ldr	r1, [pc, #32]	; (8001258 <LL_DMA_SetMemoryIncMode+0x48>)
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	440b      	add	r3, r1
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	4619      	mov	r1, r3
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	440b      	add	r3, r1
 8001242:	4619      	mov	r1, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	4313      	orrs	r3, r2
 8001248:	600b      	str	r3, [r1, #0]
}
 800124a:	bf00      	nop
 800124c:	371c      	adds	r7, #28
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	080026b0 	.word	0x080026b0

0800125c <LL_DMA_SetPeriphSize>:
{
 800125c:	b480      	push	{r7}
 800125e:	b087      	sub	sp, #28
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE, 
 800126c:	4a0d      	ldr	r2, [pc, #52]	; (80012a4 <LL_DMA_SetPeriphSize+0x48>)
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	4413      	add	r3, r2
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	461a      	mov	r2, r3
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	4413      	add	r3, r2
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001280:	4908      	ldr	r1, [pc, #32]	; (80012a4 <LL_DMA_SetPeriphSize+0x48>)
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	440b      	add	r3, r1
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	4619      	mov	r1, r3
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	440b      	add	r3, r1
 800128e:	4619      	mov	r1, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	4313      	orrs	r3, r2
 8001294:	600b      	str	r3, [r1, #0]
}
 8001296:	bf00      	nop
 8001298:	371c      	adds	r7, #28
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	080026b0 	.word	0x080026b0

080012a8 <LL_DMA_SetMemorySize>:
{
 80012a8:	b480      	push	{r7}
 80012aa:	b087      	sub	sp, #28
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 80012b8:	4a0d      	ldr	r2, [pc, #52]	; (80012f0 <LL_DMA_SetMemorySize+0x48>)
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	4413      	add	r3, r2
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	461a      	mov	r2, r3
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	4413      	add	r3, r2
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80012cc:	4908      	ldr	r1, [pc, #32]	; (80012f0 <LL_DMA_SetMemorySize+0x48>)
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	440b      	add	r3, r1
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	4619      	mov	r1, r3
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	440b      	add	r3, r1
 80012da:	4619      	mov	r1, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	4313      	orrs	r3, r2
 80012e0:	600b      	str	r3, [r1, #0]
}
 80012e2:	bf00      	nop
 80012e4:	371c      	adds	r7, #28
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	080026b0 	.word	0x080026b0

080012f4 <LL_DMA_SetChannelPriorityLevel>:
{
 80012f4:	b480      	push	{r7}
 80012f6:	b087      	sub	sp, #28
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 8001304:	4a0d      	ldr	r2, [pc, #52]	; (800133c <LL_DMA_SetChannelPriorityLevel+0x48>)
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	4413      	add	r3, r2
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	461a      	mov	r2, r3
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	4413      	add	r3, r2
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001318:	4908      	ldr	r1, [pc, #32]	; (800133c <LL_DMA_SetChannelPriorityLevel+0x48>)
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	440b      	add	r3, r1
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	4619      	mov	r1, r3
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	440b      	add	r3, r1
 8001326:	4619      	mov	r1, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	4313      	orrs	r3, r2
 800132c:	600b      	str	r3, [r1, #0]
}
 800132e:	bf00      	nop
 8001330:	371c      	adds	r7, #28
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	080026b0 	.word	0x080026b0

08001340 <LL_DMA_SetPeriphRequest>:
{
 8001340:	b480      	push	{r7}
 8001342:	b089      	sub	sp, #36	; 0x24
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Request_TypeDef *)((uint32_t)((uint32_t)DMAx + DMA_CSELR_OFFSET)))->CSELR,
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	33a8      	adds	r3, #168	; 0xa8
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	210f      	movs	r1, #15
 8001358:	fa01 f303 	lsl.w	r3, r1, r3
 800135c:	43db      	mvns	r3, r3
 800135e:	401a      	ands	r2, r3
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	210f      	movs	r1, #15
 8001366:	fa01 f303 	lsl.w	r3, r1, r3
 800136a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	fa93 f3a3 	rbit	r3, r3
 8001372:	617b      	str	r3, [r7, #20]
  return result;
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d101      	bne.n	8001382 <LL_DMA_SetPeriphRequest+0x42>
    return 32U;
 800137e:	2320      	movs	r3, #32
 8001380:	e003      	b.n	800138a <LL_DMA_SetPeriphRequest+0x4a>
  return __builtin_clz(value);
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	fab3 f383 	clz	r3, r3
 8001388:	b2db      	uxtb	r3, r3
 800138a:	4619      	mov	r1, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	408b      	lsls	r3, r1
 8001390:	68f9      	ldr	r1, [r7, #12]
 8001392:	31a8      	adds	r1, #168	; 0xa8
 8001394:	4313      	orrs	r3, r2
 8001396:	600b      	str	r3, [r1, #0]
}
 8001398:	bf00      	nop
 800139a:	3724      	adds	r7, #36	; 0x24
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <LL_AHB2_GRP1_EnableClock>:
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80013ac:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80013ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013b0:	4907      	ldr	r1, [pc, #28]	; (80013d0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80013b8:	4b05      	ldr	r3, [pc, #20]	; (80013d0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80013ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	4013      	ands	r3, r2
 80013c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013c2:	68fb      	ldr	r3, [r7, #12]
}
 80013c4:	bf00      	nop
 80013c6:	3714      	adds	r7, #20
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	40021000 	.word	0x40021000

080013d4 <LL_APB1_GRP1_EnableClock>:
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80013dc:	4b08      	ldr	r3, [pc, #32]	; (8001400 <LL_APB1_GRP1_EnableClock+0x2c>)
 80013de:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80013e0:	4907      	ldr	r1, [pc, #28]	; (8001400 <LL_APB1_GRP1_EnableClock+0x2c>)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80013e8:	4b05      	ldr	r3, [pc, #20]	; (8001400 <LL_APB1_GRP1_EnableClock+0x2c>)
 80013ea:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	4013      	ands	r3, r2
 80013f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013f2:	68fb      	ldr	r3, [r7, #12]
}
 80013f4:	bf00      	nop
 80013f6:	3714      	adds	r7, #20
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	40021000 	.word	0x40021000

08001404 <LL_SPI_Enable>:
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	601a      	str	r2, [r3, #0]
}
 8001418:	bf00      	nop
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <LL_SPI_Disable>:
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	601a      	str	r2, [r3, #0]
}
 8001438:	bf00      	nop
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <LL_SPI_SetStandard>:
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f023 0210 	bic.w	r2, r3, #16
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	431a      	orrs	r2, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	605a      	str	r2, [r3, #4]
}
 800145e:	bf00      	nop
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr

0800146a <LL_SPI_DisableNSSPulseMgt>:
{
 800146a:	b480      	push	{r7}
 800146c:	b083      	sub	sp, #12
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f023 0208 	bic.w	r2, r3, #8
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	605a      	str	r2, [r3, #4]
}
 800147e:	bf00      	nop
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr

0800148a <LL_SPI_IsActiveFlag_RXNE>:
{
 800148a:	b480      	push	{r7}
 800148c:	b083      	sub	sp, #12
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	2b01      	cmp	r3, #1
 800149c:	d101      	bne.n	80014a2 <LL_SPI_IsActiveFlag_RXNE+0x18>
 800149e:	2301      	movs	r3, #1
 80014a0:	e000      	b.n	80014a4 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 80014a2:	2300      	movs	r3, #0
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <LL_SPI_IsActiveFlag_TXE>:
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	f003 0302 	and.w	r3, r3, #2
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d101      	bne.n	80014c8 <LL_SPI_IsActiveFlag_TXE+0x18>
 80014c4:	2301      	movs	r3, #1
 80014c6:	e000      	b.n	80014ca <LL_SPI_IsActiveFlag_TXE+0x1a>
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <LL_SPI_IsActiveFlag_BSY>:
{
 80014d6:	b480      	push	{r7}
 80014d8:	b083      	sub	sp, #12
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014e6:	2b80      	cmp	r3, #128	; 0x80
 80014e8:	d101      	bne.n	80014ee <LL_SPI_IsActiveFlag_BSY+0x18>
 80014ea:	2301      	movs	r3, #1
 80014ec:	e000      	b.n	80014f0 <LL_SPI_IsActiveFlag_BSY+0x1a>
 80014ee:	2300      	movs	r3, #0
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <LL_SPI_GetTxFIFOLevel>:
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(SPIx->SR, SPI_SR_FTLVL));
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
}
 800150c:	4618      	mov	r0, r3
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <LL_SPI_EnableIT_RXNE>:
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_RXNEIE);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	605a      	str	r2, [r3, #4]
}
 800152c:	bf00      	nop
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <LL_SPI_EnableIT_TXE>:
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	605a      	str	r2, [r3, #4]
}
 800154c:	bf00      	nop
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <LL_SPI_EnableDMAReq_RX>:
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_RXDMAEN);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f043 0201 	orr.w	r2, r3, #1
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	605a      	str	r2, [r3, #4]
}
 800156c:	bf00      	nop
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <LL_SPI_DisableDMAReq_RX>:
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_RXDMAEN);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f023 0201 	bic.w	r2, r3, #1
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	605a      	str	r2, [r3, #4]
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <LL_SPI_EnableDMAReq_TX>:
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_TXDMAEN);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f043 0202 	orr.w	r2, r3, #2
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	605a      	str	r2, [r3, #4]
}
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <LL_SPI_DisableDMAReq_TX>:
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXDMAEN);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f023 0202 	bic.w	r2, r3, #2
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	605a      	str	r2, [r3, #4]
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	330c      	adds	r3, #12
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	b2db      	uxtb	r3, r3
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	460b      	mov	r3, r1
 80015fe:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	330c      	adds	r3, #12
 8001604:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	78fa      	ldrb	r2, [r7, #3]
 800160a:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 800160c:	bf00      	nop
 800160e:	3714      	adds	r7, #20
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <LL_GPIO_ResetOutputPin>:
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	683a      	ldr	r2, [r7, #0]
 8001626:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <MX_SPI3_Init>:

/* USER CODE END 0 */

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b090      	sub	sp, #64	; 0x40
 8001638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800163a:	f107 0318 	add.w	r3, r7, #24
 800163e:	2228      	movs	r2, #40	; 0x28
 8001640:	2100      	movs	r1, #0
 8001642:	4618      	mov	r0, r3
 8001644:	f001 f81c 	bl	8002680 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001648:	463b      	mov	r3, r7
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	605a      	str	r2, [r3, #4]
 8001650:	609a      	str	r2, [r3, #8]
 8001652:	60da      	str	r2, [r3, #12]
 8001654:	611a      	str	r2, [r3, #16]
 8001656:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8001658:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800165c:	f7ff feba 	bl	80013d4 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8001660:	2004      	movs	r0, #4
 8001662:	f7ff fe9f 	bl	80013a4 <LL_AHB2_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PC10   ------> SPI3_SCK
  PC11   ------> SPI3_MISO
  PC12   ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 8001666:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800166a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800166c:	2302      	movs	r3, #2
 800166e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001670:	2303      	movs	r3, #3
 8001672:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001674:	2300      	movs	r3, #0
 8001676:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001678:	2300      	movs	r3, #0
 800167a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 800167c:	2306      	movs	r3, #6
 800167e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001680:	463b      	mov	r3, r7
 8001682:	4619      	mov	r1, r3
 8001684:	483d      	ldr	r0, [pc, #244]	; (800177c <MX_SPI3_Init+0x148>)
 8001686:	f000 fdd5 	bl	8002234 <LL_GPIO_Init>

  /* SPI3 DMA Init */

  /* SPI3_RX Init */
  LL_DMA_SetPeriphRequest(DMA2, LL_DMA_CHANNEL_1, LL_DMA_REQUEST_3);
 800168a:	2203      	movs	r2, #3
 800168c:	2100      	movs	r1, #0
 800168e:	483c      	ldr	r0, [pc, #240]	; (8001780 <MX_SPI3_Init+0x14c>)
 8001690:	f7ff fe56 	bl	8001340 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8001694:	2200      	movs	r2, #0
 8001696:	2100      	movs	r1, #0
 8001698:	4839      	ldr	r0, [pc, #228]	; (8001780 <MX_SPI3_Init+0x14c>)
 800169a:	f7ff fd45 	bl	8001128 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA2, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_LOW);
 800169e:	2200      	movs	r2, #0
 80016a0:	2100      	movs	r1, #0
 80016a2:	4837      	ldr	r0, [pc, #220]	; (8001780 <MX_SPI3_Init+0x14c>)
 80016a4:	f7ff fe26 	bl	80012f4 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_CHANNEL_1, LL_DMA_MODE_NORMAL);
 80016a8:	2200      	movs	r2, #0
 80016aa:	2100      	movs	r1, #0
 80016ac:	4834      	ldr	r0, [pc, #208]	; (8001780 <MX_SPI3_Init+0x14c>)
 80016ae:	f7ff fd63 	bl	8001178 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 80016b2:	2200      	movs	r2, #0
 80016b4:	2100      	movs	r1, #0
 80016b6:	4832      	ldr	r0, [pc, #200]	; (8001780 <MX_SPI3_Init+0x14c>)
 80016b8:	f7ff fd84 	bl	80011c4 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 80016bc:	2280      	movs	r2, #128	; 0x80
 80016be:	2100      	movs	r1, #0
 80016c0:	482f      	ldr	r0, [pc, #188]	; (8001780 <MX_SPI3_Init+0x14c>)
 80016c2:	f7ff fda5 	bl	8001210 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_BYTE);
 80016c6:	2200      	movs	r2, #0
 80016c8:	2100      	movs	r1, #0
 80016ca:	482d      	ldr	r0, [pc, #180]	; (8001780 <MX_SPI3_Init+0x14c>)
 80016cc:	f7ff fdc6 	bl	800125c <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_BYTE);
 80016d0:	2200      	movs	r2, #0
 80016d2:	2100      	movs	r1, #0
 80016d4:	482a      	ldr	r0, [pc, #168]	; (8001780 <MX_SPI3_Init+0x14c>)
 80016d6:	f7ff fde7 	bl	80012a8 <LL_DMA_SetMemorySize>

  /* SPI3_TX Init */
  LL_DMA_SetPeriphRequest(DMA2, LL_DMA_CHANNEL_2, LL_DMA_REQUEST_3);
 80016da:	2203      	movs	r2, #3
 80016dc:	2101      	movs	r1, #1
 80016de:	4828      	ldr	r0, [pc, #160]	; (8001780 <MX_SPI3_Init+0x14c>)
 80016e0:	f7ff fe2e 	bl	8001340 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_CHANNEL_2, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80016e4:	2210      	movs	r2, #16
 80016e6:	2101      	movs	r1, #1
 80016e8:	4825      	ldr	r0, [pc, #148]	; (8001780 <MX_SPI3_Init+0x14c>)
 80016ea:	f7ff fd1d 	bl	8001128 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA2, LL_DMA_CHANNEL_2, LL_DMA_PRIORITY_LOW);
 80016ee:	2200      	movs	r2, #0
 80016f0:	2101      	movs	r1, #1
 80016f2:	4823      	ldr	r0, [pc, #140]	; (8001780 <MX_SPI3_Init+0x14c>)
 80016f4:	f7ff fdfe 	bl	80012f4 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_CHANNEL_2, LL_DMA_MODE_NORMAL);
 80016f8:	2200      	movs	r2, #0
 80016fa:	2101      	movs	r1, #1
 80016fc:	4820      	ldr	r0, [pc, #128]	; (8001780 <MX_SPI3_Init+0x14c>)
 80016fe:	f7ff fd3b 	bl	8001178 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_CHANNEL_2, LL_DMA_PERIPH_NOINCREMENT);
 8001702:	2200      	movs	r2, #0
 8001704:	2101      	movs	r1, #1
 8001706:	481e      	ldr	r0, [pc, #120]	; (8001780 <MX_SPI3_Init+0x14c>)
 8001708:	f7ff fd5c 	bl	80011c4 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_CHANNEL_2, LL_DMA_MEMORY_INCREMENT);
 800170c:	2280      	movs	r2, #128	; 0x80
 800170e:	2101      	movs	r1, #1
 8001710:	481b      	ldr	r0, [pc, #108]	; (8001780 <MX_SPI3_Init+0x14c>)
 8001712:	f7ff fd7d 	bl	8001210 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_CHANNEL_2, LL_DMA_PDATAALIGN_BYTE);
 8001716:	2200      	movs	r2, #0
 8001718:	2101      	movs	r1, #1
 800171a:	4819      	ldr	r0, [pc, #100]	; (8001780 <MX_SPI3_Init+0x14c>)
 800171c:	f7ff fd9e 	bl	800125c <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_CHANNEL_2, LL_DMA_MDATAALIGN_BYTE);
 8001720:	2200      	movs	r2, #0
 8001722:	2101      	movs	r1, #1
 8001724:	4816      	ldr	r0, [pc, #88]	; (8001780 <MX_SPI3_Init+0x14c>)
 8001726:	f7ff fdbf 	bl	80012a8 <LL_DMA_SetMemorySize>

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800172a:	2300      	movs	r3, #0
 800172c:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800172e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001732:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001734:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001738:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800173a:	2302      	movs	r3, #2
 800173c:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 800173e:	2301      	movs	r3, #1
 8001740:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001742:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001746:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV32;
 8001748:	2320      	movs	r3, #32
 800174a:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800174c:	2300      	movs	r3, #0
 800174e:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001750:	2300      	movs	r3, #0
 8001752:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 8001754:	2307      	movs	r3, #7
 8001756:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 8001758:	f107 0318 	add.w	r3, r7, #24
 800175c:	4619      	mov	r1, r3
 800175e:	4809      	ldr	r0, [pc, #36]	; (8001784 <MX_SPI3_Init+0x150>)
 8001760:	f000 fe0c 	bl	800237c <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 8001764:	2100      	movs	r1, #0
 8001766:	4807      	ldr	r0, [pc, #28]	; (8001784 <MX_SPI3_Init+0x150>)
 8001768:	f7ff fe6c 	bl	8001444 <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI3);
 800176c:	4805      	ldr	r0, [pc, #20]	; (8001784 <MX_SPI3_Init+0x150>)
 800176e:	f7ff fe7c 	bl	800146a <LL_SPI_DisableNSSPulseMgt>
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001772:	bf00      	nop
 8001774:	3740      	adds	r7, #64	; 0x40
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	48000800 	.word	0x48000800
 8001780:	40020400 	.word	0x40020400
 8001784:	40003c00 	.word	0x40003c00

08001788 <SPI_Enable_DMA_Rx_Request>:

/* USER CODE BEGIN 1 */

void SPI_Enable_DMA_Rx_Request(SPI_TypeDef *SPIx) {
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
	LL_SPI_EnableDMAReq_RX(SPIx);
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f7ff fee1 	bl	8001558 <LL_SPI_EnableDMAReq_RX>
}
 8001796:	bf00      	nop
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <SPI_Enable_DMA_Tx_Request>:

void SPI_Enable_DMA_Tx_Request(SPI_TypeDef *SPIx) {
 800179e:	b580      	push	{r7, lr}
 80017a0:	b082      	sub	sp, #8
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
	LL_SPI_EnableDMAReq_TX(SPIx);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f7ff fef6 	bl	8001598 <LL_SPI_EnableDMAReq_TX>
}
 80017ac:	bf00      	nop
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <SPI_Disable_DMA_Requests>:

void SPI_Disable_DMA_Requests(SPI_TypeDef *SPIx) {
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
	LL_SPI_DisableDMAReq_RX(SPIx);
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f7ff fedb 	bl	8001578 <LL_SPI_DisableDMAReq_RX>
	LL_SPI_DisableDMAReq_TX(SPIx);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f7ff fef8 	bl	80015b8 <LL_SPI_DisableDMAReq_TX>
}
 80017c8:	bf00      	nop
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <SPI_Enable_RXNE_TXE_Interrupts>:

void SPI_Enable_RXNE_TXE_Interrupts(SPI_TypeDef *SPIx) {
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
	LL_SPI_EnableIT_RXNE(SPIx);
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f7ff fe9d 	bl	8001518 <LL_SPI_EnableIT_RXNE>
	LL_SPI_EnableIT_TXE(SPIx);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f7ff feaa 	bl	8001538 <LL_SPI_EnableIT_TXE>
}
 80017e4:	bf00      	nop
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}

080017ec <SPI_Start_Transfer>:

void SPI_Start_Transfer(SPI_TypeDef *SPIx) {
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
	LL_GPIO_ResetOutputPin(ADC_CS_GPIOx, ADC_CS_PIN);
 80017f4:	2102      	movs	r1, #2
 80017f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017fa:	f7ff ff0d 	bl	8001618 <LL_GPIO_ResetOutputPin>
	LL_SPI_Enable(SPIx);
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f7ff fe00 	bl	8001404 <LL_SPI_Enable>
}
 8001804:	bf00      	nop
 8001806:	3708      	adds	r7, #8
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}

0800180c <SPI_TransmitReceive>:


void SPI_TransmitReceive(SPI_TypeDef *SPIx, uint8_t len, uint8_t *tx_buffer, uint8_t *rx_buffer) {
 800180c:	b590      	push	{r4, r7, lr}
 800180e:	b087      	sub	sp, #28
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	607a      	str	r2, [r7, #4]
 8001816:	603b      	str	r3, [r7, #0]
 8001818:	460b      	mov	r3, r1
 800181a:	72fb      	strb	r3, [r7, #11]
	LL_SPI_Enable(SPIx);
 800181c:	68f8      	ldr	r0, [r7, #12]
 800181e:	f7ff fdf1 	bl	8001404 <LL_SPI_Enable>

	LL_SPI_TransmitData8(SPIx, tx_buffer[0]);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	4619      	mov	r1, r3
 8001828:	68f8      	ldr	r0, [r7, #12]
 800182a:	f7ff fee3 	bl	80015f4 <LL_SPI_TransmitData8>

	for (int i = 0; i < len - 1; i++) {
 800182e:	2300      	movs	r3, #0
 8001830:	617b      	str	r3, [r7, #20]
 8001832:	e021      	b.n	8001878 <SPI_TransmitReceive+0x6c>
	  while ( !LL_SPI_IsActiveFlag_TXE(SPIx) ); // wait until TXE is set
 8001834:	bf00      	nop
 8001836:	68f8      	ldr	r0, [r7, #12]
 8001838:	f7ff fe3a 	bl	80014b0 <LL_SPI_IsActiveFlag_TXE>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d0f9      	beq.n	8001836 <SPI_TransmitReceive+0x2a>
	  LL_SPI_TransmitData8(SPIx, tx_buffer[i + 1]);
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	3301      	adds	r3, #1
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	4413      	add	r3, r2
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	4619      	mov	r1, r3
 800184e:	68f8      	ldr	r0, [r7, #12]
 8001850:	f7ff fed0 	bl	80015f4 <LL_SPI_TransmitData8>
	  while ( !LL_SPI_IsActiveFlag_RXNE(SPIx) ); // wait until RXNE is set
 8001854:	bf00      	nop
 8001856:	68f8      	ldr	r0, [r7, #12]
 8001858:	f7ff fe17 	bl	800148a <LL_SPI_IsActiveFlag_RXNE>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d0f9      	beq.n	8001856 <SPI_TransmitReceive+0x4a>
	  rx_buffer[i] = LL_SPI_ReceiveData8(SPIx); // read DR (clears RXNE)
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	18d4      	adds	r4, r2, r3
 8001868:	68f8      	ldr	r0, [r7, #12]
 800186a:	f7ff feb5 	bl	80015d8 <LL_SPI_ReceiveData8>
 800186e:	4603      	mov	r3, r0
 8001870:	7023      	strb	r3, [r4, #0]
	for (int i = 0; i < len - 1; i++) {
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	3301      	adds	r3, #1
 8001876:	617b      	str	r3, [r7, #20]
 8001878:	7afb      	ldrb	r3, [r7, #11]
 800187a:	3b01      	subs	r3, #1
 800187c:	697a      	ldr	r2, [r7, #20]
 800187e:	429a      	cmp	r2, r3
 8001880:	dbd8      	blt.n	8001834 <SPI_TransmitReceive+0x28>
	}

	while ( !LL_SPI_IsActiveFlag_RXNE(SPIx) ); // wait until RXNE is set
 8001882:	bf00      	nop
 8001884:	68f8      	ldr	r0, [r7, #12]
 8001886:	f7ff fe00 	bl	800148a <LL_SPI_IsActiveFlag_RXNE>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d0f9      	beq.n	8001884 <SPI_TransmitReceive+0x78>
	rx_buffer[len - 1] = LL_SPI_ReceiveData8(SPIx); // read DR (clears RXNE)
 8001890:	7afb      	ldrb	r3, [r7, #11]
 8001892:	3b01      	subs	r3, #1
 8001894:	683a      	ldr	r2, [r7, #0]
 8001896:	18d4      	adds	r4, r2, r3
 8001898:	68f8      	ldr	r0, [r7, #12]
 800189a:	f7ff fe9d 	bl	80015d8 <LL_SPI_ReceiveData8>
 800189e:	4603      	mov	r3, r0
 80018a0:	7023      	strb	r3, [r4, #0]
}
 80018a2:	bf00      	nop
 80018a4:	371c      	adds	r7, #28
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd90      	pop	{r4, r7, pc}

080018aa <SPI_Disable>:

void SPI_Disable(SPI_TypeDef *SPIx) {
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b082      	sub	sp, #8
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
	while (LL_SPI_GetTxFIFOLevel(SPIx) != LL_SPI_TX_FIFO_EMPTY); // wait for TX FIFO to become empty
 80018b2:	bf00      	nop
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f7ff fe21 	bl	80014fc <LL_SPI_GetTxFIFOLevel>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d1f9      	bne.n	80018b4 <SPI_Disable+0xa>
	while (LL_SPI_IsActiveFlag_BSY(SPIx)); // wait for BSY flag to go low
 80018c0:	bf00      	nop
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f7ff fe07 	bl	80014d6 <LL_SPI_IsActiveFlag_BSY>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1f9      	bne.n	80018c2 <SPI_Disable+0x18>
	LL_SPI_Disable(SPIx);
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f7ff fda8 	bl	8001424 <LL_SPI_Disable>
}
 80018d4:	bf00      	nop
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 80018e4:	4b07      	ldr	r3, [pc, #28]	; (8001904 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 80018e6:	695a      	ldr	r2, [r3, #20]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	4013      	ands	r3, r2
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d101      	bne.n	80018f6 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 80018f2:	2301      	movs	r3, #1
 80018f4:	e000      	b.n	80018f8 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 80018f6:	2300      	movs	r3, #0
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	40010400 	.word	0x40010400

08001908 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8001910:	4a04      	ldr	r2, [pc, #16]	; (8001924 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6153      	str	r3, [r2, #20]
}
 8001916:	bf00      	nop
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	40010400 	.word	0x40010400

08001928 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800192c:	e7fe      	b.n	800192c <NMI_Handler+0x4>

0800192e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800192e:	b480      	push	{r7}
 8001930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001932:	e7fe      	b.n	8001932 <HardFault_Handler+0x4>

08001934 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001938:	e7fe      	b.n	8001938 <MemManage_Handler+0x4>

0800193a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800193a:	b480      	push	{r7}
 800193c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800193e:	e7fe      	b.n	800193e <BusFault_Handler+0x4>

08001940 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001944:	e7fe      	b.n	8001944 <UsageFault_Handler+0x4>

08001946 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001946:	b480      	push	{r7}
 8001948:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001962:	b480      	push	{r7}
 8001964:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001974:	bf00      	nop
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_4) != RESET)
 8001982:	2010      	movs	r0, #16
 8001984:	f7ff ffaa 	bl	80018dc <LL_EXTI_IsActiveFlag_0_31>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d004      	beq.n	8001998 <EXTI4_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_4);
 800198e:	2010      	movs	r0, #16
 8001990:	f7ff ffba 	bl	8001908 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_4 */
    ADC_DRDY_interrupt_handler();
 8001994:	f7fe fcca 	bl	800032c <ADC_DRDY_interrupt_handler>
    /* USER CODE END LL_EXTI_LINE_4 */
  }
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001998:	bf00      	nop
 800199a:	bd80      	pop	{r7, pc}

0800199c <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */
	DMA_Transfer_Complete_RX_interrupt_handler();
 80019a0:	f7fe ff56 	bl	8000850 <DMA_Transfer_Complete_RX_interrupt_handler>
  /* USER CODE END DMA2_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 80019a4:	bf00      	nop
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */
	DMA_Transfer_Complete_TX_interrupt_handler();
 80019ac:	f7fe ff70 	bl	8000890 <DMA_Transfer_Complete_TX_interrupt_handler>
  /* USER CODE END DMA2_Channel2_IRQn 0 */

  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 80019b0:	bf00      	nop
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80019b8:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <SystemInit+0x20>)
 80019ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019be:	4a05      	ldr	r2, [pc, #20]	; (80019d4 <SystemInit+0x20>)
 80019c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80019c8:	bf00      	nop
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	e000ed00 	.word	0xe000ed00

080019d8 <LL_APB1_GRP1_EnableClock>:
{
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80019e0:	4b08      	ldr	r3, [pc, #32]	; (8001a04 <LL_APB1_GRP1_EnableClock+0x2c>)
 80019e2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80019e4:	4907      	ldr	r1, [pc, #28]	; (8001a04 <LL_APB1_GRP1_EnableClock+0x2c>)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80019ec:	4b05      	ldr	r3, [pc, #20]	; (8001a04 <LL_APB1_GRP1_EnableClock+0x2c>)
 80019ee:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4013      	ands	r3, r2
 80019f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019f6:	68fb      	ldr	r3, [r7, #12]
}
 80019f8:	bf00      	nop
 80019fa:	3714      	adds	r7, #20
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	40021000 	.word	0x40021000

08001a08 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	601a      	str	r2, [r3, #0]
}
 8001a1c:	bf00      	nop
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8001a3a:	f023 0307 	bic.w	r3, r3, #7
 8001a3e:	683a      	ldr	r2, [r7, #0]
 8001a40:	431a      	orrs	r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	609a      	str	r2, [r3, #8]
}
 8001a46:	bf00      	nop
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr

08001a52 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8001a52:	b480      	push	{r7}
 8001a54:	b083      	sub	sp, #12
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
 8001a5a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	431a      	orrs	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	605a      	str	r2, [r3, #4]
}
 8001a6c:	bf00      	nop
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	609a      	str	r2, [r3, #8]
}
 8001a8c:	bf00      	nop
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001a9e:	1d3b      	adds	r3, r7, #4
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	605a      	str	r2, [r3, #4]
 8001aa6:	609a      	str	r2, [r3, #8]
 8001aa8:	60da      	str	r2, [r3, #12]
 8001aaa:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8001aac:	2001      	movs	r0, #1
 8001aae:	f7ff ff93 	bl	80019d8 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 16;
 8001aba:	2310      	movs	r3, #16
 8001abc:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8001ac2:	1d3b      	adds	r3, r7, #4
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001aca:	f000 fce9 	bl	80024a0 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8001ace:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001ad2:	f7ff ff99 	bl	8001a08 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001adc:	f7ff ffa4 	bl	8001a28 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001ae6:	f7ff ffb4 	bl	8001a52 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8001aea:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001aee:	f7ff ffc3 	bl	8001a78 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001af2:	bf00      	nop
 8001af4:	3718      	adds	r7, #24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
	...

08001afc <Reset_Handler>:
 8001afc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b34 <LoopForever+0x2>
 8001b00:	f7ff ff58 	bl	80019b4 <SystemInit>
 8001b04:	480c      	ldr	r0, [pc, #48]	; (8001b38 <LoopForever+0x6>)
 8001b06:	490d      	ldr	r1, [pc, #52]	; (8001b3c <LoopForever+0xa>)
 8001b08:	4a0d      	ldr	r2, [pc, #52]	; (8001b40 <LoopForever+0xe>)
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	e002      	b.n	8001b14 <LoopCopyDataInit>

08001b0e <CopyDataInit>:
 8001b0e:	58d4      	ldr	r4, [r2, r3]
 8001b10:	50c4      	str	r4, [r0, r3]
 8001b12:	3304      	adds	r3, #4

08001b14 <LoopCopyDataInit>:
 8001b14:	18c4      	adds	r4, r0, r3
 8001b16:	428c      	cmp	r4, r1
 8001b18:	d3f9      	bcc.n	8001b0e <CopyDataInit>
 8001b1a:	4a0a      	ldr	r2, [pc, #40]	; (8001b44 <LoopForever+0x12>)
 8001b1c:	4c0a      	ldr	r4, [pc, #40]	; (8001b48 <LoopForever+0x16>)
 8001b1e:	2300      	movs	r3, #0
 8001b20:	e001      	b.n	8001b26 <LoopFillZerobss>

08001b22 <FillZerobss>:
 8001b22:	6013      	str	r3, [r2, #0]
 8001b24:	3204      	adds	r2, #4

08001b26 <LoopFillZerobss>:
 8001b26:	42a2      	cmp	r2, r4
 8001b28:	d3fb      	bcc.n	8001b22 <FillZerobss>
 8001b2a:	f000 fd85 	bl	8002638 <__libc_init_array>
 8001b2e:	f7ff fa8f 	bl	8001050 <main>

08001b32 <LoopForever>:
 8001b32:	e7fe      	b.n	8001b32 <LoopForever>
 8001b34:	20018000 	.word	0x20018000
 8001b38:	20000000 	.word	0x20000000
 8001b3c:	20000004 	.word	0x20000004
 8001b40:	080026c0 	.word	0x080026c0
 8001b44:	20000004 	.word	0x20000004
 8001b48:	20003c50 	.word	0x20003c50

08001b4c <ADC1_2_IRQHandler>:
 8001b4c:	e7fe      	b.n	8001b4c <ADC1_2_IRQHandler>
	...

08001b50 <LL_EXTI_EnableIT_0_31>:
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001b58:	4b05      	ldr	r3, [pc, #20]	; (8001b70 <LL_EXTI_EnableIT_0_31+0x20>)
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	4904      	ldr	r1, [pc, #16]	; (8001b70 <LL_EXTI_EnableIT_0_31+0x20>)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	600b      	str	r3, [r1, #0]
}
 8001b64:	bf00      	nop
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	40010400 	.word	0x40010400

08001b74 <LL_EXTI_EnableIT_32_63>:
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001b7c:	4b05      	ldr	r3, [pc, #20]	; (8001b94 <LL_EXTI_EnableIT_32_63+0x20>)
 8001b7e:	6a1a      	ldr	r2, [r3, #32]
 8001b80:	4904      	ldr	r1, [pc, #16]	; (8001b94 <LL_EXTI_EnableIT_32_63+0x20>)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	620b      	str	r3, [r1, #32]
}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	40010400 	.word	0x40010400

08001b98 <LL_EXTI_DisableIT_0_31>:
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8001ba0:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <LL_EXTI_DisableIT_0_31+0x24>)
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	4904      	ldr	r1, [pc, #16]	; (8001bbc <LL_EXTI_DisableIT_0_31+0x24>)
 8001baa:	4013      	ands	r3, r2
 8001bac:	600b      	str	r3, [r1, #0]
}
 8001bae:	bf00      	nop
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	40010400 	.word	0x40010400

08001bc0 <LL_EXTI_DisableIT_32_63>:
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8001bc8:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <LL_EXTI_DisableIT_32_63+0x24>)
 8001bca:	6a1a      	ldr	r2, [r3, #32]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	43db      	mvns	r3, r3
 8001bd0:	4904      	ldr	r1, [pc, #16]	; (8001be4 <LL_EXTI_DisableIT_32_63+0x24>)
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	620b      	str	r3, [r1, #32]
}
 8001bd6:	bf00      	nop
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	40010400 	.word	0x40010400

08001be8 <LL_EXTI_EnableEvent_0_31>:
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8001bf0:	4b05      	ldr	r3, [pc, #20]	; (8001c08 <LL_EXTI_EnableEvent_0_31+0x20>)
 8001bf2:	685a      	ldr	r2, [r3, #4]
 8001bf4:	4904      	ldr	r1, [pc, #16]	; (8001c08 <LL_EXTI_EnableEvent_0_31+0x20>)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	604b      	str	r3, [r1, #4]
}
 8001bfc:	bf00      	nop
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr
 8001c08:	40010400 	.word	0x40010400

08001c0c <LL_EXTI_EnableEvent_32_63>:
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8001c14:	4b05      	ldr	r3, [pc, #20]	; (8001c2c <LL_EXTI_EnableEvent_32_63+0x20>)
 8001c16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c18:	4904      	ldr	r1, [pc, #16]	; (8001c2c <LL_EXTI_EnableEvent_32_63+0x20>)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001c20:	bf00      	nop
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr
 8001c2c:	40010400 	.word	0x40010400

08001c30 <LL_EXTI_DisableEvent_0_31>:
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8001c38:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <LL_EXTI_DisableEvent_0_31+0x24>)
 8001c3a:	685a      	ldr	r2, [r3, #4]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	4904      	ldr	r1, [pc, #16]	; (8001c54 <LL_EXTI_DisableEvent_0_31+0x24>)
 8001c42:	4013      	ands	r3, r2
 8001c44:	604b      	str	r3, [r1, #4]
}
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	40010400 	.word	0x40010400

08001c58 <LL_EXTI_DisableEvent_32_63>:
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8001c60:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <LL_EXTI_DisableEvent_32_63+0x24>)
 8001c62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	43db      	mvns	r3, r3
 8001c68:	4904      	ldr	r1, [pc, #16]	; (8001c7c <LL_EXTI_DisableEvent_32_63+0x24>)
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001c6e:	bf00      	nop
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	40010400 	.word	0x40010400

08001c80 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001c88:	4b05      	ldr	r3, [pc, #20]	; (8001ca0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001c8a:	689a      	ldr	r2, [r3, #8]
 8001c8c:	4904      	ldr	r1, [pc, #16]	; (8001ca0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	608b      	str	r3, [r1, #8]
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	40010400 	.word	0x40010400

08001ca4 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8001cac:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8001cae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cb0:	4904      	ldr	r1, [pc, #16]	; (8001cc4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	628b      	str	r3, [r1, #40]	; 0x28
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr
 8001cc4:	40010400 	.word	0x40010400

08001cc8 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8001cd0:	4b06      	ldr	r3, [pc, #24]	; (8001cec <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001cd2:	689a      	ldr	r2, [r3, #8]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	43db      	mvns	r3, r3
 8001cd8:	4904      	ldr	r1, [pc, #16]	; (8001cec <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001cda:	4013      	ands	r3, r2
 8001cdc:	608b      	str	r3, [r1, #8]
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	40010400 	.word	0x40010400

08001cf0 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8001cf8:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8001cfa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	4904      	ldr	r1, [pc, #16]	; (8001d14 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8001d02:	4013      	ands	r3, r2
 8001d04:	628b      	str	r3, [r1, #40]	; 0x28
}
 8001d06:	bf00      	nop
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	40010400 	.word	0x40010400

08001d18 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8001d20:	4b05      	ldr	r3, [pc, #20]	; (8001d38 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001d22:	68da      	ldr	r2, [r3, #12]
 8001d24:	4904      	ldr	r1, [pc, #16]	; (8001d38 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	60cb      	str	r3, [r1, #12]
}
 8001d2c:	bf00      	nop
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr
 8001d38:	40010400 	.word	0x40010400

08001d3c <LL_EXTI_EnableFallingTrig_32_63>:
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8001d44:	4b05      	ldr	r3, [pc, #20]	; (8001d5c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8001d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d48:	4904      	ldr	r1, [pc, #16]	; (8001d5c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8001d50:	bf00      	nop
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr
 8001d5c:	40010400 	.word	0x40010400

08001d60 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8001d68:	4b06      	ldr	r3, [pc, #24]	; (8001d84 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001d6a:	68da      	ldr	r2, [r3, #12]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	4904      	ldr	r1, [pc, #16]	; (8001d84 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001d72:	4013      	ands	r3, r2
 8001d74:	60cb      	str	r3, [r1, #12]
}
 8001d76:	bf00      	nop
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	40010400 	.word	0x40010400

08001d88 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8001d90:	4b06      	ldr	r3, [pc, #24]	; (8001dac <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8001d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	43db      	mvns	r3, r3
 8001d98:	4904      	ldr	r1, [pc, #16]	; (8001dac <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	40010400 	.word	0x40010400

08001db0 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other value : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 8001db8:	2300      	movs	r3, #0
 8001dba:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	7a1b      	ldrb	r3, [r3, #8]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	f000 80d1 	beq.w	8001f68 <LL_EXTI_Init+0x1b8>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d063      	beq.n	8001e96 <LL_EXTI_Init+0xe6>
    {
      switch (EXTI_InitStruct->Mode)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	7a5b      	ldrb	r3, [r3, #9]
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d01c      	beq.n	8001e10 <LL_EXTI_Init+0x60>
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	dc25      	bgt.n	8001e26 <LL_EXTI_Init+0x76>
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d002      	beq.n	8001de4 <LL_EXTI_Init+0x34>
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d00b      	beq.n	8001dfa <LL_EXTI_Init+0x4a>
 8001de2:	e020      	b.n	8001e26 <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff ff21 	bl	8001c30 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7ff feac 	bl	8001b50 <LL_EXTI_EnableIT_0_31>
          break;
 8001df8:	e018      	b.n	8001e2c <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7ff feca 	bl	8001b98 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff feed 	bl	8001be8 <LL_EXTI_EnableEvent_0_31>
          break;
 8001e0e:	e00d      	b.n	8001e2c <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff fe9b 	bl	8001b50 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff fee2 	bl	8001be8 <LL_EXTI_EnableEvent_0_31>
          break;
 8001e24:	e002      	b.n	8001e2c <LL_EXTI_Init+0x7c>
        default:
          status = 0x01u;
 8001e26:	2301      	movs	r3, #1
 8001e28:	60fb      	str	r3, [r7, #12]
          break;
 8001e2a:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	7a9b      	ldrb	r3, [r3, #10]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d030      	beq.n	8001e96 <LL_EXTI_Init+0xe6>
      {
        switch (EXTI_InitStruct->Trigger)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	7a9b      	ldrb	r3, [r3, #10]
 8001e38:	2b03      	cmp	r3, #3
 8001e3a:	d01c      	beq.n	8001e76 <LL_EXTI_Init+0xc6>
 8001e3c:	2b03      	cmp	r3, #3
 8001e3e:	dc25      	bgt.n	8001e8c <LL_EXTI_Init+0xdc>
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d002      	beq.n	8001e4a <LL_EXTI_Init+0x9a>
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d00b      	beq.n	8001e60 <LL_EXTI_Init+0xb0>
 8001e48:	e020      	b.n	8001e8c <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7ff ff86 	bl	8001d60 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff ff11 	bl	8001c80 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8001e5e:	e01b      	b.n	8001e98 <LL_EXTI_Init+0xe8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff ff2f 	bl	8001cc8 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7ff ff52 	bl	8001d18 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001e74:	e010      	b.n	8001e98 <LL_EXTI_Init+0xe8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7ff ff00 	bl	8001c80 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff ff47 	bl	8001d18 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001e8a:	e005      	b.n	8001e98 <LL_EXTI_Init+0xe8>
          default:
            status |= 0x02u;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f043 0302 	orr.w	r3, r3, #2
 8001e92:	60fb      	str	r3, [r7, #12]
            break;
 8001e94:	e000      	b.n	8001e98 <LL_EXTI_Init+0xe8>
        }
      }
 8001e96:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d078      	beq.n	8001f92 <LL_EXTI_Init+0x1e2>
    {
      switch (EXTI_InitStruct->Mode)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	7a5b      	ldrb	r3, [r3, #9]
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d01c      	beq.n	8001ee2 <LL_EXTI_Init+0x132>
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	dc25      	bgt.n	8001ef8 <LL_EXTI_Init+0x148>
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d002      	beq.n	8001eb6 <LL_EXTI_Init+0x106>
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d00b      	beq.n	8001ecc <LL_EXTI_Init+0x11c>
 8001eb4:	e020      	b.n	8001ef8 <LL_EXTI_Init+0x148>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff fecc 	bl	8001c58 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff fe55 	bl	8001b74 <LL_EXTI_EnableIT_32_63>
          break;
 8001eca:	e01a      	b.n	8001f02 <LL_EXTI_Init+0x152>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff fe75 	bl	8001bc0 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7ff fe96 	bl	8001c0c <LL_EXTI_EnableEvent_32_63>
          break;
 8001ee0:	e00f      	b.n	8001f02 <LL_EXTI_Init+0x152>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff fe44 	bl	8001b74 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff fe8b 	bl	8001c0c <LL_EXTI_EnableEvent_32_63>
          break;
 8001ef6:	e004      	b.n	8001f02 <LL_EXTI_Init+0x152>
        default:
          status |= 0x04u;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f043 0304 	orr.w	r3, r3, #4
 8001efe:	60fb      	str	r3, [r7, #12]
          break;
 8001f00:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	7a9b      	ldrb	r3, [r3, #10]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d043      	beq.n	8001f92 <LL_EXTI_Init+0x1e2>
      {
        switch (EXTI_InitStruct->Trigger)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	7a9b      	ldrb	r3, [r3, #10]
 8001f0e:	2b03      	cmp	r3, #3
 8001f10:	d01c      	beq.n	8001f4c <LL_EXTI_Init+0x19c>
 8001f12:	2b03      	cmp	r3, #3
 8001f14:	dc25      	bgt.n	8001f62 <LL_EXTI_Init+0x1b2>
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d002      	beq.n	8001f20 <LL_EXTI_Init+0x170>
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d00b      	beq.n	8001f36 <LL_EXTI_Init+0x186>
 8001f1e:	e020      	b.n	8001f62 <LL_EXTI_Init+0x1b2>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7ff ff2f 	bl	8001d88 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7ff feb8 	bl	8001ca4 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8001f34:	e02e      	b.n	8001f94 <LL_EXTI_Init+0x1e4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7ff fed8 	bl	8001cf0 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff fef9 	bl	8001d3c <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8001f4a:	e023      	b.n	8001f94 <LL_EXTI_Init+0x1e4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff fea7 	bl	8001ca4 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7ff feee 	bl	8001d3c <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8001f60:	e018      	b.n	8001f94 <LL_EXTI_Init+0x1e4>
          default:
            status = ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	60fb      	str	r3, [r7, #12]
            break;
 8001f66:	e015      	b.n	8001f94 <LL_EXTI_Init+0x1e4>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff fe13 	bl	8001b98 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff fe5a 	bl	8001c30 <LL_EXTI_DisableEvent_0_31>
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7ff fe1d 	bl	8001bc0 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7ff fe64 	bl	8001c58 <LL_EXTI_DisableEvent_32_63>
 8001f90:	e000      	b.n	8001f94 <LL_EXTI_Init+0x1e4>
      }
 8001f92:	bf00      	nop
  }

  return status;
 8001f94:	68fb      	ldr	r3, [r7, #12]
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3710      	adds	r7, #16
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <LL_GPIO_SetPinMode>:
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b08b      	sub	sp, #44	; 0x2c
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	60f8      	str	r0, [r7, #12]
 8001fa6:	60b9      	str	r1, [r7, #8]
 8001fa8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	fa93 f3a3 	rbit	r3, r3
 8001fb8:	613b      	str	r3, [r7, #16]
  return result;
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d101      	bne.n	8001fc8 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8001fc4:	2320      	movs	r3, #32
 8001fc6:	e003      	b.n	8001fd0 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	fab3 f383 	clz	r3, r3
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	2103      	movs	r1, #3
 8001fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	401a      	ands	r2, r3
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe0:	6a3b      	ldr	r3, [r7, #32]
 8001fe2:	fa93 f3a3 	rbit	r3, r3
 8001fe6:	61fb      	str	r3, [r7, #28]
  return result;
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8001ff2:	2320      	movs	r3, #32
 8001ff4:	e003      	b.n	8001ffe <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8001ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff8:	fab3 f383 	clz	r3, r3
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	6879      	ldr	r1, [r7, #4]
 8002002:	fa01 f303 	lsl.w	r3, r1, r3
 8002006:	431a      	orrs	r2, r3
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	601a      	str	r2, [r3, #0]
}
 800200c:	bf00      	nop
 800200e:	372c      	adds	r7, #44	; 0x2c
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <LL_GPIO_SetPinOutputType>:
{
 8002018:	b480      	push	{r7}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	60b9      	str	r1, [r7, #8]
 8002022:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	685a      	ldr	r2, [r3, #4]
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	43db      	mvns	r3, r3
 800202c:	401a      	ands	r2, r3
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	6879      	ldr	r1, [r7, #4]
 8002032:	fb01 f303 	mul.w	r3, r1, r3
 8002036:	431a      	orrs	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	605a      	str	r2, [r3, #4]
}
 800203c:	bf00      	nop
 800203e:	3714      	adds	r7, #20
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <LL_GPIO_SetPinSpeed>:
{
 8002048:	b480      	push	{r7}
 800204a:	b08b      	sub	sp, #44	; 0x2c
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	689a      	ldr	r2, [r3, #8]
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	fa93 f3a3 	rbit	r3, r3
 8002062:	613b      	str	r3, [r7, #16]
  return result;
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d101      	bne.n	8002072 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800206e:	2320      	movs	r3, #32
 8002070:	e003      	b.n	800207a <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	fab3 f383 	clz	r3, r3
 8002078:	b2db      	uxtb	r3, r3
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	2103      	movs	r1, #3
 800207e:	fa01 f303 	lsl.w	r3, r1, r3
 8002082:	43db      	mvns	r3, r3
 8002084:	401a      	ands	r2, r3
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208a:	6a3b      	ldr	r3, [r7, #32]
 800208c:	fa93 f3a3 	rbit	r3, r3
 8002090:	61fb      	str	r3, [r7, #28]
  return result;
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002098:	2b00      	cmp	r3, #0
 800209a:	d101      	bne.n	80020a0 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800209c:	2320      	movs	r3, #32
 800209e:	e003      	b.n	80020a8 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80020a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a2:	fab3 f383 	clz	r3, r3
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	6879      	ldr	r1, [r7, #4]
 80020ac:	fa01 f303 	lsl.w	r3, r1, r3
 80020b0:	431a      	orrs	r2, r3
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	609a      	str	r2, [r3, #8]
}
 80020b6:	bf00      	nop
 80020b8:	372c      	adds	r7, #44	; 0x2c
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr

080020c2 <LL_GPIO_SetPinPull>:
{
 80020c2:	b480      	push	{r7}
 80020c4:	b08b      	sub	sp, #44	; 0x2c
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	60f8      	str	r0, [r7, #12]
 80020ca:	60b9      	str	r1, [r7, #8]
 80020cc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	68da      	ldr	r2, [r3, #12]
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	fa93 f3a3 	rbit	r3, r3
 80020dc:	613b      	str	r3, [r7, #16]
  return result;
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d101      	bne.n	80020ec <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80020e8:	2320      	movs	r3, #32
 80020ea:	e003      	b.n	80020f4 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	fab3 f383 	clz	r3, r3
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	2103      	movs	r1, #3
 80020f8:	fa01 f303 	lsl.w	r3, r1, r3
 80020fc:	43db      	mvns	r3, r3
 80020fe:	401a      	ands	r2, r3
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002104:	6a3b      	ldr	r3, [r7, #32]
 8002106:	fa93 f3a3 	rbit	r3, r3
 800210a:	61fb      	str	r3, [r7, #28]
  return result;
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8002116:	2320      	movs	r3, #32
 8002118:	e003      	b.n	8002122 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800211a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211c:	fab3 f383 	clz	r3, r3
 8002120:	b2db      	uxtb	r3, r3
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	6879      	ldr	r1, [r7, #4]
 8002126:	fa01 f303 	lsl.w	r3, r1, r3
 800212a:	431a      	orrs	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	60da      	str	r2, [r3, #12]
}
 8002130:	bf00      	nop
 8002132:	372c      	adds	r7, #44	; 0x2c
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <LL_GPIO_SetAFPin_0_7>:
{
 800213c:	b480      	push	{r7}
 800213e:	b08b      	sub	sp, #44	; 0x2c
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6a1a      	ldr	r2, [r3, #32]
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	fa93 f3a3 	rbit	r3, r3
 8002156:	613b      	str	r3, [r7, #16]
  return result;
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d101      	bne.n	8002166 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8002162:	2320      	movs	r3, #32
 8002164:	e003      	b.n	800216e <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	fab3 f383 	clz	r3, r3
 800216c:	b2db      	uxtb	r3, r3
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	210f      	movs	r1, #15
 8002172:	fa01 f303 	lsl.w	r3, r1, r3
 8002176:	43db      	mvns	r3, r3
 8002178:	401a      	ands	r2, r3
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217e:	6a3b      	ldr	r3, [r7, #32]
 8002180:	fa93 f3a3 	rbit	r3, r3
 8002184:	61fb      	str	r3, [r7, #28]
  return result;
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800218a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218c:	2b00      	cmp	r3, #0
 800218e:	d101      	bne.n	8002194 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8002190:	2320      	movs	r3, #32
 8002192:	e003      	b.n	800219c <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8002194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002196:	fab3 f383 	clz	r3, r3
 800219a:	b2db      	uxtb	r3, r3
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	6879      	ldr	r1, [r7, #4]
 80021a0:	fa01 f303 	lsl.w	r3, r1, r3
 80021a4:	431a      	orrs	r2, r3
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	621a      	str	r2, [r3, #32]
}
 80021aa:	bf00      	nop
 80021ac:	372c      	adds	r7, #44	; 0x2c
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr

080021b6 <LL_GPIO_SetAFPin_8_15>:
{
 80021b6:	b480      	push	{r7}
 80021b8:	b08b      	sub	sp, #44	; 0x2c
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	60f8      	str	r0, [r7, #12]
 80021be:	60b9      	str	r1, [r7, #8]
 80021c0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	0a1b      	lsrs	r3, r3, #8
 80021ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	fa93 f3a3 	rbit	r3, r3
 80021d2:	613b      	str	r3, [r7, #16]
  return result;
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d101      	bne.n	80021e2 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80021de:	2320      	movs	r3, #32
 80021e0:	e003      	b.n	80021ea <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	fab3 f383 	clz	r3, r3
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	210f      	movs	r1, #15
 80021ee:	fa01 f303 	lsl.w	r3, r1, r3
 80021f2:	43db      	mvns	r3, r3
 80021f4:	401a      	ands	r2, r3
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	0a1b      	lsrs	r3, r3, #8
 80021fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fc:	6a3b      	ldr	r3, [r7, #32]
 80021fe:	fa93 f3a3 	rbit	r3, r3
 8002202:	61fb      	str	r3, [r7, #28]
  return result;
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800220e:	2320      	movs	r3, #32
 8002210:	e003      	b.n	800221a <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8002212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002214:	fab3 f383 	clz	r3, r3
 8002218:	b2db      	uxtb	r3, r3
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	6879      	ldr	r1, [r7, #4]
 800221e:	fa01 f303 	lsl.w	r3, r1, r3
 8002222:	431a      	orrs	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002228:	bf00      	nop
 800222a:	372c      	adds	r7, #44	; 0x2c
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b088      	sub	sp, #32
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	fa93 f3a3 	rbit	r3, r3
 800224a:	60fb      	str	r3, [r7, #12]
  return result;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d101      	bne.n	800225a <LL_GPIO_Init+0x26>
    return 32U;
 8002256:	2320      	movs	r3, #32
 8002258:	e003      	b.n	8002262 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	fab3 f383 	clz	r3, r3
 8002260:	b2db      	uxtb	r3, r3
 8002262:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002264:	e048      	b.n	80022f8 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	2101      	movs	r1, #1
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	fa01 f303 	lsl.w	r3, r1, r3
 8002272:	4013      	ands	r3, r2
 8002274:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d03a      	beq.n	80022f2 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	2b01      	cmp	r3, #1
 8002282:	d003      	beq.n	800228c <LL_GPIO_Init+0x58>
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	2b02      	cmp	r3, #2
 800228a:	d10e      	bne.n	80022aa <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	461a      	mov	r2, r3
 8002292:	69b9      	ldr	r1, [r7, #24]
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f7ff fed7 	bl	8002048 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	6819      	ldr	r1, [r3, #0]
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	461a      	mov	r2, r3
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f7ff feb7 	bl	8002018 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	461a      	mov	r2, r3
 80022b0:	69b9      	ldr	r1, [r7, #24]
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f7ff ff05 	bl	80020c2 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d111      	bne.n	80022e4 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	2bff      	cmp	r3, #255	; 0xff
 80022c4:	d807      	bhi.n	80022d6 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	695b      	ldr	r3, [r3, #20]
 80022ca:	461a      	mov	r2, r3
 80022cc:	69b9      	ldr	r1, [r7, #24]
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f7ff ff34 	bl	800213c <LL_GPIO_SetAFPin_0_7>
 80022d4:	e006      	b.n	80022e4 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	461a      	mov	r2, r3
 80022dc:	69b9      	ldr	r1, [r7, #24]
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f7ff ff69 	bl	80021b6 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	461a      	mov	r2, r3
 80022ea:	69b9      	ldr	r1, [r7, #24]
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f7ff fe56 	bl	8001f9e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	3301      	adds	r3, #1
 80022f6:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1af      	bne.n	8002266 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	3720      	adds	r7, #32
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <LL_SPI_IsEnabled>:
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002320:	2b40      	cmp	r3, #64	; 0x40
 8002322:	d101      	bne.n	8002328 <LL_SPI_IsEnabled+0x18>
 8002324:	2301      	movs	r3, #1
 8002326:	e000      	b.n	800232a <LL_SPI_IsEnabled+0x1a>
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr

08002336 <LL_SPI_SetRxFIFOThreshold>:
{
 8002336:	b480      	push	{r7}
 8002338:	b083      	sub	sp, #12
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
 800233e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	431a      	orrs	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	605a      	str	r2, [r3, #4]
}
 8002350:	bf00      	nop
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <LL_SPI_SetCRCPolynomial>:
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	b29b      	uxth	r3, r3
 800236a:	461a      	mov	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	611a      	str	r2, [r3, #16]
}
 8002370:	bf00      	nop
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f7ff ffc0 	bl	8002310 <LL_SPI_IsEnabled>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d145      	bne.n	8002422 <LL_SPI_Init+0xa6>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800239e:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 80023a2:	683a      	ldr	r2, [r7, #0]
 80023a4:	6811      	ldr	r1, [r2, #0]
 80023a6:	683a      	ldr	r2, [r7, #0]
 80023a8:	6852      	ldr	r2, [r2, #4]
 80023aa:	4311      	orrs	r1, r2
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	68d2      	ldr	r2, [r2, #12]
 80023b0:	4311      	orrs	r1, r2
 80023b2:	683a      	ldr	r2, [r7, #0]
 80023b4:	6912      	ldr	r2, [r2, #16]
 80023b6:	4311      	orrs	r1, r2
 80023b8:	683a      	ldr	r2, [r7, #0]
 80023ba:	6952      	ldr	r2, [r2, #20]
 80023bc:	4311      	orrs	r1, r2
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	6992      	ldr	r2, [r2, #24]
 80023c2:	4311      	orrs	r1, r2
 80023c4:	683a      	ldr	r2, [r7, #0]
 80023c6:	69d2      	ldr	r2, [r2, #28]
 80023c8:	4311      	orrs	r1, r2
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	6a12      	ldr	r2, [r2, #32]
 80023ce:	430a      	orrs	r2, r1
 80023d0:	431a      	orrs	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80023de:	f023 0304 	bic.w	r3, r3, #4
 80023e2:	683a      	ldr	r2, [r7, #0]
 80023e4:	6891      	ldr	r1, [r2, #8]
 80023e6:	683a      	ldr	r2, [r7, #0]
 80023e8:	6952      	ldr	r2, [r2, #20]
 80023ea:	0c12      	lsrs	r2, r2, #16
 80023ec:	430a      	orrs	r2, r1
 80023ee:	431a      	orrs	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	605a      	str	r2, [r3, #4]
               SPI_CR2_DS | SPI_CR2_SSOE,
               SPI_InitStruct->DataWidth | (SPI_InitStruct->NSS >> 16U));

    /* Set Rx FIFO to Quarter (1 Byte) in case of 8 Bits mode. No DataPacking by default */
    if (SPI_InitStruct->DataWidth < LL_SPI_DATAWIDTH_9BIT)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023fc:	d204      	bcs.n	8002408 <LL_SPI_Init+0x8c>
    {
      LL_SPI_SetRxFIFOThreshold(SPIx, LL_SPI_RX_FIFO_TH_QUARTER);
 80023fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f7ff ff97 	bl	8002336 <LL_SPI_SetRxFIFOThreshold>

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	6a1b      	ldr	r3, [r3, #32]
 800240c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002410:	d105      	bne.n	800241e <LL_SPI_Init+0xa2>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002416:	4619      	mov	r1, r3
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f7ff ff9f 	bl	800235c <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 800241e:	2300      	movs	r3, #0
 8002420:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8002422:	7bfb      	ldrb	r3, [r7, #15]
}
 8002424:	4618      	mov	r0, r3
 8002426:	3710      	adds	r7, #16
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <LL_TIM_SetPrescaler>:
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	683a      	ldr	r2, [r7, #0]
 800243a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800243c:	bf00      	nop
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <LL_TIM_SetAutoReload>:
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	683a      	ldr	r2, [r7, #0]
 8002456:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <LL_TIM_SetRepetitionCounter>:
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	683a      	ldr	r2, [r7, #0]
 8002472:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002474:	bf00      	nop
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	695b      	ldr	r3, [r3, #20]
 800248c:	f043 0201 	orr.w	r2, r3, #1
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	615a      	str	r2, [r3, #20]
}
 8002494:	bf00      	nop
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	4a3d      	ldr	r2, [pc, #244]	; (80025a8 <LL_TIM_Init+0x108>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d013      	beq.n	80024e0 <LL_TIM_Init+0x40>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024be:	d00f      	beq.n	80024e0 <LL_TIM_Init+0x40>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	4a3a      	ldr	r2, [pc, #232]	; (80025ac <LL_TIM_Init+0x10c>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d00b      	beq.n	80024e0 <LL_TIM_Init+0x40>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4a39      	ldr	r2, [pc, #228]	; (80025b0 <LL_TIM_Init+0x110>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d007      	beq.n	80024e0 <LL_TIM_Init+0x40>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	4a38      	ldr	r2, [pc, #224]	; (80025b4 <LL_TIM_Init+0x114>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d003      	beq.n	80024e0 <LL_TIM_Init+0x40>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4a37      	ldr	r2, [pc, #220]	; (80025b8 <LL_TIM_Init+0x118>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d106      	bne.n	80024ee <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a2d      	ldr	r2, [pc, #180]	; (80025a8 <LL_TIM_Init+0x108>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d01f      	beq.n	8002536 <LL_TIM_Init+0x96>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024fc:	d01b      	beq.n	8002536 <LL_TIM_Init+0x96>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a2a      	ldr	r2, [pc, #168]	; (80025ac <LL_TIM_Init+0x10c>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d017      	beq.n	8002536 <LL_TIM_Init+0x96>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a29      	ldr	r2, [pc, #164]	; (80025b0 <LL_TIM_Init+0x110>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d013      	beq.n	8002536 <LL_TIM_Init+0x96>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a28      	ldr	r2, [pc, #160]	; (80025b4 <LL_TIM_Init+0x114>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d00f      	beq.n	8002536 <LL_TIM_Init+0x96>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a27      	ldr	r2, [pc, #156]	; (80025b8 <LL_TIM_Init+0x118>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d00b      	beq.n	8002536 <LL_TIM_Init+0x96>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a26      	ldr	r2, [pc, #152]	; (80025bc <LL_TIM_Init+0x11c>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d007      	beq.n	8002536 <LL_TIM_Init+0x96>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a25      	ldr	r2, [pc, #148]	; (80025c0 <LL_TIM_Init+0x120>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d003      	beq.n	8002536 <LL_TIM_Init+0x96>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a24      	ldr	r2, [pc, #144]	; (80025c4 <LL_TIM_Init+0x124>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d106      	bne.n	8002544 <LL_TIM_Init+0xa4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	4313      	orrs	r3, r2
 8002542:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	68fa      	ldr	r2, [r7, #12]
 8002548:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	4619      	mov	r1, r3
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f7ff ff79 	bl	8002448 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	881b      	ldrh	r3, [r3, #0]
 800255a:	4619      	mov	r1, r3
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f7ff ff65 	bl	800242c <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a10      	ldr	r2, [pc, #64]	; (80025a8 <LL_TIM_Init+0x108>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d00f      	beq.n	800258a <LL_TIM_Init+0xea>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a12      	ldr	r2, [pc, #72]	; (80025b8 <LL_TIM_Init+0x118>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d00b      	beq.n	800258a <LL_TIM_Init+0xea>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a11      	ldr	r2, [pc, #68]	; (80025bc <LL_TIM_Init+0x11c>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d007      	beq.n	800258a <LL_TIM_Init+0xea>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a10      	ldr	r2, [pc, #64]	; (80025c0 <LL_TIM_Init+0x120>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d003      	beq.n	800258a <LL_TIM_Init+0xea>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a0f      	ldr	r2, [pc, #60]	; (80025c4 <LL_TIM_Init+0x124>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d105      	bne.n	8002596 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	4619      	mov	r1, r3
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f7ff ff67 	bl	8002464 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f7ff ff72 	bl	8002480 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	40012c00 	.word	0x40012c00
 80025ac:	40000400 	.word	0x40000400
 80025b0:	40000800 	.word	0x40000800
 80025b4:	40000c00 	.word	0x40000c00
 80025b8:	40013400 	.word	0x40013400
 80025bc:	40014000 	.word	0x40014000
 80025c0:	40014400 	.word	0x40014400
 80025c4:	40014800 	.word	0x40014800

080025c8 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025da:	4a07      	ldr	r2, [pc, #28]	; (80025f8 <LL_InitTick+0x30>)
 80025dc:	3b01      	subs	r3, #1
 80025de:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80025e0:	4b05      	ldr	r3, [pc, #20]	; (80025f8 <LL_InitTick+0x30>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025e6:	4b04      	ldr	r3, [pc, #16]	; (80025f8 <LL_InitTick+0x30>)
 80025e8:	2205      	movs	r2, #5
 80025ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80025ec:	bf00      	nop
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr
 80025f8:	e000e010 	.word	0xe000e010

080025fc <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002604:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f7ff ffdd 	bl	80025c8 <LL_InitTick>
}
 800260e:	bf00      	nop
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
	...

08002618 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002620:	4a04      	ldr	r2, [pc, #16]	; (8002634 <LL_SetSystemCoreClock+0x1c>)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6013      	str	r3, [r2, #0]
}
 8002626:	bf00      	nop
 8002628:	370c      	adds	r7, #12
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	20000000 	.word	0x20000000

08002638 <__libc_init_array>:
 8002638:	b570      	push	{r4, r5, r6, lr}
 800263a:	4d0d      	ldr	r5, [pc, #52]	; (8002670 <__libc_init_array+0x38>)
 800263c:	4c0d      	ldr	r4, [pc, #52]	; (8002674 <__libc_init_array+0x3c>)
 800263e:	1b64      	subs	r4, r4, r5
 8002640:	10a4      	asrs	r4, r4, #2
 8002642:	2600      	movs	r6, #0
 8002644:	42a6      	cmp	r6, r4
 8002646:	d109      	bne.n	800265c <__libc_init_array+0x24>
 8002648:	4d0b      	ldr	r5, [pc, #44]	; (8002678 <__libc_init_array+0x40>)
 800264a:	4c0c      	ldr	r4, [pc, #48]	; (800267c <__libc_init_array+0x44>)
 800264c:	f000 f820 	bl	8002690 <_init>
 8002650:	1b64      	subs	r4, r4, r5
 8002652:	10a4      	asrs	r4, r4, #2
 8002654:	2600      	movs	r6, #0
 8002656:	42a6      	cmp	r6, r4
 8002658:	d105      	bne.n	8002666 <__libc_init_array+0x2e>
 800265a:	bd70      	pop	{r4, r5, r6, pc}
 800265c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002660:	4798      	blx	r3
 8002662:	3601      	adds	r6, #1
 8002664:	e7ee      	b.n	8002644 <__libc_init_array+0xc>
 8002666:	f855 3b04 	ldr.w	r3, [r5], #4
 800266a:	4798      	blx	r3
 800266c:	3601      	adds	r6, #1
 800266e:	e7f2      	b.n	8002656 <__libc_init_array+0x1e>
 8002670:	080026b8 	.word	0x080026b8
 8002674:	080026b8 	.word	0x080026b8
 8002678:	080026b8 	.word	0x080026b8
 800267c:	080026bc 	.word	0x080026bc

08002680 <memset>:
 8002680:	4402      	add	r2, r0
 8002682:	4603      	mov	r3, r0
 8002684:	4293      	cmp	r3, r2
 8002686:	d100      	bne.n	800268a <memset+0xa>
 8002688:	4770      	bx	lr
 800268a:	f803 1b01 	strb.w	r1, [r3], #1
 800268e:	e7f9      	b.n	8002684 <memset+0x4>

08002690 <_init>:
 8002690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002692:	bf00      	nop
 8002694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002696:	bc08      	pop	{r3}
 8002698:	469e      	mov	lr, r3
 800269a:	4770      	bx	lr

0800269c <_fini>:
 800269c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800269e:	bf00      	nop
 80026a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026a2:	bc08      	pop	{r3}
 80026a4:	469e      	mov	lr, r3
 80026a6:	4770      	bx	lr
