
fersat_pdh.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024bc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002644  08002644  00012644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002654  08002654  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08002654  08002654  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002654  08002654  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002654  08002654  00012654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002658  08002658  00012658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800265c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003c4c  20000004  08002660  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003c50  08002660  00023c50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000090de  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a9e  00000000  00000000  00029112  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000918  00000000  00000000  0002abb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000830  00000000  00000000  0002b4c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dcc4  00000000  00000000  0002bcf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006f22  00000000  00000000  000499bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a31fa  00000000  00000000  000508de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f3ad8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024a4  00000000  00000000  000f3b28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800262c 	.word	0x0800262c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	0800262c 	.word	0x0800262c

080001c8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	db12      	blt.n	8000200 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001da:	79fb      	ldrb	r3, [r7, #7]
 80001dc:	f003 021f 	and.w	r2, r3, #31
 80001e0:	490a      	ldr	r1, [pc, #40]	; (800020c <__NVIC_DisableIRQ+0x44>)
 80001e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e6:	095b      	lsrs	r3, r3, #5
 80001e8:	2001      	movs	r0, #1
 80001ea:	fa00 f202 	lsl.w	r2, r0, r2
 80001ee:	3320      	adds	r3, #32
 80001f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80001f4:	f3bf 8f4f 	dsb	sy
}
 80001f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80001fa:	f3bf 8f6f 	isb	sy
}
 80001fe:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000200:	bf00      	nop
 8000202:	370c      	adds	r7, #12
 8000204:	46bd      	mov	sp, r7
 8000206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020a:	4770      	bx	lr
 800020c:	e000e100 	.word	0xe000e100

08000210 <LL_SPI_DMA_GetRegAddr>:
  * @rmtoll DR           DR            LL_SPI_DMA_GetRegAddr
  * @param  SPIx SPI Instance
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_SPI_DMA_GetRegAddr(SPI_TypeDef *SPIx)
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  return (uint32_t) &(SPIx->DR);
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	330c      	adds	r3, #12
}
 800021c:	4618      	mov	r0, r3
 800021e:	370c      	adds	r7, #12
 8000220:	46bd      	mov	sp, r7
 8000222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000226:	4770      	bx	lr

08000228 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000228:	b480      	push	{r7}
 800022a:	b083      	sub	sp, #12
 800022c:	af00      	add	r7, sp, #0
 800022e:	6078      	str	r0, [r7, #4]
 8000230:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	683a      	ldr	r2, [r7, #0]
 8000236:	619a      	str	r2, [r3, #24]
}
 8000238:	bf00      	nop
 800023a:	370c      	adds	r7, #12
 800023c:	46bd      	mov	sp, r7
 800023e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000242:	4770      	bx	lr

08000244 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000244:	b480      	push	{r7}
 8000246:	b083      	sub	sp, #12
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
 800024c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	683a      	ldr	r2, [r7, #0]
 8000252:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000254:	bf00      	nop
 8000256:	370c      	adds	r7, #12
 8000258:	46bd      	mov	sp, r7
 800025a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025e:	4770      	bx	lr

08000260 <ADC_Init>:
ADS131M08 *ads131m08;

// Function used to perform ADC initialization. Performs two SPI read operations
// that are necessary to synchronize DRDY pin and allocates memory for the samples.
// This function can also be used to perform initial ADC configuration if necessary.
void ADC_Init(ADS131M08 *adc_struct, SPI_TypeDef *SPIx, DMA_TypeDef *DMAx) {
 8000260:	b580      	push	{r7, lr}
 8000262:	b084      	sub	sp, #16
 8000264:	af00      	add	r7, sp, #0
 8000266:	60f8      	str	r0, [r7, #12]
 8000268:	60b9      	str	r1, [r7, #8]
 800026a:	607a      	str	r2, [r7, #4]
	// insert memory allocation here
	static uint8_t samples_array[NUM_SAMPLES * BYTES_PER_SAMPLE];
	samples = samples_array;
 800026c:	4b11      	ldr	r3, [pc, #68]	; (80002b4 <ADC_Init+0x54>)
 800026e:	4a12      	ldr	r2, [pc, #72]	; (80002b8 <ADC_Init+0x58>)
 8000270:	601a      	str	r2, [r3, #0]

	adc_struct->SPIx = SPIx;
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	68ba      	ldr	r2, [r7, #8]
 8000276:	601a      	str	r2, [r3, #0]
	adc_struct->DMAx = DMAx;
 8000278:	68fb      	ldr	r3, [r7, #12]
 800027a:	687a      	ldr	r2, [r7, #4]
 800027c:	605a      	str	r2, [r3, #4]
	adc_struct->num_samples = NUM_SAMPLES;
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000284:	811a      	strh	r2, [r3, #8]
	adc_struct->samples = samples;
 8000286:	4b0b      	ldr	r3, [pc, #44]	; (80002b4 <ADC_Init+0x54>)
 8000288:	681a      	ldr	r2, [r3, #0]
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	60da      	str	r2, [r3, #12]

	ads131m08 = adc_struct;
 800028e:	4a0b      	ldr	r2, [pc, #44]	; (80002bc <ADC_Init+0x5c>)
 8000290:	68fb      	ldr	r3, [r7, #12]
 8000292:	6013      	str	r3, [r2, #0]
	ADC_first_read(SPIx);
 8000294:	68b8      	ldr	r0, [r7, #8]
 8000296:	f000 f817 	bl	80002c8 <ADC_first_read>
	ADC_DMA_init();
 800029a:	f000 f887 	bl	80003ac <ADC_DMA_init>
	current_sample_count = 0;
 800029e:	4b08      	ldr	r3, [pc, #32]	; (80002c0 <ADC_Init+0x60>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	801a      	strh	r2, [r3, #0]
	drdy_it_initialized = 1;
 80002a4:	4b07      	ldr	r3, [pc, #28]	; (80002c4 <ADC_Init+0x64>)
 80002a6:	2201      	movs	r2, #1
 80002a8:	701a      	strb	r2, [r3, #0]
}
 80002aa:	bf00      	nop
 80002ac:	3710      	adds	r7, #16
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}
 80002b2:	bf00      	nop
 80002b4:	20000024 	.word	0x20000024
 80002b8:	2000004c 	.word	0x2000004c
 80002bc:	20000048 	.word	0x20000048
 80002c0:	20000020 	.word	0x20000020
 80002c4:	20000022 	.word	0x20000022

080002c8 <ADC_first_read>:

// Perform two sample reads to clear ADC's 2-deep FIFO buffer and ensure predictable
// DRDY pin behavior. Alternatively, a short pulse on applied to the SYNC/RESET pin
// can be used for this purpose.
void ADC_first_read(SPI_TypeDef *SPIx) {
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b08c      	sub	sp, #48	; 0x30
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]
	uint8_t rx_buffer[30];

	LL_GPIO_ResetOutputPin(ADC_CS_GPIOx, ADC_CS_PIN); // \CS low
 80002d0:	2102      	movs	r1, #2
 80002d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002d6:	f7ff ffb5 	bl	8000244 <LL_GPIO_ResetOutputPin>
	SPI_TransmitReceive(SPIx, 30, dummy_bytes, rx_buffer);
 80002da:	f107 030c 	add.w	r3, r7, #12
 80002de:	4a15      	ldr	r2, [pc, #84]	; (8000334 <ADC_first_read+0x6c>)
 80002e0:	211e      	movs	r1, #30
 80002e2:	6878      	ldr	r0, [r7, #4]
 80002e4:	f001 fa60 	bl	80017a8 <SPI_TransmitReceive>
	LL_GPIO_SetOutputPin(ADC_CS_GPIOx, ADC_CS_PIN); // \CS high
 80002e8:	2102      	movs	r1, #2
 80002ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002ee:	f7ff ff9b 	bl	8000228 <LL_GPIO_SetOutputPin>

	for(int i = 0; i < 100; i++); // TODO: write a delay function to replace this
 80002f2:	2300      	movs	r3, #0
 80002f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80002f6:	e002      	b.n	80002fe <ADC_first_read+0x36>
 80002f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80002fa:	3301      	adds	r3, #1
 80002fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80002fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000300:	2b63      	cmp	r3, #99	; 0x63
 8000302:	ddf9      	ble.n	80002f8 <ADC_first_read+0x30>

	LL_GPIO_ResetOutputPin(ADC_CS_GPIOx, ADC_CS_PIN); // \CS low
 8000304:	2102      	movs	r1, #2
 8000306:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800030a:	f7ff ff9b 	bl	8000244 <LL_GPIO_ResetOutputPin>
	SPI_TransmitReceive(SPIx, 30, dummy_bytes, rx_buffer);
 800030e:	f107 030c 	add.w	r3, r7, #12
 8000312:	4a08      	ldr	r2, [pc, #32]	; (8000334 <ADC_first_read+0x6c>)
 8000314:	211e      	movs	r1, #30
 8000316:	6878      	ldr	r0, [r7, #4]
 8000318:	f001 fa46 	bl	80017a8 <SPI_TransmitReceive>
	LL_GPIO_SetOutputPin(ADC_CS_GPIOx, ADC_CS_PIN); // \CS high
 800031c:	2102      	movs	r1, #2
 800031e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000322:	f7ff ff81 	bl	8000228 <LL_GPIO_SetOutputPin>

	SPI_Disable(SPIx);
 8000326:	6878      	ldr	r0, [r7, #4]
 8000328:	f001 fa8d 	bl	8001846 <SPI_Disable>
}
 800032c:	bf00      	nop
 800032e:	3730      	adds	r7, #48	; 0x30
 8000330:	46bd      	mov	sp, r7
 8000332:	bd80      	pop	{r7, pc}
 8000334:	20000028 	.word	0x20000028

08000338 <ADC_DRDY_interrupt_handler>:

// Called by DRDY interrupt routine, starts SPI DMA transfer.
void ADC_DRDY_interrupt_handler() {
 8000338:	b598      	push	{r3, r4, r7, lr}
 800033a:	af00      	add	r7, sp, #0
	if (drdy_it_initialized && current_sample_count < NUM_SAMPLES) {
 800033c:	4b17      	ldr	r3, [pc, #92]	; (800039c <ADC_DRDY_interrupt_handler+0x64>)
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	b2db      	uxtb	r3, r3
 8000342:	2b00      	cmp	r3, #0
 8000344:	d028      	beq.n	8000398 <ADC_DRDY_interrupt_handler+0x60>
 8000346:	4b16      	ldr	r3, [pc, #88]	; (80003a0 <ADC_DRDY_interrupt_handler+0x68>)
 8000348:	881b      	ldrh	r3, [r3, #0]
 800034a:	b29b      	uxth	r3, r3
 800034c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000350:	d222      	bcs.n	8000398 <ADC_DRDY_interrupt_handler+0x60>
		ADC_Set_DMA_Data_Length();
 8000352:	f000 f855 	bl	8000400 <ADC_Set_DMA_Data_Length>
		DMA_Reload_Memory_Address(ads131m08->DMAx, LL_DMA_CHANNEL_1, samples + current_sample_count++ * BYTES_PER_SAMPLE);
 8000356:	4b13      	ldr	r3, [pc, #76]	; (80003a4 <ADC_DRDY_interrupt_handler+0x6c>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	6858      	ldr	r0, [r3, #4]
 800035c:	4b12      	ldr	r3, [pc, #72]	; (80003a8 <ADC_DRDY_interrupt_handler+0x70>)
 800035e:	681a      	ldr	r2, [r3, #0]
 8000360:	4b0f      	ldr	r3, [pc, #60]	; (80003a0 <ADC_DRDY_interrupt_handler+0x68>)
 8000362:	881b      	ldrh	r3, [r3, #0]
 8000364:	b29b      	uxth	r3, r3
 8000366:	1c59      	adds	r1, r3, #1
 8000368:	b28c      	uxth	r4, r1
 800036a:	490d      	ldr	r1, [pc, #52]	; (80003a0 <ADC_DRDY_interrupt_handler+0x68>)
 800036c:	800c      	strh	r4, [r1, #0]
 800036e:	4619      	mov	r1, r3
 8000370:	460b      	mov	r3, r1
 8000372:	011b      	lsls	r3, r3, #4
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	005b      	lsls	r3, r3, #1
 8000378:	4413      	add	r3, r2
 800037a:	461a      	mov	r2, r3
 800037c:	2100      	movs	r1, #0
 800037e:	f000 fa4d 	bl	800081c <DMA_Reload_Memory_Address>
		ADC_Enable_SPI_DMA_transfer();
 8000382:	f000 f853 	bl	800042c <ADC_Enable_SPI_DMA_transfer>

		NVIC_DisableIRQ(ADC_DRDY_IRQn); // Interrupt is re-enabled in DMA transfer complete routine
 8000386:	200a      	movs	r0, #10
 8000388:	f7ff ff1e 	bl	80001c8 <__NVIC_DisableIRQ>

		SPI_Start_Transfer(ads131m08->SPIx);
 800038c:	4b05      	ldr	r3, [pc, #20]	; (80003a4 <ADC_DRDY_interrupt_handler+0x6c>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	4618      	mov	r0, r3
 8000394:	f001 f9f8 	bl	8001788 <SPI_Start_Transfer>
	}
}
 8000398:	bf00      	nop
 800039a:	bd98      	pop	{r3, r4, r7, pc}
 800039c:	20000022 	.word	0x20000022
 80003a0:	20000020 	.word	0x20000020
 80003a4:	20000048 	.word	0x20000048
 80003a8:	20000024 	.word	0x20000024

080003ac <ADC_DMA_init>:

void ADC_DMA_init() {
 80003ac:	b598      	push	{r3, r4, r7, lr}
 80003ae:	af00      	add	r7, sp, #0
	DMA_Channel_Init(ads131m08->DMAx, LL_DMA_CHANNEL_1, LL_SPI_DMA_GetRegAddr(ads131m08->SPIx), samples);
 80003b0:	4b10      	ldr	r3, [pc, #64]	; (80003f4 <ADC_DMA_init+0x48>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	685c      	ldr	r4, [r3, #4]
 80003b6:	4b0f      	ldr	r3, [pc, #60]	; (80003f4 <ADC_DMA_init+0x48>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4618      	mov	r0, r3
 80003be:	f7ff ff27 	bl	8000210 <LL_SPI_DMA_GetRegAddr>
 80003c2:	4602      	mov	r2, r0
 80003c4:	4b0c      	ldr	r3, [pc, #48]	; (80003f8 <ADC_DMA_init+0x4c>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	2100      	movs	r1, #0
 80003ca:	4620      	mov	r0, r4
 80003cc:	f000 f9fd 	bl	80007ca <DMA_Channel_Init>
	DMA_Channel_Init(ads131m08->DMAx, LL_DMA_CHANNEL_2, LL_SPI_DMA_GetRegAddr(ads131m08->SPIx), dummy_bytes);
 80003d0:	4b08      	ldr	r3, [pc, #32]	; (80003f4 <ADC_DMA_init+0x48>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	685c      	ldr	r4, [r3, #4]
 80003d6:	4b07      	ldr	r3, [pc, #28]	; (80003f4 <ADC_DMA_init+0x48>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	4618      	mov	r0, r3
 80003de:	f7ff ff17 	bl	8000210 <LL_SPI_DMA_GetRegAddr>
 80003e2:	4602      	mov	r2, r0
 80003e4:	4b05      	ldr	r3, [pc, #20]	; (80003fc <ADC_DMA_init+0x50>)
 80003e6:	2101      	movs	r1, #1
 80003e8:	4620      	mov	r0, r4
 80003ea:	f000 f9ee 	bl	80007ca <DMA_Channel_Init>
}
 80003ee:	bf00      	nop
 80003f0:	bd98      	pop	{r3, r4, r7, pc}
 80003f2:	bf00      	nop
 80003f4:	20000048 	.word	0x20000048
 80003f8:	20000024 	.word	0x20000024
 80003fc:	20000028 	.word	0x20000028

08000400 <ADC_Set_DMA_Data_Length>:

void ADC_Set_DMA_Data_Length() {
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0
	DMA_Set_Channel_Data_Length(ads131m08->DMAx, LL_DMA_CHANNEL_1, BYTES_PER_SAMPLE);
 8000404:	4b08      	ldr	r3, [pc, #32]	; (8000428 <ADC_Set_DMA_Data_Length+0x28>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	685b      	ldr	r3, [r3, #4]
 800040a:	221e      	movs	r2, #30
 800040c:	2100      	movs	r1, #0
 800040e:	4618      	mov	r0, r3
 8000410:	f000 f9f5 	bl	80007fe <DMA_Set_Channel_Data_Length>
	DMA_Set_Channel_Data_Length(ads131m08->DMAx, LL_DMA_CHANNEL_2, BYTES_PER_SAMPLE);
 8000414:	4b04      	ldr	r3, [pc, #16]	; (8000428 <ADC_Set_DMA_Data_Length+0x28>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	685b      	ldr	r3, [r3, #4]
 800041a:	221e      	movs	r2, #30
 800041c:	2101      	movs	r1, #1
 800041e:	4618      	mov	r0, r3
 8000420:	f000 f9ed 	bl	80007fe <DMA_Set_Channel_Data_Length>
}
 8000424:	bf00      	nop
 8000426:	bd80      	pop	{r7, pc}
 8000428:	20000048 	.word	0x20000048

0800042c <ADC_Enable_SPI_DMA_transfer>:

void ADC_Enable_SPI_DMA_transfer() {
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
	SPI_Enable_DMA_Rx_Request(ads131m08->SPIx);
 8000430:	4b0c      	ldr	r3, [pc, #48]	; (8000464 <ADC_Enable_SPI_DMA_transfer+0x38>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	4618      	mov	r0, r3
 8000438:	f001 f974 	bl	8001724 <SPI_Enable_DMA_Rx_Request>
	DMA_Enable_CH1_CH2(ads131m08->DMAx);
 800043c:	4b09      	ldr	r3, [pc, #36]	; (8000464 <ADC_Enable_SPI_DMA_transfer+0x38>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	685b      	ldr	r3, [r3, #4]
 8000442:	4618      	mov	r0, r3
 8000444:	f000 f9fa 	bl	800083c <DMA_Enable_CH1_CH2>
	SPI_Enable_DMA_Tx_Request(ads131m08->SPIx);
 8000448:	4b06      	ldr	r3, [pc, #24]	; (8000464 <ADC_Enable_SPI_DMA_transfer+0x38>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	4618      	mov	r0, r3
 8000450:	f001 f973 	bl	800173a <SPI_Enable_DMA_Tx_Request>
	SPI_Enable_RXNE_TXE_Interrupts(ads131m08->SPIx);
 8000454:	4b03      	ldr	r3, [pc, #12]	; (8000464 <ADC_Enable_SPI_DMA_transfer+0x38>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	4618      	mov	r0, r3
 800045c:	f001 f986 	bl	800176c <SPI_Enable_RXNE_TXE_Interrupts>
}
 8000460:	bf00      	nop
 8000462:	bd80      	pop	{r7, pc}
 8000464:	20000048 	.word	0x20000048

08000468 <__NVIC_GetPriorityGrouping>:
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800046c:	4b04      	ldr	r3, [pc, #16]	; (8000480 <__NVIC_GetPriorityGrouping+0x18>)
 800046e:	68db      	ldr	r3, [r3, #12]
 8000470:	0a1b      	lsrs	r3, r3, #8
 8000472:	f003 0307 	and.w	r3, r3, #7
}
 8000476:	4618      	mov	r0, r3
 8000478:	46bd      	mov	sp, r7
 800047a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047e:	4770      	bx	lr
 8000480:	e000ed00 	.word	0xe000ed00

08000484 <__NVIC_EnableIRQ>:
{
 8000484:	b480      	push	{r7}
 8000486:	b083      	sub	sp, #12
 8000488:	af00      	add	r7, sp, #0
 800048a:	4603      	mov	r3, r0
 800048c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800048e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000492:	2b00      	cmp	r3, #0
 8000494:	db0b      	blt.n	80004ae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000496:	79fb      	ldrb	r3, [r7, #7]
 8000498:	f003 021f 	and.w	r2, r3, #31
 800049c:	4907      	ldr	r1, [pc, #28]	; (80004bc <__NVIC_EnableIRQ+0x38>)
 800049e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004a2:	095b      	lsrs	r3, r3, #5
 80004a4:	2001      	movs	r0, #1
 80004a6:	fa00 f202 	lsl.w	r2, r0, r2
 80004aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80004ae:	bf00      	nop
 80004b0:	370c      	adds	r7, #12
 80004b2:	46bd      	mov	sp, r7
 80004b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop
 80004bc:	e000e100 	.word	0xe000e100

080004c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	4603      	mov	r3, r0
 80004c8:	6039      	str	r1, [r7, #0]
 80004ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	db0a      	blt.n	80004ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004d4:	683b      	ldr	r3, [r7, #0]
 80004d6:	b2da      	uxtb	r2, r3
 80004d8:	490c      	ldr	r1, [pc, #48]	; (800050c <__NVIC_SetPriority+0x4c>)
 80004da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004de:	0112      	lsls	r2, r2, #4
 80004e0:	b2d2      	uxtb	r2, r2
 80004e2:	440b      	add	r3, r1
 80004e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80004e8:	e00a      	b.n	8000500 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004ea:	683b      	ldr	r3, [r7, #0]
 80004ec:	b2da      	uxtb	r2, r3
 80004ee:	4908      	ldr	r1, [pc, #32]	; (8000510 <__NVIC_SetPriority+0x50>)
 80004f0:	79fb      	ldrb	r3, [r7, #7]
 80004f2:	f003 030f 	and.w	r3, r3, #15
 80004f6:	3b04      	subs	r3, #4
 80004f8:	0112      	lsls	r2, r2, #4
 80004fa:	b2d2      	uxtb	r2, r2
 80004fc:	440b      	add	r3, r1
 80004fe:	761a      	strb	r2, [r3, #24]
}
 8000500:	bf00      	nop
 8000502:	370c      	adds	r7, #12
 8000504:	46bd      	mov	sp, r7
 8000506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050a:	4770      	bx	lr
 800050c:	e000e100 	.word	0xe000e100
 8000510:	e000ed00 	.word	0xe000ed00

08000514 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000514:	b480      	push	{r7}
 8000516:	b089      	sub	sp, #36	; 0x24
 8000518:	af00      	add	r7, sp, #0
 800051a:	60f8      	str	r0, [r7, #12]
 800051c:	60b9      	str	r1, [r7, #8]
 800051e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	f003 0307 	and.w	r3, r3, #7
 8000526:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000528:	69fb      	ldr	r3, [r7, #28]
 800052a:	f1c3 0307 	rsb	r3, r3, #7
 800052e:	2b04      	cmp	r3, #4
 8000530:	bf28      	it	cs
 8000532:	2304      	movcs	r3, #4
 8000534:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000536:	69fb      	ldr	r3, [r7, #28]
 8000538:	3304      	adds	r3, #4
 800053a:	2b06      	cmp	r3, #6
 800053c:	d902      	bls.n	8000544 <NVIC_EncodePriority+0x30>
 800053e:	69fb      	ldr	r3, [r7, #28]
 8000540:	3b03      	subs	r3, #3
 8000542:	e000      	b.n	8000546 <NVIC_EncodePriority+0x32>
 8000544:	2300      	movs	r3, #0
 8000546:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000548:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800054c:	69bb      	ldr	r3, [r7, #24]
 800054e:	fa02 f303 	lsl.w	r3, r2, r3
 8000552:	43da      	mvns	r2, r3
 8000554:	68bb      	ldr	r3, [r7, #8]
 8000556:	401a      	ands	r2, r3
 8000558:	697b      	ldr	r3, [r7, #20]
 800055a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800055c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000560:	697b      	ldr	r3, [r7, #20]
 8000562:	fa01 f303 	lsl.w	r3, r1, r3
 8000566:	43d9      	mvns	r1, r3
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800056c:	4313      	orrs	r3, r2
         );
}
 800056e:	4618      	mov	r0, r3
 8000570:	3724      	adds	r7, #36	; 0x24
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
	...

0800057c <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 800057c:	b480      	push	{r7}
 800057e:	b085      	sub	sp, #20
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
 8000584:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 800058a:	4a0c      	ldr	r2, [pc, #48]	; (80005bc <LL_DMA_EnableChannel+0x40>)
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	4413      	add	r3, r2
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	461a      	mov	r2, r3
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	4413      	add	r3, r2
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4908      	ldr	r1, [pc, #32]	; (80005bc <LL_DMA_EnableChannel+0x40>)
 800059c:	683a      	ldr	r2, [r7, #0]
 800059e:	440a      	add	r2, r1
 80005a0:	7812      	ldrb	r2, [r2, #0]
 80005a2:	4611      	mov	r1, r2
 80005a4:	68fa      	ldr	r2, [r7, #12]
 80005a6:	440a      	add	r2, r1
 80005a8:	f043 0301 	orr.w	r3, r3, #1
 80005ac:	6013      	str	r3, [r2, #0]
}
 80005ae:	bf00      	nop
 80005b0:	3714      	adds	r7, #20
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	08002644 	.word	0x08002644

080005c0 <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b085      	sub	sp, #20
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
 80005c8:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	60fb      	str	r3, [r7, #12]
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 80005ce:	4a0c      	ldr	r2, [pc, #48]	; (8000600 <LL_DMA_DisableChannel+0x40>)
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	4413      	add	r3, r2
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	461a      	mov	r2, r3
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	4413      	add	r3, r2
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4908      	ldr	r1, [pc, #32]	; (8000600 <LL_DMA_DisableChannel+0x40>)
 80005e0:	683a      	ldr	r2, [r7, #0]
 80005e2:	440a      	add	r2, r1
 80005e4:	7812      	ldrb	r2, [r2, #0]
 80005e6:	4611      	mov	r1, r2
 80005e8:	68fa      	ldr	r2, [r7, #12]
 80005ea:	440a      	add	r2, r1
 80005ec:	f023 0301 	bic.w	r3, r3, #1
 80005f0:	6013      	str	r3, [r2, #0]
}
 80005f2:	bf00      	nop
 80005f4:	3714      	adds	r7, #20
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	08002644 	.word	0x08002644

08000604 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 8000604:	b480      	push	{r7}
 8000606:	b087      	sub	sp, #28
 8000608:	af00      	add	r7, sp, #0
 800060a:	60f8      	str	r0, [r7, #12]
 800060c:	60b9      	str	r1, [r7, #8]
 800060e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8000614:	4a0d      	ldr	r2, [pc, #52]	; (800064c <LL_DMA_SetDataLength+0x48>)
 8000616:	68bb      	ldr	r3, [r7, #8]
 8000618:	4413      	add	r3, r2
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	461a      	mov	r2, r3
 800061e:	697b      	ldr	r3, [r7, #20]
 8000620:	4413      	add	r3, r2
 8000622:	685b      	ldr	r3, [r3, #4]
 8000624:	0c1b      	lsrs	r3, r3, #16
 8000626:	041b      	lsls	r3, r3, #16
 8000628:	4908      	ldr	r1, [pc, #32]	; (800064c <LL_DMA_SetDataLength+0x48>)
 800062a:	68ba      	ldr	r2, [r7, #8]
 800062c:	440a      	add	r2, r1
 800062e:	7812      	ldrb	r2, [r2, #0]
 8000630:	4611      	mov	r1, r2
 8000632:	697a      	ldr	r2, [r7, #20]
 8000634:	440a      	add	r2, r1
 8000636:	4611      	mov	r1, r2
 8000638:	687a      	ldr	r2, [r7, #4]
 800063a:	4313      	orrs	r3, r2
 800063c:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 800063e:	bf00      	nop
 8000640:	371c      	adds	r7, #28
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	08002644 	.word	0x08002644

08000650 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  MemoryAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAddress)
{
 8000650:	b480      	push	{r7}
 8000652:	b087      	sub	sp, #28
 8000654:	af00      	add	r7, sp, #0
 8000656:	60f8      	str	r0, [r7, #12]
 8000658:	60b9      	str	r1, [r7, #8]
 800065a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 8000660:	4a07      	ldr	r2, [pc, #28]	; (8000680 <LL_DMA_SetMemoryAddress+0x30>)
 8000662:	68bb      	ldr	r3, [r7, #8]
 8000664:	4413      	add	r3, r2
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	461a      	mov	r2, r3
 800066a:	697b      	ldr	r3, [r7, #20]
 800066c:	4413      	add	r3, r2
 800066e:	461a      	mov	r2, r3
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	60d3      	str	r3, [r2, #12]
}
 8000674:	bf00      	nop
 8000676:	371c      	adds	r7, #28
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr
 8000680:	08002644 	.word	0x08002644

08000684 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  PeriphAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
 8000684:	b480      	push	{r7}
 8000686:	b087      	sub	sp, #28
 8000688:	af00      	add	r7, sp, #0
 800068a:	60f8      	str	r0, [r7, #12]
 800068c:	60b9      	str	r1, [r7, #8]
 800068e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 8000694:	4a07      	ldr	r2, [pc, #28]	; (80006b4 <LL_DMA_SetPeriphAddress+0x30>)
 8000696:	68bb      	ldr	r3, [r7, #8]
 8000698:	4413      	add	r3, r2
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	461a      	mov	r2, r3
 800069e:	697b      	ldr	r3, [r7, #20]
 80006a0:	4413      	add	r3, r2
 80006a2:	461a      	mov	r2, r3
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	6093      	str	r3, [r2, #8]
}
 80006a8:	bf00      	nop
 80006aa:	371c      	adds	r7, #28
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr
 80006b4:	08002644 	.word	0x08002644

080006b8 <LL_DMA_ClearFlag_TC1>:
  * @rmtoll IFCR         CTCIF1        LL_DMA_ClearFlag_TC1
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC1(DMA_TypeDef *DMAx)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	2202      	movs	r2, #2
 80006c4:	605a      	str	r2, [r3, #4]
}
 80006c6:	bf00      	nop
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr

080006d2 <LL_DMA_ClearFlag_TC2>:
  * @rmtoll IFCR         CTCIF2        LL_DMA_ClearFlag_TC2
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC2(DMA_TypeDef *DMAx)
{
 80006d2:	b480      	push	{r7}
 80006d4:	b083      	sub	sp, #12
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF2);
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	2220      	movs	r2, #32
 80006de:	605a      	str	r2, [r3, #4]
}
 80006e0:	bf00      	nop
 80006e2:	370c      	adds	r7, #12
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr

080006ec <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b085      	sub	sp, #20
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
 80006f4:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;    
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 80006fa:	4a0c      	ldr	r2, [pc, #48]	; (800072c <LL_DMA_EnableIT_TC+0x40>)
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	4413      	add	r3, r2
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	461a      	mov	r2, r3
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	4413      	add	r3, r2
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4908      	ldr	r1, [pc, #32]	; (800072c <LL_DMA_EnableIT_TC+0x40>)
 800070c:	683a      	ldr	r2, [r7, #0]
 800070e:	440a      	add	r2, r1
 8000710:	7812      	ldrb	r2, [r2, #0]
 8000712:	4611      	mov	r1, r2
 8000714:	68fa      	ldr	r2, [r7, #12]
 8000716:	440a      	add	r2, r1
 8000718:	f043 0302 	orr.w	r3, r3, #2
 800071c:	6013      	str	r3, [r2, #0]
}
 800071e:	bf00      	nop
 8000720:	3714      	adds	r7, #20
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	08002644 	.word	0x08002644

08000730 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000730:	b480      	push	{r7}
 8000732:	b085      	sub	sp, #20
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000738:	4b08      	ldr	r3, [pc, #32]	; (800075c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800073a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800073c:	4907      	ldr	r1, [pc, #28]	; (800075c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	4313      	orrs	r3, r2
 8000742:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000744:	4b05      	ldr	r3, [pc, #20]	; (800075c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000746:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	4013      	ands	r3, r2
 800074c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800074e:	68fb      	ldr	r3, [r7, #12]
}
 8000750:	bf00      	nop
 8000752:	3714      	adds	r7, #20
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr
 800075c:	40021000 	.word	0x40021000

08000760 <LL_GPIO_SetOutputPin>:
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	683a      	ldr	r2, [r7, #0]
 800076e:	619a      	str	r2, [r3, #24]
}
 8000770:	bf00      	nop
 8000772:	370c      	adds	r7, #12
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr

0800077c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 8000780:	2002      	movs	r0, #2
 8000782:	f7ff ffd5 	bl	8000730 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA2_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000786:	f7ff fe6f 	bl	8000468 <__NVIC_GetPriorityGrouping>
 800078a:	4603      	mov	r3, r0
 800078c:	2200      	movs	r2, #0
 800078e:	2100      	movs	r1, #0
 8000790:	4618      	mov	r0, r3
 8000792:	f7ff febf 	bl	8000514 <NVIC_EncodePriority>
 8000796:	4603      	mov	r3, r0
 8000798:	4619      	mov	r1, r3
 800079a:	2038      	movs	r0, #56	; 0x38
 800079c:	f7ff fe90 	bl	80004c0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 80007a0:	2038      	movs	r0, #56	; 0x38
 80007a2:	f7ff fe6f 	bl	8000484 <__NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Channel2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80007a6:	f7ff fe5f 	bl	8000468 <__NVIC_GetPriorityGrouping>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2200      	movs	r2, #0
 80007ae:	2100      	movs	r1, #0
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff feaf 	bl	8000514 <NVIC_EncodePriority>
 80007b6:	4603      	mov	r3, r0
 80007b8:	4619      	mov	r1, r3
 80007ba:	2039      	movs	r0, #57	; 0x39
 80007bc:	f7ff fe80 	bl	80004c0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 80007c0:	2039      	movs	r0, #57	; 0x39
 80007c2:	f7ff fe5f 	bl	8000484 <__NVIC_EnableIRQ>

}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}

080007ca <DMA_Channel_Init>:

/* USER CODE BEGIN 2 */
void DMA_Channel_Init(DMA_TypeDef *DMAx, uint32_t channel, uint32_t periph_addr, uint8_t *mem_addr) {
 80007ca:	b580      	push	{r7, lr}
 80007cc:	b084      	sub	sp, #16
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	60f8      	str	r0, [r7, #12]
 80007d2:	60b9      	str	r1, [r7, #8]
 80007d4:	607a      	str	r2, [r7, #4]
 80007d6:	603b      	str	r3, [r7, #0]
	LL_DMA_SetPeriphAddress(DMAx, channel, periph_addr);
 80007d8:	687a      	ldr	r2, [r7, #4]
 80007da:	68b9      	ldr	r1, [r7, #8]
 80007dc:	68f8      	ldr	r0, [r7, #12]
 80007de:	f7ff ff51 	bl	8000684 <LL_DMA_SetPeriphAddress>
	LL_DMA_SetMemoryAddress(DMAx, channel, (uint32_t) mem_addr);
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	461a      	mov	r2, r3
 80007e6:	68b9      	ldr	r1, [r7, #8]
 80007e8:	68f8      	ldr	r0, [r7, #12]
 80007ea:	f7ff ff31 	bl	8000650 <LL_DMA_SetMemoryAddress>
	LL_DMA_EnableIT_TC(DMAx, channel);
 80007ee:	68b9      	ldr	r1, [r7, #8]
 80007f0:	68f8      	ldr	r0, [r7, #12]
 80007f2:	f7ff ff7b 	bl	80006ec <LL_DMA_EnableIT_TC>
}
 80007f6:	bf00      	nop
 80007f8:	3710      	adds	r7, #16
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}

080007fe <DMA_Set_Channel_Data_Length>:

void DMA_Set_Channel_Data_Length(DMA_TypeDef *DMAx, uint32_t channel, uint32_t length) {
 80007fe:	b580      	push	{r7, lr}
 8000800:	b084      	sub	sp, #16
 8000802:	af00      	add	r7, sp, #0
 8000804:	60f8      	str	r0, [r7, #12]
 8000806:	60b9      	str	r1, [r7, #8]
 8000808:	607a      	str	r2, [r7, #4]
	LL_DMA_SetDataLength(DMAx, channel, length);
 800080a:	687a      	ldr	r2, [r7, #4]
 800080c:	68b9      	ldr	r1, [r7, #8]
 800080e:	68f8      	ldr	r0, [r7, #12]
 8000810:	f7ff fef8 	bl	8000604 <LL_DMA_SetDataLength>
}
 8000814:	bf00      	nop
 8000816:	3710      	adds	r7, #16
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}

0800081c <DMA_Reload_Memory_Address>:

void DMA_Reload_Memory_Address(DMA_TypeDef *DMAx, uint32_t channel, uint8_t *mem_addr) {
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
 8000822:	60f8      	str	r0, [r7, #12]
 8000824:	60b9      	str	r1, [r7, #8]
 8000826:	607a      	str	r2, [r7, #4]
	LL_DMA_SetMemoryAddress(DMAx, channel, (uint32_t) mem_addr);
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	461a      	mov	r2, r3
 800082c:	68b9      	ldr	r1, [r7, #8]
 800082e:	68f8      	ldr	r0, [r7, #12]
 8000830:	f7ff ff0e 	bl	8000650 <LL_DMA_SetMemoryAddress>
}
 8000834:	bf00      	nop
 8000836:	3710      	adds	r7, #16
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}

0800083c <DMA_Enable_CH1_CH2>:

void DMA_Enable_CH1_CH2(DMA_TypeDef *DMAx) {
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
	LL_DMA_EnableChannel(DMAx, LL_DMA_CHANNEL_1);
 8000844:	2100      	movs	r1, #0
 8000846:	6878      	ldr	r0, [r7, #4]
 8000848:	f7ff fe98 	bl	800057c <LL_DMA_EnableChannel>
	LL_DMA_EnableChannel(DMAx, LL_DMA_CHANNEL_2);
 800084c:	2101      	movs	r1, #1
 800084e:	6878      	ldr	r0, [r7, #4]
 8000850:	f7ff fe94 	bl	800057c <LL_DMA_EnableChannel>
}
 8000854:	bf00      	nop
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}

0800085c <DMA_Transfer_Complete_RX_interrupt_handler>:

void DMA_Transfer_Complete_RX_interrupt_handler() {
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
	LL_DMA_ClearFlag_TC1(DMA2);
 8000860:	480b      	ldr	r0, [pc, #44]	; (8000890 <DMA_Transfer_Complete_RX_interrupt_handler+0x34>)
 8000862:	f7ff ff29 	bl	80006b8 <LL_DMA_ClearFlag_TC1>
	LL_DMA_DisableChannel(DMA2, LL_DMA_CHANNEL_1);
 8000866:	2100      	movs	r1, #0
 8000868:	4809      	ldr	r0, [pc, #36]	; (8000890 <DMA_Transfer_Complete_RX_interrupt_handler+0x34>)
 800086a:	f7ff fea9 	bl	80005c0 <LL_DMA_DisableChannel>

	if (tc == 1) {
 800086e:	4b09      	ldr	r3, [pc, #36]	; (8000894 <DMA_Transfer_Complete_RX_interrupt_handler+0x38>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	b2db      	uxtb	r3, r3
 8000874:	2b01      	cmp	r3, #1
 8000876:	d106      	bne.n	8000886 <DMA_Transfer_Complete_RX_interrupt_handler+0x2a>
		DMA_Disable(SB_SPIx);
 8000878:	4807      	ldr	r0, [pc, #28]	; (8000898 <DMA_Transfer_Complete_RX_interrupt_handler+0x3c>)
 800087a:	f000 f82f 	bl	80008dc <DMA_Disable>
		tc = 0;
 800087e:	4b05      	ldr	r3, [pc, #20]	; (8000894 <DMA_Transfer_Complete_RX_interrupt_handler+0x38>)
 8000880:	2200      	movs	r2, #0
 8000882:	701a      	strb	r2, [r3, #0]
	} else {
		tc = 1;
	}
}
 8000884:	e002      	b.n	800088c <DMA_Transfer_Complete_RX_interrupt_handler+0x30>
		tc = 1;
 8000886:	4b03      	ldr	r3, [pc, #12]	; (8000894 <DMA_Transfer_Complete_RX_interrupt_handler+0x38>)
 8000888:	2201      	movs	r2, #1
 800088a:	701a      	strb	r2, [r3, #0]
}
 800088c:	bf00      	nop
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40020400 	.word	0x40020400
 8000894:	20003c4c 	.word	0x20003c4c
 8000898:	40003c00 	.word	0x40003c00

0800089c <DMA_Transfer_Complete_TX_interrupt_handler>:

void DMA_Transfer_Complete_TX_interrupt_handler() {
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
	LL_DMA_ClearFlag_TC2(DMA2);
 80008a0:	480b      	ldr	r0, [pc, #44]	; (80008d0 <DMA_Transfer_Complete_TX_interrupt_handler+0x34>)
 80008a2:	f7ff ff16 	bl	80006d2 <LL_DMA_ClearFlag_TC2>
	LL_DMA_DisableChannel(DMA2, LL_DMA_CHANNEL_2);
 80008a6:	2101      	movs	r1, #1
 80008a8:	4809      	ldr	r0, [pc, #36]	; (80008d0 <DMA_Transfer_Complete_TX_interrupt_handler+0x34>)
 80008aa:	f7ff fe89 	bl	80005c0 <LL_DMA_DisableChannel>

	if (tc == 1) {
 80008ae:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <DMA_Transfer_Complete_TX_interrupt_handler+0x38>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	2b01      	cmp	r3, #1
 80008b6:	d106      	bne.n	80008c6 <DMA_Transfer_Complete_TX_interrupt_handler+0x2a>
		DMA_Disable(SB_SPIx);
 80008b8:	4807      	ldr	r0, [pc, #28]	; (80008d8 <DMA_Transfer_Complete_TX_interrupt_handler+0x3c>)
 80008ba:	f000 f80f 	bl	80008dc <DMA_Disable>
		tc = 0;
 80008be:	4b05      	ldr	r3, [pc, #20]	; (80008d4 <DMA_Transfer_Complete_TX_interrupt_handler+0x38>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	701a      	strb	r2, [r3, #0]
	} else {
		tc = 1;
	}
}
 80008c4:	e002      	b.n	80008cc <DMA_Transfer_Complete_TX_interrupt_handler+0x30>
		tc = 1;
 80008c6:	4b03      	ldr	r3, [pc, #12]	; (80008d4 <DMA_Transfer_Complete_TX_interrupt_handler+0x38>)
 80008c8:	2201      	movs	r2, #1
 80008ca:	701a      	strb	r2, [r3, #0]
}
 80008cc:	bf00      	nop
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	40020400 	.word	0x40020400
 80008d4:	20003c4c 	.word	0x20003c4c
 80008d8:	40003c00 	.word	0x40003c00

080008dc <DMA_Disable>:


void DMA_Disable(SPI_TypeDef *SPIx) {
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
	SPI_Disable(SPIx);
 80008e4:	6878      	ldr	r0, [r7, #4]
 80008e6:	f000 ffae 	bl	8001846 <SPI_Disable>

	SPI_Disable_DMA_Requests(SPIx);
 80008ea:	6878      	ldr	r0, [r7, #4]
 80008ec:	f000 ff30 	bl	8001750 <SPI_Disable_DMA_Requests>

	LL_GPIO_SetOutputPin(ADC_CS_GPIOx, ADC_CS_PIN);
 80008f0:	2102      	movs	r1, #2
 80008f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008f6:	f7ff ff33 	bl	8000760 <LL_GPIO_SetOutputPin>
	NVIC_EnableIRQ(EXTI4_IRQn);
 80008fa:	200a      	movs	r0, #10
 80008fc:	f7ff fdc2 	bl	8000484 <__NVIC_EnableIRQ>
}
 8000900:	bf00      	nop
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}

08000908 <__NVIC_GetPriorityGrouping>:
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800090c:	4b04      	ldr	r3, [pc, #16]	; (8000920 <__NVIC_GetPriorityGrouping+0x18>)
 800090e:	68db      	ldr	r3, [r3, #12]
 8000910:	0a1b      	lsrs	r3, r3, #8
 8000912:	f003 0307 	and.w	r3, r3, #7
}
 8000916:	4618      	mov	r0, r3
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr
 8000920:	e000ed00 	.word	0xe000ed00

08000924 <__NVIC_EnableIRQ>:
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800092e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000932:	2b00      	cmp	r3, #0
 8000934:	db0b      	blt.n	800094e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000936:	79fb      	ldrb	r3, [r7, #7]
 8000938:	f003 021f 	and.w	r2, r3, #31
 800093c:	4907      	ldr	r1, [pc, #28]	; (800095c <__NVIC_EnableIRQ+0x38>)
 800093e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000942:	095b      	lsrs	r3, r3, #5
 8000944:	2001      	movs	r0, #1
 8000946:	fa00 f202 	lsl.w	r2, r0, r2
 800094a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800094e:	bf00      	nop
 8000950:	370c      	adds	r7, #12
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	e000e100 	.word	0xe000e100

08000960 <__NVIC_SetPriority>:
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	4603      	mov	r3, r0
 8000968:	6039      	str	r1, [r7, #0]
 800096a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800096c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000970:	2b00      	cmp	r3, #0
 8000972:	db0a      	blt.n	800098a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	b2da      	uxtb	r2, r3
 8000978:	490c      	ldr	r1, [pc, #48]	; (80009ac <__NVIC_SetPriority+0x4c>)
 800097a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800097e:	0112      	lsls	r2, r2, #4
 8000980:	b2d2      	uxtb	r2, r2
 8000982:	440b      	add	r3, r1
 8000984:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000988:	e00a      	b.n	80009a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	b2da      	uxtb	r2, r3
 800098e:	4908      	ldr	r1, [pc, #32]	; (80009b0 <__NVIC_SetPriority+0x50>)
 8000990:	79fb      	ldrb	r3, [r7, #7]
 8000992:	f003 030f 	and.w	r3, r3, #15
 8000996:	3b04      	subs	r3, #4
 8000998:	0112      	lsls	r2, r2, #4
 800099a:	b2d2      	uxtb	r2, r2
 800099c:	440b      	add	r3, r1
 800099e:	761a      	strb	r2, [r3, #24]
}
 80009a0:	bf00      	nop
 80009a2:	370c      	adds	r7, #12
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr
 80009ac:	e000e100 	.word	0xe000e100
 80009b0:	e000ed00 	.word	0xe000ed00

080009b4 <NVIC_EncodePriority>:
{
 80009b4:	b480      	push	{r7}
 80009b6:	b089      	sub	sp, #36	; 0x24
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	60f8      	str	r0, [r7, #12]
 80009bc:	60b9      	str	r1, [r7, #8]
 80009be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	f003 0307 	and.w	r3, r3, #7
 80009c6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009c8:	69fb      	ldr	r3, [r7, #28]
 80009ca:	f1c3 0307 	rsb	r3, r3, #7
 80009ce:	2b04      	cmp	r3, #4
 80009d0:	bf28      	it	cs
 80009d2:	2304      	movcs	r3, #4
 80009d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009d6:	69fb      	ldr	r3, [r7, #28]
 80009d8:	3304      	adds	r3, #4
 80009da:	2b06      	cmp	r3, #6
 80009dc:	d902      	bls.n	80009e4 <NVIC_EncodePriority+0x30>
 80009de:	69fb      	ldr	r3, [r7, #28]
 80009e0:	3b03      	subs	r3, #3
 80009e2:	e000      	b.n	80009e6 <NVIC_EncodePriority+0x32>
 80009e4:	2300      	movs	r3, #0
 80009e6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009ec:	69bb      	ldr	r3, [r7, #24]
 80009ee:	fa02 f303 	lsl.w	r3, r2, r3
 80009f2:	43da      	mvns	r2, r3
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	401a      	ands	r2, r3
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	fa01 f303 	lsl.w	r3, r1, r3
 8000a06:	43d9      	mvns	r1, r3
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a0c:	4313      	orrs	r3, r2
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3724      	adds	r7, #36	; 0x24
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
	...

08000a1c <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b085      	sub	sp, #20
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000a24:	4b08      	ldr	r3, [pc, #32]	; (8000a48 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000a26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a28:	4907      	ldr	r1, [pc, #28]	; (8000a48 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000a30:	4b05      	ldr	r3, [pc, #20]	; (8000a48 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000a32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	4013      	ands	r3, r2
 8000a38:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a3a:	68fb      	ldr	r3, [r7, #12]
}
 8000a3c:	bf00      	nop
 8000a3e:	3714      	adds	r7, #20
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr
 8000a48:	40021000 	.word	0x40021000

08000a4c <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b087      	sub	sp, #28
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8000a56:	4a17      	ldr	r2, [pc, #92]	; (8000ab4 <LL_SYSCFG_SetEXTISource+0x68>)
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	3302      	adds	r3, #2
 8000a5e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	0c1b      	lsrs	r3, r3, #16
 8000a66:	43db      	mvns	r3, r3
 8000a68:	ea02 0103 	and.w	r1, r2, r3
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	0c1b      	lsrs	r3, r3, #16
 8000a70:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a72:	693b      	ldr	r3, [r7, #16]
 8000a74:	fa93 f3a3 	rbit	r3, r3
 8000a78:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d101      	bne.n	8000a88 <LL_SYSCFG_SetEXTISource+0x3c>
  {
    return 32U;
 8000a84:	2320      	movs	r3, #32
 8000a86:	e003      	b.n	8000a90 <LL_SYSCFG_SetEXTISource+0x44>
  }
  return __builtin_clz(value);
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	fab3 f383 	clz	r3, r3
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	461a      	mov	r2, r3
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	fa03 f202 	lsl.w	r2, r3, r2
 8000a98:	4806      	ldr	r0, [pc, #24]	; (8000ab4 <LL_SYSCFG_SetEXTISource+0x68>)
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	430a      	orrs	r2, r1
 8000aa0:	3302      	adds	r3, #2
 8000aa2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000aa6:	bf00      	nop
 8000aa8:	371c      	adds	r7, #28
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	40010000 	.word	0x40010000

08000ab8 <LL_GPIO_SetPinMode>:
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b08b      	sub	sp, #44	; 0x2c
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	60f8      	str	r0, [r7, #12]
 8000ac0:	60b9      	str	r1, [r7, #8]
 8000ac2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	fa93 f3a3 	rbit	r3, r3
 8000ad2:	613b      	str	r3, [r7, #16]
  return result;
 8000ad4:	693b      	ldr	r3, [r7, #16]
 8000ad6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000ad8:	69bb      	ldr	r3, [r7, #24]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d101      	bne.n	8000ae2 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8000ade:	2320      	movs	r3, #32
 8000ae0:	e003      	b.n	8000aea <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8000ae2:	69bb      	ldr	r3, [r7, #24]
 8000ae4:	fab3 f383 	clz	r3, r3
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	005b      	lsls	r3, r3, #1
 8000aec:	2103      	movs	r1, #3
 8000aee:	fa01 f303 	lsl.w	r3, r1, r3
 8000af2:	43db      	mvns	r3, r3
 8000af4:	401a      	ands	r2, r3
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000afa:	6a3b      	ldr	r3, [r7, #32]
 8000afc:	fa93 f3a3 	rbit	r3, r3
 8000b00:	61fb      	str	r3, [r7, #28]
  return result;
 8000b02:	69fb      	ldr	r3, [r7, #28]
 8000b04:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d101      	bne.n	8000b10 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8000b0c:	2320      	movs	r3, #32
 8000b0e:	e003      	b.n	8000b18 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b12:	fab3 f383 	clz	r3, r3
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	005b      	lsls	r3, r3, #1
 8000b1a:	6879      	ldr	r1, [r7, #4]
 8000b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b20:	431a      	orrs	r2, r3
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	601a      	str	r2, [r3, #0]
}
 8000b26:	bf00      	nop
 8000b28:	372c      	adds	r7, #44	; 0x2c
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr

08000b32 <LL_GPIO_SetPinPull>:
{
 8000b32:	b480      	push	{r7}
 8000b34:	b08b      	sub	sp, #44	; 0x2c
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	60f8      	str	r0, [r7, #12]
 8000b3a:	60b9      	str	r1, [r7, #8]
 8000b3c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	68da      	ldr	r2, [r3, #12]
 8000b42:	68bb      	ldr	r3, [r7, #8]
 8000b44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	fa93 f3a3 	rbit	r3, r3
 8000b4c:	613b      	str	r3, [r7, #16]
  return result;
 8000b4e:	693b      	ldr	r3, [r7, #16]
 8000b50:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000b52:	69bb      	ldr	r3, [r7, #24]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d101      	bne.n	8000b5c <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8000b58:	2320      	movs	r3, #32
 8000b5a:	e003      	b.n	8000b64 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8000b5c:	69bb      	ldr	r3, [r7, #24]
 8000b5e:	fab3 f383 	clz	r3, r3
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	005b      	lsls	r3, r3, #1
 8000b66:	2103      	movs	r1, #3
 8000b68:	fa01 f303 	lsl.w	r3, r1, r3
 8000b6c:	43db      	mvns	r3, r3
 8000b6e:	401a      	ands	r2, r3
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b74:	6a3b      	ldr	r3, [r7, #32]
 8000b76:	fa93 f3a3 	rbit	r3, r3
 8000b7a:	61fb      	str	r3, [r7, #28]
  return result;
 8000b7c:	69fb      	ldr	r3, [r7, #28]
 8000b7e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d101      	bne.n	8000b8a <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8000b86:	2320      	movs	r3, #32
 8000b88:	e003      	b.n	8000b92 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8000b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b8c:	fab3 f383 	clz	r3, r3
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	005b      	lsls	r3, r3, #1
 8000b94:	6879      	ldr	r1, [r7, #4]
 8000b96:	fa01 f303 	lsl.w	r3, r1, r3
 8000b9a:	431a      	orrs	r2, r3
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	60da      	str	r2, [r3, #12]
}
 8000ba0:	bf00      	nop
 8000ba2:	372c      	adds	r7, #44	; 0x2c
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <LL_GPIO_SetOutputPin>:
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	683a      	ldr	r2, [r7, #0]
 8000bba:	619a      	str	r2, [r3, #24]
}
 8000bbc:	bf00      	nop
 8000bbe:	370c      	adds	r7, #12
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08a      	sub	sp, #40	; 0x28
 8000bcc:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000bce:	f107 031c 	add.w	r3, r7, #28
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bda:	1d3b      	adds	r3, r7, #4
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]
 8000be8:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000bea:	2001      	movs	r0, #1
 8000bec:	f7ff ff16 	bl	8000a1c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000bf0:	2004      	movs	r0, #4
 8000bf2:	f7ff ff13 	bl	8000a1c <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3);
 8000bf6:	210e      	movs	r1, #14
 8000bf8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bfc:	f7ff ffd6 	bl	8000bac <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_9);
 8000c00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c04:	482b      	ldr	r0, [pc, #172]	; (8000cb4 <MX_GPIO_Init+0xec>)
 8000c06:	f7ff ffd1 	bl	8000bac <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8000c0a:	230e      	movs	r3, #14
 8000c0c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000c12:	2300      	movs	r3, #0
 8000c14:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1e:	1d3b      	adds	r3, r7, #4
 8000c20:	4619      	mov	r1, r3
 8000c22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c26:	f001 fad3 	bl	80021d0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8000c2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c2e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000c30:	2301      	movs	r3, #1
 8000c32:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000c34:	2300      	movs	r3, #0
 8000c36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c40:	1d3b      	adds	r3, r7, #4
 8000c42:	4619      	mov	r1, r3
 8000c44:	481b      	ldr	r0, [pc, #108]	; (8000cb4 <MX_GPIO_Init+0xec>)
 8000c46:	f001 fac3 	bl	80021d0 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE4);
 8000c4a:	491b      	ldr	r1, [pc, #108]	; (8000cb8 <MX_GPIO_Init+0xf0>)
 8000c4c:	2002      	movs	r0, #2
 8000c4e:	f7ff fefd 	bl	8000a4c <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_4;
 8000c52:	2310      	movs	r3, #16
 8000c54:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8000c56:	2300      	movs	r3, #0
 8000c58:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000c60:	2300      	movs	r3, #0
 8000c62:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000c66:	2302      	movs	r3, #2
 8000c68:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000c6c:	f107 031c 	add.w	r3, r7, #28
 8000c70:	4618      	mov	r0, r3
 8000c72:	f001 f86b 	bl	8001d4c <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(GPIOC, LL_GPIO_PIN_4, LL_GPIO_PULL_NO);
 8000c76:	2200      	movs	r2, #0
 8000c78:	2110      	movs	r1, #16
 8000c7a:	480e      	ldr	r0, [pc, #56]	; (8000cb4 <MX_GPIO_Init+0xec>)
 8000c7c:	f7ff ff59 	bl	8000b32 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_4, LL_GPIO_MODE_INPUT);
 8000c80:	2200      	movs	r2, #0
 8000c82:	2110      	movs	r1, #16
 8000c84:	480b      	ldr	r0, [pc, #44]	; (8000cb4 <MX_GPIO_Init+0xec>)
 8000c86:	f7ff ff17 	bl	8000ab8 <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000c8a:	f7ff fe3d 	bl	8000908 <__NVIC_GetPriorityGrouping>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2200      	movs	r2, #0
 8000c92:	2100      	movs	r1, #0
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff fe8d 	bl	80009b4 <NVIC_EncodePriority>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	200a      	movs	r0, #10
 8000ca0:	f7ff fe5e 	bl	8000960 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI4_IRQn);
 8000ca4:	200a      	movs	r0, #10
 8000ca6:	f7ff fe3d 	bl	8000924 <__NVIC_EnableIRQ>

}
 8000caa:	bf00      	nop
 8000cac:	3728      	adds	r7, #40	; 0x28
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	48000800 	.word	0x48000800
 8000cb8:	000f0001 	.word	0x000f0001

08000cbc <__NVIC_SetPriorityGrouping>:
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b085      	sub	sp, #20
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	f003 0307 	and.w	r3, r3, #7
 8000cca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ccc:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <__NVIC_SetPriorityGrouping+0x44>)
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cd2:	68ba      	ldr	r2, [r7, #8]
 8000cd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cd8:	4013      	ands	r3, r2
 8000cda:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ce4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ce8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cee:	4a04      	ldr	r2, [pc, #16]	; (8000d00 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	60d3      	str	r3, [r2, #12]
}
 8000cf4:	bf00      	nop
 8000cf6:	3714      	adds	r7, #20
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <__NVIC_GetPriorityGrouping>:
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d08:	4b04      	ldr	r3, [pc, #16]	; (8000d1c <__NVIC_GetPriorityGrouping+0x18>)
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	0a1b      	lsrs	r3, r3, #8
 8000d0e:	f003 0307 	and.w	r3, r3, #7
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <__NVIC_SetPriority>:
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	6039      	str	r1, [r7, #0]
 8000d2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	db0a      	blt.n	8000d4a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	b2da      	uxtb	r2, r3
 8000d38:	490c      	ldr	r1, [pc, #48]	; (8000d6c <__NVIC_SetPriority+0x4c>)
 8000d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3e:	0112      	lsls	r2, r2, #4
 8000d40:	b2d2      	uxtb	r2, r2
 8000d42:	440b      	add	r3, r1
 8000d44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000d48:	e00a      	b.n	8000d60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	b2da      	uxtb	r2, r3
 8000d4e:	4908      	ldr	r1, [pc, #32]	; (8000d70 <__NVIC_SetPriority+0x50>)
 8000d50:	79fb      	ldrb	r3, [r7, #7]
 8000d52:	f003 030f 	and.w	r3, r3, #15
 8000d56:	3b04      	subs	r3, #4
 8000d58:	0112      	lsls	r2, r2, #4
 8000d5a:	b2d2      	uxtb	r2, r2
 8000d5c:	440b      	add	r3, r1
 8000d5e:	761a      	strb	r2, [r3, #24]
}
 8000d60:	bf00      	nop
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	e000e100 	.word	0xe000e100
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <NVIC_EncodePriority>:
{
 8000d74:	b480      	push	{r7}
 8000d76:	b089      	sub	sp, #36	; 0x24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	f003 0307 	and.w	r3, r3, #7
 8000d86:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	f1c3 0307 	rsb	r3, r3, #7
 8000d8e:	2b04      	cmp	r3, #4
 8000d90:	bf28      	it	cs
 8000d92:	2304      	movcs	r3, #4
 8000d94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	3304      	adds	r3, #4
 8000d9a:	2b06      	cmp	r3, #6
 8000d9c:	d902      	bls.n	8000da4 <NVIC_EncodePriority+0x30>
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	3b03      	subs	r3, #3
 8000da2:	e000      	b.n	8000da6 <NVIC_EncodePriority+0x32>
 8000da4:	2300      	movs	r3, #0
 8000da6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000dac:	69bb      	ldr	r3, [r7, #24]
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	43da      	mvns	r2, r3
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	401a      	ands	r2, r3
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dbc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc6:	43d9      	mvns	r1, r3
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dcc:	4313      	orrs	r3, r2
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3724      	adds	r7, #36	; 0x24
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
	...

08000ddc <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000de0:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <LL_RCC_HSI_Enable+0x1c>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a04      	ldr	r2, [pc, #16]	; (8000df8 <LL_RCC_HSI_Enable+0x1c>)
 8000de6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dea:	6013      	str	r3, [r2, #0]
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	40021000 	.word	0x40021000

08000dfc <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8000e00:	4b07      	ldr	r3, [pc, #28]	; (8000e20 <LL_RCC_HSI_IsReady+0x24>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e0c:	d101      	bne.n	8000e12 <LL_RCC_HSI_IsReady+0x16>
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e000      	b.n	8000e14 <LL_RCC_HSI_IsReady+0x18>
 8000e12:	2300      	movs	r3, #0
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	40021000 	.word	0x40021000

08000e24 <LL_RCC_HSI_SetCalibTrimming>:
  * @param  Value Between Min_Data = 0 and Max_Data = 31 on STM32L43x/STM32L44x/STM32L47x/STM32L48x or
  *               between Min_Data = 0 and Max_Data = 127 on other devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000e2c:	4b07      	ldr	r3, [pc, #28]	; (8000e4c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	061b      	lsls	r3, r3, #24
 8000e38:	4904      	ldr	r1, [pc, #16]	; (8000e4c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	604b      	str	r3, [r1, #4]
}
 8000e3e:	bf00      	nop
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	40021000 	.word	0x40021000

08000e50 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000e58:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <LL_RCC_SetSysClkSource+0x24>)
 8000e5a:	689b      	ldr	r3, [r3, #8]
 8000e5c:	f023 0203 	bic.w	r2, r3, #3
 8000e60:	4904      	ldr	r1, [pc, #16]	; (8000e74 <LL_RCC_SetSysClkSource+0x24>)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	608b      	str	r3, [r1, #8]
}
 8000e68:	bf00      	nop
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	40021000 	.word	0x40021000

08000e78 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000e7c:	4b04      	ldr	r3, [pc, #16]	; (8000e90 <LL_RCC_GetSysClkSource+0x18>)
 8000e7e:	689b      	ldr	r3, [r3, #8]
 8000e80:	f003 030c 	and.w	r3, r3, #12
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	40021000 	.word	0x40021000

08000e94 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <LL_RCC_SetAHBPrescaler+0x24>)
 8000e9e:	689b      	ldr	r3, [r3, #8]
 8000ea0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ea4:	4904      	ldr	r1, [pc, #16]	; (8000eb8 <LL_RCC_SetAHBPrescaler+0x24>)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	608b      	str	r3, [r1, #8]
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	40021000 	.word	0x40021000

08000ebc <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000ec4:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000ec6:	689b      	ldr	r3, [r3, #8]
 8000ec8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000ecc:	4904      	ldr	r1, [pc, #16]	; (8000ee0 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	608b      	str	r3, [r1, #8]
}
 8000ed4:	bf00      	nop
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	40021000 	.word	0x40021000

08000ee4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000eec:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000ef4:	4904      	ldr	r1, [pc, #16]	; (8000f08 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	608b      	str	r3, [r1, #8]
}
 8000efc:	bf00      	nop
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	40021000 	.word	0x40021000

08000f0c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000f14:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000f16:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000f18:	4907      	ldr	r1, [pc, #28]	; (8000f38 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000f20:	4b05      	ldr	r3, [pc, #20]	; (8000f38 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000f22:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	4013      	ands	r3, r2
 8000f28:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
}
 8000f2c:	bf00      	nop
 8000f2e:	3714      	adds	r7, #20
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	40021000 	.word	0x40021000

08000f3c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b085      	sub	sp, #20
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000f44:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000f46:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f48:	4907      	ldr	r1, [pc, #28]	; (8000f68 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000f50:	4b05      	ldr	r3, [pc, #20]	; (8000f68 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000f52:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	4013      	ands	r3, r2
 8000f58:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
}
 8000f5c:	bf00      	nop
 8000f5e:	3714      	adds	r7, #20
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	40021000 	.word	0x40021000

08000f6c <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000f74:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <LL_FLASH_SetLatency+0x24>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f023 0207 	bic.w	r2, r3, #7
 8000f7c:	4904      	ldr	r1, [pc, #16]	; (8000f90 <LL_FLASH_SetLatency+0x24>)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	600b      	str	r3, [r1, #0]
}
 8000f84:	bf00      	nop
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	40022000 	.word	0x40022000

08000f94 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000f98:	4b04      	ldr	r3, [pc, #16]	; (8000fac <LL_FLASH_GetLatency+0x18>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f003 0307 	and.w	r3, r3, #7
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	40022000 	.word	0x40022000

08000fb0 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000fb8:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8000fc0:	4904      	ldr	r1, [pc, #16]	; (8000fd4 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	600b      	str	r3, [r1, #0]
}
 8000fc8:	bf00      	nop
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	40007000 	.word	0x40007000

08000fd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000fde:	2001      	movs	r0, #1
 8000fe0:	f7ff ffac 	bl	8000f3c <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000fe4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000fe8:	f7ff ff90 	bl	8000f0c <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fec:	2003      	movs	r0, #3
 8000fee:	f7ff fe65 	bl	8000cbc <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8000ff2:	f7ff fe87 	bl	8000d04 <__NVIC_GetPriorityGrouping>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	210f      	movs	r1, #15
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff feb9 	bl	8000d74 <NVIC_EncodePriority>
 8001002:	4603      	mov	r3, r0
 8001004:	4619      	mov	r1, r3
 8001006:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800100a:	f7ff fe89 	bl	8000d20 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800100e:	f000 f80d 	bl	800102c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001012:	f7ff fdd9 	bl	8000bc8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001016:	f000 fd0d 	bl	8001a34 <MX_TIM2_Init>
  MX_DMA_Init();
 800101a:	f7ff fbaf 	bl	800077c <MX_DMA_Init>
  MX_SPI3_Init();
 800101e:	f000 fad7 	bl	80015d0 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  Sensor_Board sb;
  SB_Init(sb);
 8001022:	463b      	mov	r3, r7
 8001024:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001026:	f000 f837 	bl	8001098 <SB_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800102a:	e7fe      	b.n	800102a <main+0x52>

0800102c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8001030:	2000      	movs	r0, #0
 8001032:	f7ff ff9b 	bl	8000f6c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8001036:	bf00      	nop
 8001038:	f7ff ffac 	bl	8000f94 <LL_FLASH_GetLatency>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d1fa      	bne.n	8001038 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8001042:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001046:	f7ff ffb3 	bl	8000fb0 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_Enable();
 800104a:	f7ff fec7 	bl	8000ddc <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 800104e:	bf00      	nop
 8001050:	f7ff fed4 	bl	8000dfc <LL_RCC_HSI_IsReady>
 8001054:	4603      	mov	r3, r0
 8001056:	2b01      	cmp	r3, #1
 8001058:	d1fa      	bne.n	8001050 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 800105a:	2010      	movs	r0, #16
 800105c:	f7ff fee2 	bl	8000e24 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8001060:	2001      	movs	r0, #1
 8001062:	f7ff fef5 	bl	8000e50 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8001066:	bf00      	nop
 8001068:	f7ff ff06 	bl	8000e78 <LL_RCC_GetSysClkSource>
 800106c:	4603      	mov	r3, r0
 800106e:	2b04      	cmp	r3, #4
 8001070:	d1fa      	bne.n	8001068 <SystemClock_Config+0x3c>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001072:	2000      	movs	r0, #0
 8001074:	f7ff ff0e 	bl	8000e94 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001078:	2000      	movs	r0, #0
 800107a:	f7ff ff1f 	bl	8000ebc <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 800107e:	2000      	movs	r0, #0
 8001080:	f7ff ff30 	bl	8000ee4 <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick(16000000);
 8001084:	4803      	ldr	r0, [pc, #12]	; (8001094 <SystemClock_Config+0x68>)
 8001086:	f001 fa87 	bl	8002598 <LL_Init1msTick>

  LL_SetSystemCoreClock(16000000);
 800108a:	4802      	ldr	r0, [pc, #8]	; (8001094 <SystemClock_Config+0x68>)
 800108c:	f001 fa92 	bl	80025b4 <LL_SetSystemCoreClock>
}
 8001090:	bf00      	nop
 8001092:	bd80      	pop	{r7, pc}
 8001094:	00f42400 	.word	0x00f42400

08001098 <SB_Init>:
#include "sensor_board.h"

void SB_Init(Sensor_Board sb) {
 8001098:	b590      	push	{r4, r7, lr}
 800109a:	b089      	sub	sp, #36	; 0x24
 800109c:	af00      	add	r7, sp, #0
 800109e:	463c      	mov	r4, r7
 80010a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	ADS131M08 adc;
	ADC_Init(&adc, SB_SPIx, SB_DMAx);
 80010a4:	f107 0310 	add.w	r3, r7, #16
 80010a8:	4a04      	ldr	r2, [pc, #16]	; (80010bc <SB_Init+0x24>)
 80010aa:	4905      	ldr	r1, [pc, #20]	; (80010c0 <SB_Init+0x28>)
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff f8d7 	bl	8000260 <ADC_Init>
}
 80010b2:	bf00      	nop
 80010b4:	3724      	adds	r7, #36	; 0x24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd90      	pop	{r4, r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40020400 	.word	0x40020400
 80010c0:	40003c00 	.word	0x40003c00

080010c4 <LL_DMA_SetDataTransferDirection>:
{
 80010c4:	b480      	push	{r7}
 80010c6:	b087      	sub	sp, #28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 80010d4:	4a0e      	ldr	r2, [pc, #56]	; (8001110 <LL_DMA_SetDataTransferDirection+0x4c>)
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	4413      	add	r3, r2
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	461a      	mov	r2, r3
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	4413      	add	r3, r2
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80010e8:	f023 0310 	bic.w	r3, r3, #16
 80010ec:	4908      	ldr	r1, [pc, #32]	; (8001110 <LL_DMA_SetDataTransferDirection+0x4c>)
 80010ee:	68ba      	ldr	r2, [r7, #8]
 80010f0:	440a      	add	r2, r1
 80010f2:	7812      	ldrb	r2, [r2, #0]
 80010f4:	4611      	mov	r1, r2
 80010f6:	697a      	ldr	r2, [r7, #20]
 80010f8:	440a      	add	r2, r1
 80010fa:	4611      	mov	r1, r2
 80010fc:	687a      	ldr	r2, [r7, #4]
 80010fe:	4313      	orrs	r3, r2
 8001100:	600b      	str	r3, [r1, #0]
}
 8001102:	bf00      	nop
 8001104:	371c      	adds	r7, #28
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	0800264c 	.word	0x0800264c

08001114 <LL_DMA_SetMode>:
{
 8001114:	b480      	push	{r7}
 8001116:	b087      	sub	sp, #28
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 8001124:	4a0d      	ldr	r2, [pc, #52]	; (800115c <LL_DMA_SetMode+0x48>)
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	4413      	add	r3, r2
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	461a      	mov	r2, r3
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	4413      	add	r3, r2
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f023 0220 	bic.w	r2, r3, #32
 8001138:	4908      	ldr	r1, [pc, #32]	; (800115c <LL_DMA_SetMode+0x48>)
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	440b      	add	r3, r1
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	4619      	mov	r1, r3
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	440b      	add	r3, r1
 8001146:	4619      	mov	r1, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4313      	orrs	r3, r2
 800114c:	600b      	str	r3, [r1, #0]
}
 800114e:	bf00      	nop
 8001150:	371c      	adds	r7, #28
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	0800264c 	.word	0x0800264c

08001160 <LL_DMA_SetPeriphIncMode>:
{
 8001160:	b480      	push	{r7}
 8001162:	b087      	sub	sp, #28
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
    uint32_t dma_base_addr = (uint32_t)DMAx;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 8001170:	4a0d      	ldr	r2, [pc, #52]	; (80011a8 <LL_DMA_SetPeriphIncMode+0x48>)
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	4413      	add	r3, r2
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	461a      	mov	r2, r3
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	4413      	add	r3, r2
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001184:	4908      	ldr	r1, [pc, #32]	; (80011a8 <LL_DMA_SetPeriphIncMode+0x48>)
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	440b      	add	r3, r1
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	4619      	mov	r1, r3
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	440b      	add	r3, r1
 8001192:	4619      	mov	r1, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4313      	orrs	r3, r2
 8001198:	600b      	str	r3, [r1, #0]
}
 800119a:	bf00      	nop
 800119c:	371c      	adds	r7, #28
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	0800264c 	.word	0x0800264c

080011ac <LL_DMA_SetMemoryIncMode>:
{
 80011ac:	b480      	push	{r7}
 80011ae:	b087      	sub	sp, #28
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 80011bc:	4a0d      	ldr	r2, [pc, #52]	; (80011f4 <LL_DMA_SetMemoryIncMode+0x48>)
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	4413      	add	r3, r2
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	461a      	mov	r2, r3
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	4413      	add	r3, r2
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80011d0:	4908      	ldr	r1, [pc, #32]	; (80011f4 <LL_DMA_SetMemoryIncMode+0x48>)
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	440b      	add	r3, r1
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	4619      	mov	r1, r3
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	440b      	add	r3, r1
 80011de:	4619      	mov	r1, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	600b      	str	r3, [r1, #0]
}
 80011e6:	bf00      	nop
 80011e8:	371c      	adds	r7, #28
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	0800264c 	.word	0x0800264c

080011f8 <LL_DMA_SetPeriphSize>:
{
 80011f8:	b480      	push	{r7}
 80011fa:	b087      	sub	sp, #28
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE, 
 8001208:	4a0d      	ldr	r2, [pc, #52]	; (8001240 <LL_DMA_SetPeriphSize+0x48>)
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	4413      	add	r3, r2
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	461a      	mov	r2, r3
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	4413      	add	r3, r2
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800121c:	4908      	ldr	r1, [pc, #32]	; (8001240 <LL_DMA_SetPeriphSize+0x48>)
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	440b      	add	r3, r1
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	4619      	mov	r1, r3
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	440b      	add	r3, r1
 800122a:	4619      	mov	r1, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	4313      	orrs	r3, r2
 8001230:	600b      	str	r3, [r1, #0]
}
 8001232:	bf00      	nop
 8001234:	371c      	adds	r7, #28
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	0800264c 	.word	0x0800264c

08001244 <LL_DMA_SetMemorySize>:
{
 8001244:	b480      	push	{r7}
 8001246:	b087      	sub	sp, #28
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 8001254:	4a0d      	ldr	r2, [pc, #52]	; (800128c <LL_DMA_SetMemorySize+0x48>)
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	4413      	add	r3, r2
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	461a      	mov	r2, r3
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	4413      	add	r3, r2
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001268:	4908      	ldr	r1, [pc, #32]	; (800128c <LL_DMA_SetMemorySize+0x48>)
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	440b      	add	r3, r1
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	4619      	mov	r1, r3
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	440b      	add	r3, r1
 8001276:	4619      	mov	r1, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	4313      	orrs	r3, r2
 800127c:	600b      	str	r3, [r1, #0]
}
 800127e:	bf00      	nop
 8001280:	371c      	adds	r7, #28
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	0800264c 	.word	0x0800264c

08001290 <LL_DMA_SetChannelPriorityLevel>:
{
 8001290:	b480      	push	{r7}
 8001292:	b087      	sub	sp, #28
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 80012a0:	4a0d      	ldr	r2, [pc, #52]	; (80012d8 <LL_DMA_SetChannelPriorityLevel+0x48>)
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	4413      	add	r3, r2
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	461a      	mov	r2, r3
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	4413      	add	r3, r2
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80012b4:	4908      	ldr	r1, [pc, #32]	; (80012d8 <LL_DMA_SetChannelPriorityLevel+0x48>)
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	440b      	add	r3, r1
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	4619      	mov	r1, r3
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	440b      	add	r3, r1
 80012c2:	4619      	mov	r1, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	600b      	str	r3, [r1, #0]
}
 80012ca:	bf00      	nop
 80012cc:	371c      	adds	r7, #28
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	0800264c 	.word	0x0800264c

080012dc <LL_DMA_SetPeriphRequest>:
{
 80012dc:	b480      	push	{r7}
 80012de:	b089      	sub	sp, #36	; 0x24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Request_TypeDef *)((uint32_t)((uint32_t)DMAx + DMA_CSELR_OFFSET)))->CSELR,
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	33a8      	adds	r3, #168	; 0xa8
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	210f      	movs	r1, #15
 80012f4:	fa01 f303 	lsl.w	r3, r1, r3
 80012f8:	43db      	mvns	r3, r3
 80012fa:	401a      	ands	r2, r3
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	210f      	movs	r1, #15
 8001302:	fa01 f303 	lsl.w	r3, r1, r3
 8001306:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	fa93 f3a3 	rbit	r3, r3
 800130e:	617b      	str	r3, [r7, #20]
  return result;
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d101      	bne.n	800131e <LL_DMA_SetPeriphRequest+0x42>
    return 32U;
 800131a:	2320      	movs	r3, #32
 800131c:	e003      	b.n	8001326 <LL_DMA_SetPeriphRequest+0x4a>
  return __builtin_clz(value);
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	fab3 f383 	clz	r3, r3
 8001324:	b2db      	uxtb	r3, r3
 8001326:	4619      	mov	r1, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	408b      	lsls	r3, r1
 800132c:	68f9      	ldr	r1, [r7, #12]
 800132e:	31a8      	adds	r1, #168	; 0xa8
 8001330:	4313      	orrs	r3, r2
 8001332:	600b      	str	r3, [r1, #0]
}
 8001334:	bf00      	nop
 8001336:	3724      	adds	r7, #36	; 0x24
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <LL_AHB2_GRP1_EnableClock>:
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001348:	4b08      	ldr	r3, [pc, #32]	; (800136c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800134a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800134c:	4907      	ldr	r1, [pc, #28]	; (800136c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4313      	orrs	r3, r2
 8001352:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001354:	4b05      	ldr	r3, [pc, #20]	; (800136c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001356:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4013      	ands	r3, r2
 800135c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800135e:	68fb      	ldr	r3, [r7, #12]
}
 8001360:	bf00      	nop
 8001362:	3714      	adds	r7, #20
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	40021000 	.word	0x40021000

08001370 <LL_APB1_GRP1_EnableClock>:
{
 8001370:	b480      	push	{r7}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001378:	4b08      	ldr	r3, [pc, #32]	; (800139c <LL_APB1_GRP1_EnableClock+0x2c>)
 800137a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800137c:	4907      	ldr	r1, [pc, #28]	; (800139c <LL_APB1_GRP1_EnableClock+0x2c>)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4313      	orrs	r3, r2
 8001382:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001384:	4b05      	ldr	r3, [pc, #20]	; (800139c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001386:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	4013      	ands	r3, r2
 800138c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800138e:	68fb      	ldr	r3, [r7, #12]
}
 8001390:	bf00      	nop
 8001392:	3714      	adds	r7, #20
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr
 800139c:	40021000 	.word	0x40021000

080013a0 <LL_SPI_Enable>:
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	601a      	str	r2, [r3, #0]
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <LL_SPI_Disable>:
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	601a      	str	r2, [r3, #0]
}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <LL_SPI_SetStandard>:
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f023 0210 	bic.w	r2, r3, #16
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	431a      	orrs	r2, r3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	605a      	str	r2, [r3, #4]
}
 80013fa:	bf00      	nop
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr

08001406 <LL_SPI_DisableNSSPulseMgt>:
{
 8001406:	b480      	push	{r7}
 8001408:	b083      	sub	sp, #12
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f023 0208 	bic.w	r2, r3, #8
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	605a      	str	r2, [r3, #4]
}
 800141a:	bf00      	nop
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr

08001426 <LL_SPI_IsActiveFlag_RXNE>:
{
 8001426:	b480      	push	{r7}
 8001428:	b083      	sub	sp, #12
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	2b01      	cmp	r3, #1
 8001438:	d101      	bne.n	800143e <LL_SPI_IsActiveFlag_RXNE+0x18>
 800143a:	2301      	movs	r3, #1
 800143c:	e000      	b.n	8001440 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 800143e:	2300      	movs	r3, #0
}
 8001440:	4618      	mov	r0, r3
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <LL_SPI_IsActiveFlag_TXE>:
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	f003 0302 	and.w	r3, r3, #2
 800145c:	2b02      	cmp	r3, #2
 800145e:	d101      	bne.n	8001464 <LL_SPI_IsActiveFlag_TXE+0x18>
 8001460:	2301      	movs	r3, #1
 8001462:	e000      	b.n	8001466 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr

08001472 <LL_SPI_IsActiveFlag_BSY>:
{
 8001472:	b480      	push	{r7}
 8001474:	b083      	sub	sp, #12
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001482:	2b80      	cmp	r3, #128	; 0x80
 8001484:	d101      	bne.n	800148a <LL_SPI_IsActiveFlag_BSY+0x18>
 8001486:	2301      	movs	r3, #1
 8001488:	e000      	b.n	800148c <LL_SPI_IsActiveFlag_BSY+0x1a>
 800148a:	2300      	movs	r3, #0
}
 800148c:	4618      	mov	r0, r3
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <LL_SPI_GetTxFIFOLevel>:
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(SPIx->SR, SPI_SR_FTLVL));
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <LL_SPI_EnableIT_RXNE>:
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_RXNEIE);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	605a      	str	r2, [r3, #4]
}
 80014c8:	bf00      	nop
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <LL_SPI_EnableIT_TXE>:
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	605a      	str	r2, [r3, #4]
}
 80014e8:	bf00      	nop
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <LL_SPI_EnableDMAReq_RX>:
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_RXDMAEN);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f043 0201 	orr.w	r2, r3, #1
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	605a      	str	r2, [r3, #4]
}
 8001508:	bf00      	nop
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <LL_SPI_DisableDMAReq_RX>:
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_RXDMAEN);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f023 0201 	bic.w	r2, r3, #1
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	605a      	str	r2, [r3, #4]
}
 8001528:	bf00      	nop
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <LL_SPI_EnableDMAReq_TX>:
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_TXDMAEN);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f043 0202 	orr.w	r2, r3, #2
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	605a      	str	r2, [r3, #4]
}
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <LL_SPI_DisableDMAReq_TX>:
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXDMAEN);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f023 0202 	bic.w	r2, r3, #2
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	605a      	str	r2, [r3, #4]
}
 8001568:	bf00      	nop
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	330c      	adds	r3, #12
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	b2db      	uxtb	r3, r3
}
 8001584:	4618      	mov	r0, r3
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8001590:	b480      	push	{r7}
 8001592:	b085      	sub	sp, #20
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	460b      	mov	r3, r1
 800159a:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	330c      	adds	r3, #12
 80015a0:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	78fa      	ldrb	r2, [r7, #3]
 80015a6:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 80015a8:	bf00      	nop
 80015aa:	3714      	adds	r7, #20
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <LL_GPIO_ResetOutputPin>:
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	683a      	ldr	r2, [r7, #0]
 80015c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015c4:	bf00      	nop
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <MX_SPI3_Init>:

/* USER CODE END 0 */

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b090      	sub	sp, #64	; 0x40
 80015d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80015d6:	f107 0318 	add.w	r3, r7, #24
 80015da:	2228      	movs	r2, #40	; 0x28
 80015dc:	2100      	movs	r1, #0
 80015de:	4618      	mov	r0, r3
 80015e0:	f001 f81c 	bl	800261c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e4:	463b      	mov	r3, r7
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	605a      	str	r2, [r3, #4]
 80015ec:	609a      	str	r2, [r3, #8]
 80015ee:	60da      	str	r2, [r3, #12]
 80015f0:	611a      	str	r2, [r3, #16]
 80015f2:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 80015f4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80015f8:	f7ff feba 	bl	8001370 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80015fc:	2004      	movs	r0, #4
 80015fe:	f7ff fe9f 	bl	8001340 <LL_AHB2_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PC10   ------> SPI3_SCK
  PC11   ------> SPI3_MISO
  PC12   ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 8001602:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001606:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001608:	2302      	movs	r3, #2
 800160a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800160c:	2303      	movs	r3, #3
 800160e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001610:	2300      	movs	r3, #0
 8001612:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001614:	2300      	movs	r3, #0
 8001616:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8001618:	2306      	movs	r3, #6
 800161a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800161c:	463b      	mov	r3, r7
 800161e:	4619      	mov	r1, r3
 8001620:	483d      	ldr	r0, [pc, #244]	; (8001718 <MX_SPI3_Init+0x148>)
 8001622:	f000 fdd5 	bl	80021d0 <LL_GPIO_Init>

  /* SPI3 DMA Init */

  /* SPI3_RX Init */
  LL_DMA_SetPeriphRequest(DMA2, LL_DMA_CHANNEL_1, LL_DMA_REQUEST_3);
 8001626:	2203      	movs	r2, #3
 8001628:	2100      	movs	r1, #0
 800162a:	483c      	ldr	r0, [pc, #240]	; (800171c <MX_SPI3_Init+0x14c>)
 800162c:	f7ff fe56 	bl	80012dc <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8001630:	2200      	movs	r2, #0
 8001632:	2100      	movs	r1, #0
 8001634:	4839      	ldr	r0, [pc, #228]	; (800171c <MX_SPI3_Init+0x14c>)
 8001636:	f7ff fd45 	bl	80010c4 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA2, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_LOW);
 800163a:	2200      	movs	r2, #0
 800163c:	2100      	movs	r1, #0
 800163e:	4837      	ldr	r0, [pc, #220]	; (800171c <MX_SPI3_Init+0x14c>)
 8001640:	f7ff fe26 	bl	8001290 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_CHANNEL_1, LL_DMA_MODE_NORMAL);
 8001644:	2200      	movs	r2, #0
 8001646:	2100      	movs	r1, #0
 8001648:	4834      	ldr	r0, [pc, #208]	; (800171c <MX_SPI3_Init+0x14c>)
 800164a:	f7ff fd63 	bl	8001114 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 800164e:	2200      	movs	r2, #0
 8001650:	2100      	movs	r1, #0
 8001652:	4832      	ldr	r0, [pc, #200]	; (800171c <MX_SPI3_Init+0x14c>)
 8001654:	f7ff fd84 	bl	8001160 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 8001658:	2280      	movs	r2, #128	; 0x80
 800165a:	2100      	movs	r1, #0
 800165c:	482f      	ldr	r0, [pc, #188]	; (800171c <MX_SPI3_Init+0x14c>)
 800165e:	f7ff fda5 	bl	80011ac <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_BYTE);
 8001662:	2200      	movs	r2, #0
 8001664:	2100      	movs	r1, #0
 8001666:	482d      	ldr	r0, [pc, #180]	; (800171c <MX_SPI3_Init+0x14c>)
 8001668:	f7ff fdc6 	bl	80011f8 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_BYTE);
 800166c:	2200      	movs	r2, #0
 800166e:	2100      	movs	r1, #0
 8001670:	482a      	ldr	r0, [pc, #168]	; (800171c <MX_SPI3_Init+0x14c>)
 8001672:	f7ff fde7 	bl	8001244 <LL_DMA_SetMemorySize>

  /* SPI3_TX Init */
  LL_DMA_SetPeriphRequest(DMA2, LL_DMA_CHANNEL_2, LL_DMA_REQUEST_3);
 8001676:	2203      	movs	r2, #3
 8001678:	2101      	movs	r1, #1
 800167a:	4828      	ldr	r0, [pc, #160]	; (800171c <MX_SPI3_Init+0x14c>)
 800167c:	f7ff fe2e 	bl	80012dc <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_CHANNEL_2, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8001680:	2210      	movs	r2, #16
 8001682:	2101      	movs	r1, #1
 8001684:	4825      	ldr	r0, [pc, #148]	; (800171c <MX_SPI3_Init+0x14c>)
 8001686:	f7ff fd1d 	bl	80010c4 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA2, LL_DMA_CHANNEL_2, LL_DMA_PRIORITY_LOW);
 800168a:	2200      	movs	r2, #0
 800168c:	2101      	movs	r1, #1
 800168e:	4823      	ldr	r0, [pc, #140]	; (800171c <MX_SPI3_Init+0x14c>)
 8001690:	f7ff fdfe 	bl	8001290 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_CHANNEL_2, LL_DMA_MODE_NORMAL);
 8001694:	2200      	movs	r2, #0
 8001696:	2101      	movs	r1, #1
 8001698:	4820      	ldr	r0, [pc, #128]	; (800171c <MX_SPI3_Init+0x14c>)
 800169a:	f7ff fd3b 	bl	8001114 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_CHANNEL_2, LL_DMA_PERIPH_NOINCREMENT);
 800169e:	2200      	movs	r2, #0
 80016a0:	2101      	movs	r1, #1
 80016a2:	481e      	ldr	r0, [pc, #120]	; (800171c <MX_SPI3_Init+0x14c>)
 80016a4:	f7ff fd5c 	bl	8001160 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_CHANNEL_2, LL_DMA_MEMORY_INCREMENT);
 80016a8:	2280      	movs	r2, #128	; 0x80
 80016aa:	2101      	movs	r1, #1
 80016ac:	481b      	ldr	r0, [pc, #108]	; (800171c <MX_SPI3_Init+0x14c>)
 80016ae:	f7ff fd7d 	bl	80011ac <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_CHANNEL_2, LL_DMA_PDATAALIGN_BYTE);
 80016b2:	2200      	movs	r2, #0
 80016b4:	2101      	movs	r1, #1
 80016b6:	4819      	ldr	r0, [pc, #100]	; (800171c <MX_SPI3_Init+0x14c>)
 80016b8:	f7ff fd9e 	bl	80011f8 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_CHANNEL_2, LL_DMA_MDATAALIGN_BYTE);
 80016bc:	2200      	movs	r2, #0
 80016be:	2101      	movs	r1, #1
 80016c0:	4816      	ldr	r0, [pc, #88]	; (800171c <MX_SPI3_Init+0x14c>)
 80016c2:	f7ff fdbf 	bl	8001244 <LL_DMA_SetMemorySize>

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80016c6:	2300      	movs	r3, #0
 80016c8:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80016ca:	f44f 7382 	mov.w	r3, #260	; 0x104
 80016ce:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80016d0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80016d4:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80016d6:	2302      	movs	r3, #2
 80016d8:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80016da:	2301      	movs	r3, #1
 80016dc:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80016de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV32;
 80016e4:	2320      	movs	r3, #32
 80016e6:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80016e8:	2300      	movs	r3, #0
 80016ea:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80016ec:	2300      	movs	r3, #0
 80016ee:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 80016f0:	2307      	movs	r3, #7
 80016f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 80016f4:	f107 0318 	add.w	r3, r7, #24
 80016f8:	4619      	mov	r1, r3
 80016fa:	4809      	ldr	r0, [pc, #36]	; (8001720 <MX_SPI3_Init+0x150>)
 80016fc:	f000 fe0c 	bl	8002318 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 8001700:	2100      	movs	r1, #0
 8001702:	4807      	ldr	r0, [pc, #28]	; (8001720 <MX_SPI3_Init+0x150>)
 8001704:	f7ff fe6c 	bl	80013e0 <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI3);
 8001708:	4805      	ldr	r0, [pc, #20]	; (8001720 <MX_SPI3_Init+0x150>)
 800170a:	f7ff fe7c 	bl	8001406 <LL_SPI_DisableNSSPulseMgt>
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800170e:	bf00      	nop
 8001710:	3740      	adds	r7, #64	; 0x40
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	48000800 	.word	0x48000800
 800171c:	40020400 	.word	0x40020400
 8001720:	40003c00 	.word	0x40003c00

08001724 <SPI_Enable_DMA_Rx_Request>:

/* USER CODE BEGIN 1 */

void SPI_Enable_DMA_Rx_Request(SPI_TypeDef *SPIx) {
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
	LL_SPI_EnableDMAReq_RX(SPIx);
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f7ff fee1 	bl	80014f4 <LL_SPI_EnableDMAReq_RX>
}
 8001732:	bf00      	nop
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <SPI_Enable_DMA_Tx_Request>:

void SPI_Enable_DMA_Tx_Request(SPI_TypeDef *SPIx) {
 800173a:	b580      	push	{r7, lr}
 800173c:	b082      	sub	sp, #8
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
	LL_SPI_EnableDMAReq_TX(SPIx);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f7ff fef6 	bl	8001534 <LL_SPI_EnableDMAReq_TX>
}
 8001748:	bf00      	nop
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <SPI_Disable_DMA_Requests>:

void SPI_Disable_DMA_Requests(SPI_TypeDef *SPIx) {
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
	LL_SPI_DisableDMAReq_RX(SPIx);
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f7ff fedb 	bl	8001514 <LL_SPI_DisableDMAReq_RX>
	LL_SPI_DisableDMAReq_TX(SPIx);
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f7ff fef8 	bl	8001554 <LL_SPI_DisableDMAReq_TX>
}
 8001764:	bf00      	nop
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <SPI_Enable_RXNE_TXE_Interrupts>:

void SPI_Enable_RXNE_TXE_Interrupts(SPI_TypeDef *SPIx) {
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
	LL_SPI_EnableIT_RXNE(SPIx);
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f7ff fe9d 	bl	80014b4 <LL_SPI_EnableIT_RXNE>
	LL_SPI_EnableIT_TXE(SPIx);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f7ff feaa 	bl	80014d4 <LL_SPI_EnableIT_TXE>
}
 8001780:	bf00      	nop
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <SPI_Start_Transfer>:

void SPI_Start_Transfer(SPI_TypeDef *SPIx) {
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
	LL_GPIO_ResetOutputPin(ADC_CS_GPIOx, ADC_CS_PIN);
 8001790:	2102      	movs	r1, #2
 8001792:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001796:	f7ff ff0d 	bl	80015b4 <LL_GPIO_ResetOutputPin>
	LL_SPI_Enable(SPIx);
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f7ff fe00 	bl	80013a0 <LL_SPI_Enable>
}
 80017a0:	bf00      	nop
 80017a2:	3708      	adds	r7, #8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <SPI_TransmitReceive>:


void SPI_TransmitReceive(SPI_TypeDef *SPIx, uint8_t len, uint8_t *tx_buffer, uint8_t *rx_buffer) {
 80017a8:	b590      	push	{r4, r7, lr}
 80017aa:	b087      	sub	sp, #28
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	607a      	str	r2, [r7, #4]
 80017b2:	603b      	str	r3, [r7, #0]
 80017b4:	460b      	mov	r3, r1
 80017b6:	72fb      	strb	r3, [r7, #11]
	LL_SPI_Enable(SPIx);
 80017b8:	68f8      	ldr	r0, [r7, #12]
 80017ba:	f7ff fdf1 	bl	80013a0 <LL_SPI_Enable>

	LL_SPI_TransmitData8(SPIx, tx_buffer[0]);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	4619      	mov	r1, r3
 80017c4:	68f8      	ldr	r0, [r7, #12]
 80017c6:	f7ff fee3 	bl	8001590 <LL_SPI_TransmitData8>

	for (int i = 0; i < len - 1; i++) {
 80017ca:	2300      	movs	r3, #0
 80017cc:	617b      	str	r3, [r7, #20]
 80017ce:	e021      	b.n	8001814 <SPI_TransmitReceive+0x6c>
	  while ( !LL_SPI_IsActiveFlag_TXE(SPIx) ); // wait until TXE is set
 80017d0:	bf00      	nop
 80017d2:	68f8      	ldr	r0, [r7, #12]
 80017d4:	f7ff fe3a 	bl	800144c <LL_SPI_IsActiveFlag_TXE>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d0f9      	beq.n	80017d2 <SPI_TransmitReceive+0x2a>
	  LL_SPI_TransmitData8(SPIx, tx_buffer[i + 1]);
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	3301      	adds	r3, #1
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	4413      	add	r3, r2
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	4619      	mov	r1, r3
 80017ea:	68f8      	ldr	r0, [r7, #12]
 80017ec:	f7ff fed0 	bl	8001590 <LL_SPI_TransmitData8>
	  while ( !LL_SPI_IsActiveFlag_RXNE(SPIx) ); // wait until RXNE is set
 80017f0:	bf00      	nop
 80017f2:	68f8      	ldr	r0, [r7, #12]
 80017f4:	f7ff fe17 	bl	8001426 <LL_SPI_IsActiveFlag_RXNE>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d0f9      	beq.n	80017f2 <SPI_TransmitReceive+0x4a>
	  rx_buffer[i] = LL_SPI_ReceiveData8(SPIx); // read DR (clears RXNE)
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	683a      	ldr	r2, [r7, #0]
 8001802:	18d4      	adds	r4, r2, r3
 8001804:	68f8      	ldr	r0, [r7, #12]
 8001806:	f7ff feb5 	bl	8001574 <LL_SPI_ReceiveData8>
 800180a:	4603      	mov	r3, r0
 800180c:	7023      	strb	r3, [r4, #0]
	for (int i = 0; i < len - 1; i++) {
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	3301      	adds	r3, #1
 8001812:	617b      	str	r3, [r7, #20]
 8001814:	7afb      	ldrb	r3, [r7, #11]
 8001816:	3b01      	subs	r3, #1
 8001818:	697a      	ldr	r2, [r7, #20]
 800181a:	429a      	cmp	r2, r3
 800181c:	dbd8      	blt.n	80017d0 <SPI_TransmitReceive+0x28>
	}

	while ( !LL_SPI_IsActiveFlag_RXNE(SPIx) ); // wait until RXNE is set
 800181e:	bf00      	nop
 8001820:	68f8      	ldr	r0, [r7, #12]
 8001822:	f7ff fe00 	bl	8001426 <LL_SPI_IsActiveFlag_RXNE>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d0f9      	beq.n	8001820 <SPI_TransmitReceive+0x78>
	rx_buffer[len - 1] = LL_SPI_ReceiveData8(SPIx); // read DR (clears RXNE)
 800182c:	7afb      	ldrb	r3, [r7, #11]
 800182e:	3b01      	subs	r3, #1
 8001830:	683a      	ldr	r2, [r7, #0]
 8001832:	18d4      	adds	r4, r2, r3
 8001834:	68f8      	ldr	r0, [r7, #12]
 8001836:	f7ff fe9d 	bl	8001574 <LL_SPI_ReceiveData8>
 800183a:	4603      	mov	r3, r0
 800183c:	7023      	strb	r3, [r4, #0]
}
 800183e:	bf00      	nop
 8001840:	371c      	adds	r7, #28
 8001842:	46bd      	mov	sp, r7
 8001844:	bd90      	pop	{r4, r7, pc}

08001846 <SPI_Disable>:

void SPI_Disable(SPI_TypeDef *SPIx) {
 8001846:	b580      	push	{r7, lr}
 8001848:	b082      	sub	sp, #8
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
	while (LL_SPI_GetTxFIFOLevel(SPIx) != LL_SPI_TX_FIFO_EMPTY); // wait for TX FIFO to become empty
 800184e:	bf00      	nop
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f7ff fe21 	bl	8001498 <LL_SPI_GetTxFIFOLevel>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d1f9      	bne.n	8001850 <SPI_Disable+0xa>
	while (LL_SPI_IsActiveFlag_BSY(SPIx)); // wait for BSY flag to go low
 800185c:	bf00      	nop
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f7ff fe07 	bl	8001472 <LL_SPI_IsActiveFlag_BSY>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d1f9      	bne.n	800185e <SPI_Disable+0x18>
	LL_SPI_Disable(SPIx);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f7ff fda8 	bl	80013c0 <LL_SPI_Disable>
}
 8001870:	bf00      	nop
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8001880:	4b07      	ldr	r3, [pc, #28]	; (80018a0 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8001882:	695a      	ldr	r2, [r3, #20]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4013      	ands	r3, r2
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	429a      	cmp	r2, r3
 800188c:	d101      	bne.n	8001892 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 800188e:	2301      	movs	r3, #1
 8001890:	e000      	b.n	8001894 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8001892:	2300      	movs	r3, #0
}
 8001894:	4618      	mov	r0, r3
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	40010400 	.word	0x40010400

080018a4 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80018ac:	4a04      	ldr	r2, [pc, #16]	; (80018c0 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6153      	str	r3, [r2, #20]
}
 80018b2:	bf00      	nop
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	40010400 	.word	0x40010400

080018c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018c8:	e7fe      	b.n	80018c8 <NMI_Handler+0x4>

080018ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ca:	b480      	push	{r7}
 80018cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ce:	e7fe      	b.n	80018ce <HardFault_Handler+0x4>

080018d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018d4:	e7fe      	b.n	80018d4 <MemManage_Handler+0x4>

080018d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018d6:	b480      	push	{r7}
 80018d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018da:	e7fe      	b.n	80018da <BusFault_Handler+0x4>

080018dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018e0:	e7fe      	b.n	80018e0 <UsageFault_Handler+0x4>

080018e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018e2:	b480      	push	{r7}
 80018e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018f4:	bf00      	nop
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr

080018fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018fe:	b480      	push	{r7}
 8001900:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001910:	bf00      	nop
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_4) != RESET)
 800191e:	2010      	movs	r0, #16
 8001920:	f7ff ffaa 	bl	8001878 <LL_EXTI_IsActiveFlag_0_31>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d004      	beq.n	8001934 <EXTI4_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_4);
 800192a:	2010      	movs	r0, #16
 800192c:	f7ff ffba 	bl	80018a4 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_4 */
    ADC_DRDY_interrupt_handler();
 8001930:	f7fe fd02 	bl	8000338 <ADC_DRDY_interrupt_handler>
    /* USER CODE END LL_EXTI_LINE_4 */
  }
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001934:	bf00      	nop
 8001936:	bd80      	pop	{r7, pc}

08001938 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */
	DMA_Transfer_Complete_RX_interrupt_handler();
 800193c:	f7fe ff8e 	bl	800085c <DMA_Transfer_Complete_RX_interrupt_handler>
  /* USER CODE END DMA2_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8001940:	bf00      	nop
 8001942:	bd80      	pop	{r7, pc}

08001944 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */
	DMA_Transfer_Complete_TX_interrupt_handler();
 8001948:	f7fe ffa8 	bl	800089c <DMA_Transfer_Complete_TX_interrupt_handler>
  /* USER CODE END DMA2_Channel2_IRQn 0 */

  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 800194c:	bf00      	nop
 800194e:	bd80      	pop	{r7, pc}

08001950 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001954:	4b06      	ldr	r3, [pc, #24]	; (8001970 <SystemInit+0x20>)
 8001956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800195a:	4a05      	ldr	r2, [pc, #20]	; (8001970 <SystemInit+0x20>)
 800195c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001960:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001964:	bf00      	nop
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	e000ed00 	.word	0xe000ed00

08001974 <LL_APB1_GRP1_EnableClock>:
{
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800197c:	4b08      	ldr	r3, [pc, #32]	; (80019a0 <LL_APB1_GRP1_EnableClock+0x2c>)
 800197e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001980:	4907      	ldr	r1, [pc, #28]	; (80019a0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4313      	orrs	r3, r2
 8001986:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001988:	4b05      	ldr	r3, [pc, #20]	; (80019a0 <LL_APB1_GRP1_EnableClock+0x2c>)
 800198a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4013      	ands	r3, r2
 8001990:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001992:	68fb      	ldr	r3, [r7, #12]
}
 8001994:	bf00      	nop
 8001996:	3714      	adds	r7, #20
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	40021000 	.word	0x40021000

080019a4 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	601a      	str	r2, [r3, #0]
}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80019d6:	f023 0307 	bic.w	r3, r3, #7
 80019da:	683a      	ldr	r2, [r7, #0]
 80019dc:	431a      	orrs	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	609a      	str	r2, [r3, #8]
}
 80019e2:	bf00      	nop
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 80019ee:	b480      	push	{r7}
 80019f0:	b083      	sub	sp, #12
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
 80019f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	431a      	orrs	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	605a      	str	r2, [r3, #4]
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	609a      	str	r2, [r3, #8]
}
 8001a28:	bf00      	nop
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001a3a:	1d3b      	adds	r3, r7, #4
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	60da      	str	r2, [r3, #12]
 8001a46:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8001a48:	2001      	movs	r0, #1
 8001a4a:	f7ff ff93 	bl	8001974 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001a52:	2300      	movs	r3, #0
 8001a54:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 16;
 8001a56:	2310      	movs	r3, #16
 8001a58:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8001a5e:	1d3b      	adds	r3, r7, #4
 8001a60:	4619      	mov	r1, r3
 8001a62:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001a66:	f000 fce9 	bl	800243c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8001a6a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001a6e:	f7ff ff99 	bl	80019a4 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001a72:	2100      	movs	r1, #0
 8001a74:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001a78:	f7ff ffa4 	bl	80019c4 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001a82:	f7ff ffb4 	bl	80019ee <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8001a86:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001a8a:	f7ff ffc3 	bl	8001a14 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a8e:	bf00      	nop
 8001a90:	3718      	adds	r7, #24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
	...

08001a98 <Reset_Handler>:
 8001a98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ad0 <LoopForever+0x2>
 8001a9c:	f7ff ff58 	bl	8001950 <SystemInit>
 8001aa0:	480c      	ldr	r0, [pc, #48]	; (8001ad4 <LoopForever+0x6>)
 8001aa2:	490d      	ldr	r1, [pc, #52]	; (8001ad8 <LoopForever+0xa>)
 8001aa4:	4a0d      	ldr	r2, [pc, #52]	; (8001adc <LoopForever+0xe>)
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	e002      	b.n	8001ab0 <LoopCopyDataInit>

08001aaa <CopyDataInit>:
 8001aaa:	58d4      	ldr	r4, [r2, r3]
 8001aac:	50c4      	str	r4, [r0, r3]
 8001aae:	3304      	adds	r3, #4

08001ab0 <LoopCopyDataInit>:
 8001ab0:	18c4      	adds	r4, r0, r3
 8001ab2:	428c      	cmp	r4, r1
 8001ab4:	d3f9      	bcc.n	8001aaa <CopyDataInit>
 8001ab6:	4a0a      	ldr	r2, [pc, #40]	; (8001ae0 <LoopForever+0x12>)
 8001ab8:	4c0a      	ldr	r4, [pc, #40]	; (8001ae4 <LoopForever+0x16>)
 8001aba:	2300      	movs	r3, #0
 8001abc:	e001      	b.n	8001ac2 <LoopFillZerobss>

08001abe <FillZerobss>:
 8001abe:	6013      	str	r3, [r2, #0]
 8001ac0:	3204      	adds	r2, #4

08001ac2 <LoopFillZerobss>:
 8001ac2:	42a2      	cmp	r2, r4
 8001ac4:	d3fb      	bcc.n	8001abe <FillZerobss>
 8001ac6:	f000 fd85 	bl	80025d4 <__libc_init_array>
 8001aca:	f7ff fa85 	bl	8000fd8 <main>

08001ace <LoopForever>:
 8001ace:	e7fe      	b.n	8001ace <LoopForever>
 8001ad0:	20018000 	.word	0x20018000
 8001ad4:	20000000 	.word	0x20000000
 8001ad8:	20000004 	.word	0x20000004
 8001adc:	0800265c 	.word	0x0800265c
 8001ae0:	20000004 	.word	0x20000004
 8001ae4:	20003c50 	.word	0x20003c50

08001ae8 <ADC1_2_IRQHandler>:
 8001ae8:	e7fe      	b.n	8001ae8 <ADC1_2_IRQHandler>
	...

08001aec <LL_EXTI_EnableIT_0_31>:
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001af4:	4b05      	ldr	r3, [pc, #20]	; (8001b0c <LL_EXTI_EnableIT_0_31+0x20>)
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	4904      	ldr	r1, [pc, #16]	; (8001b0c <LL_EXTI_EnableIT_0_31+0x20>)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	600b      	str	r3, [r1, #0]
}
 8001b00:	bf00      	nop
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	40010400 	.word	0x40010400

08001b10 <LL_EXTI_EnableIT_32_63>:
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001b18:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <LL_EXTI_EnableIT_32_63+0x20>)
 8001b1a:	6a1a      	ldr	r2, [r3, #32]
 8001b1c:	4904      	ldr	r1, [pc, #16]	; (8001b30 <LL_EXTI_EnableIT_32_63+0x20>)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	620b      	str	r3, [r1, #32]
}
 8001b24:	bf00      	nop
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr
 8001b30:	40010400 	.word	0x40010400

08001b34 <LL_EXTI_DisableIT_0_31>:
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8001b3c:	4b06      	ldr	r3, [pc, #24]	; (8001b58 <LL_EXTI_DisableIT_0_31+0x24>)
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	43db      	mvns	r3, r3
 8001b44:	4904      	ldr	r1, [pc, #16]	; (8001b58 <LL_EXTI_DisableIT_0_31+0x24>)
 8001b46:	4013      	ands	r3, r2
 8001b48:	600b      	str	r3, [r1, #0]
}
 8001b4a:	bf00      	nop
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	40010400 	.word	0x40010400

08001b5c <LL_EXTI_DisableIT_32_63>:
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8001b64:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <LL_EXTI_DisableIT_32_63+0x24>)
 8001b66:	6a1a      	ldr	r2, [r3, #32]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	4904      	ldr	r1, [pc, #16]	; (8001b80 <LL_EXTI_DisableIT_32_63+0x24>)
 8001b6e:	4013      	ands	r3, r2
 8001b70:	620b      	str	r3, [r1, #32]
}
 8001b72:	bf00      	nop
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	40010400 	.word	0x40010400

08001b84 <LL_EXTI_EnableEvent_0_31>:
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8001b8c:	4b05      	ldr	r3, [pc, #20]	; (8001ba4 <LL_EXTI_EnableEvent_0_31+0x20>)
 8001b8e:	685a      	ldr	r2, [r3, #4]
 8001b90:	4904      	ldr	r1, [pc, #16]	; (8001ba4 <LL_EXTI_EnableEvent_0_31+0x20>)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	604b      	str	r3, [r1, #4]
}
 8001b98:	bf00      	nop
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr
 8001ba4:	40010400 	.word	0x40010400

08001ba8 <LL_EXTI_EnableEvent_32_63>:
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8001bb0:	4b05      	ldr	r3, [pc, #20]	; (8001bc8 <LL_EXTI_EnableEvent_32_63+0x20>)
 8001bb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bb4:	4904      	ldr	r1, [pc, #16]	; (8001bc8 <LL_EXTI_EnableEvent_32_63+0x20>)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001bbc:	bf00      	nop
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr
 8001bc8:	40010400 	.word	0x40010400

08001bcc <LL_EXTI_DisableEvent_0_31>:
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8001bd4:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <LL_EXTI_DisableEvent_0_31+0x24>)
 8001bd6:	685a      	ldr	r2, [r3, #4]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	4904      	ldr	r1, [pc, #16]	; (8001bf0 <LL_EXTI_DisableEvent_0_31+0x24>)
 8001bde:	4013      	ands	r3, r2
 8001be0:	604b      	str	r3, [r1, #4]
}
 8001be2:	bf00      	nop
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	40010400 	.word	0x40010400

08001bf4 <LL_EXTI_DisableEvent_32_63>:
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8001bfc:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <LL_EXTI_DisableEvent_32_63+0x24>)
 8001bfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	43db      	mvns	r3, r3
 8001c04:	4904      	ldr	r1, [pc, #16]	; (8001c18 <LL_EXTI_DisableEvent_32_63+0x24>)
 8001c06:	4013      	ands	r3, r2
 8001c08:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	40010400 	.word	0x40010400

08001c1c <LL_EXTI_EnableRisingTrig_0_31>:
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001c24:	4b05      	ldr	r3, [pc, #20]	; (8001c3c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001c26:	689a      	ldr	r2, [r3, #8]
 8001c28:	4904      	ldr	r1, [pc, #16]	; (8001c3c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	608b      	str	r3, [r1, #8]
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	40010400 	.word	0x40010400

08001c40 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8001c48:	4b05      	ldr	r3, [pc, #20]	; (8001c60 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8001c4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c4c:	4904      	ldr	r1, [pc, #16]	; (8001c60 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	628b      	str	r3, [r1, #40]	; 0x28
}
 8001c54:	bf00      	nop
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	40010400 	.word	0x40010400

08001c64 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8001c6c:	4b06      	ldr	r3, [pc, #24]	; (8001c88 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	43db      	mvns	r3, r3
 8001c74:	4904      	ldr	r1, [pc, #16]	; (8001c88 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001c76:	4013      	ands	r3, r2
 8001c78:	608b      	str	r3, [r1, #8]
}
 8001c7a:	bf00      	nop
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	40010400 	.word	0x40010400

08001c8c <LL_EXTI_DisableRisingTrig_32_63>:
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8001c94:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8001c96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	43db      	mvns	r3, r3
 8001c9c:	4904      	ldr	r1, [pc, #16]	; (8001cb0 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	628b      	str	r3, [r1, #40]	; 0x28
}
 8001ca2:	bf00      	nop
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	40010400 	.word	0x40010400

08001cb4 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8001cbc:	4b05      	ldr	r3, [pc, #20]	; (8001cd4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001cbe:	68da      	ldr	r2, [r3, #12]
 8001cc0:	4904      	ldr	r1, [pc, #16]	; (8001cd4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	60cb      	str	r3, [r1, #12]
}
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr
 8001cd4:	40010400 	.word	0x40010400

08001cd8 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8001ce0:	4b05      	ldr	r3, [pc, #20]	; (8001cf8 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8001ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ce4:	4904      	ldr	r1, [pc, #16]	; (8001cf8 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	40010400 	.word	0x40010400

08001cfc <LL_EXTI_DisableFallingTrig_0_31>:
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8001d04:	4b06      	ldr	r3, [pc, #24]	; (8001d20 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001d06:	68da      	ldr	r2, [r3, #12]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	43db      	mvns	r3, r3
 8001d0c:	4904      	ldr	r1, [pc, #16]	; (8001d20 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001d0e:	4013      	ands	r3, r2
 8001d10:	60cb      	str	r3, [r1, #12]
}
 8001d12:	bf00      	nop
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	40010400 	.word	0x40010400

08001d24 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8001d2c:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8001d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	43db      	mvns	r3, r3
 8001d34:	4904      	ldr	r1, [pc, #16]	; (8001d48 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8001d36:	4013      	ands	r3, r2
 8001d38:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8001d3a:	bf00      	nop
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	40010400 	.word	0x40010400

08001d4c <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other value : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 8001d54:	2300      	movs	r3, #0
 8001d56:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	7a1b      	ldrb	r3, [r3, #8]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	f000 80d1 	beq.w	8001f04 <LL_EXTI_Init+0x1b8>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d063      	beq.n	8001e32 <LL_EXTI_Init+0xe6>
    {
      switch (EXTI_InitStruct->Mode)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	7a5b      	ldrb	r3, [r3, #9]
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d01c      	beq.n	8001dac <LL_EXTI_Init+0x60>
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	dc25      	bgt.n	8001dc2 <LL_EXTI_Init+0x76>
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d002      	beq.n	8001d80 <LL_EXTI_Init+0x34>
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d00b      	beq.n	8001d96 <LL_EXTI_Init+0x4a>
 8001d7e:	e020      	b.n	8001dc2 <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff ff21 	bl	8001bcc <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff feac 	bl	8001aec <LL_EXTI_EnableIT_0_31>
          break;
 8001d94:	e018      	b.n	8001dc8 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff feca 	bl	8001b34 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff feed 	bl	8001b84 <LL_EXTI_EnableEvent_0_31>
          break;
 8001daa:	e00d      	b.n	8001dc8 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff fe9b 	bl	8001aec <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7ff fee2 	bl	8001b84 <LL_EXTI_EnableEvent_0_31>
          break;
 8001dc0:	e002      	b.n	8001dc8 <LL_EXTI_Init+0x7c>
        default:
          status = 0x01u;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	60fb      	str	r3, [r7, #12]
          break;
 8001dc6:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	7a9b      	ldrb	r3, [r3, #10]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d030      	beq.n	8001e32 <LL_EXTI_Init+0xe6>
      {
        switch (EXTI_InitStruct->Trigger)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	7a9b      	ldrb	r3, [r3, #10]
 8001dd4:	2b03      	cmp	r3, #3
 8001dd6:	d01c      	beq.n	8001e12 <LL_EXTI_Init+0xc6>
 8001dd8:	2b03      	cmp	r3, #3
 8001dda:	dc25      	bgt.n	8001e28 <LL_EXTI_Init+0xdc>
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d002      	beq.n	8001de6 <LL_EXTI_Init+0x9a>
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d00b      	beq.n	8001dfc <LL_EXTI_Init+0xb0>
 8001de4:	e020      	b.n	8001e28 <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff ff86 	bl	8001cfc <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff ff11 	bl	8001c1c <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8001dfa:	e01b      	b.n	8001e34 <LL_EXTI_Init+0xe8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff ff2f 	bl	8001c64 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7ff ff52 	bl	8001cb4 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001e10:	e010      	b.n	8001e34 <LL_EXTI_Init+0xe8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff ff00 	bl	8001c1c <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff ff47 	bl	8001cb4 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001e26:	e005      	b.n	8001e34 <LL_EXTI_Init+0xe8>
          default:
            status |= 0x02u;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f043 0302 	orr.w	r3, r3, #2
 8001e2e:	60fb      	str	r3, [r7, #12]
            break;
 8001e30:	e000      	b.n	8001e34 <LL_EXTI_Init+0xe8>
        }
      }
 8001e32:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d078      	beq.n	8001f2e <LL_EXTI_Init+0x1e2>
    {
      switch (EXTI_InitStruct->Mode)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	7a5b      	ldrb	r3, [r3, #9]
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d01c      	beq.n	8001e7e <LL_EXTI_Init+0x132>
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	dc25      	bgt.n	8001e94 <LL_EXTI_Init+0x148>
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d002      	beq.n	8001e52 <LL_EXTI_Init+0x106>
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d00b      	beq.n	8001e68 <LL_EXTI_Init+0x11c>
 8001e50:	e020      	b.n	8001e94 <LL_EXTI_Init+0x148>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff fecc 	bl	8001bf4 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff fe55 	bl	8001b10 <LL_EXTI_EnableIT_32_63>
          break;
 8001e66:	e01a      	b.n	8001e9e <LL_EXTI_Init+0x152>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff fe75 	bl	8001b5c <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff fe96 	bl	8001ba8 <LL_EXTI_EnableEvent_32_63>
          break;
 8001e7c:	e00f      	b.n	8001e9e <LL_EXTI_Init+0x152>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7ff fe44 	bl	8001b10 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff fe8b 	bl	8001ba8 <LL_EXTI_EnableEvent_32_63>
          break;
 8001e92:	e004      	b.n	8001e9e <LL_EXTI_Init+0x152>
        default:
          status |= 0x04u;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f043 0304 	orr.w	r3, r3, #4
 8001e9a:	60fb      	str	r3, [r7, #12]
          break;
 8001e9c:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	7a9b      	ldrb	r3, [r3, #10]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d043      	beq.n	8001f2e <LL_EXTI_Init+0x1e2>
      {
        switch (EXTI_InitStruct->Trigger)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	7a9b      	ldrb	r3, [r3, #10]
 8001eaa:	2b03      	cmp	r3, #3
 8001eac:	d01c      	beq.n	8001ee8 <LL_EXTI_Init+0x19c>
 8001eae:	2b03      	cmp	r3, #3
 8001eb0:	dc25      	bgt.n	8001efe <LL_EXTI_Init+0x1b2>
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d002      	beq.n	8001ebc <LL_EXTI_Init+0x170>
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d00b      	beq.n	8001ed2 <LL_EXTI_Init+0x186>
 8001eba:	e020      	b.n	8001efe <LL_EXTI_Init+0x1b2>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff ff2f 	bl	8001d24 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7ff feb8 	bl	8001c40 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8001ed0:	e02e      	b.n	8001f30 <LL_EXTI_Init+0x1e4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff fed8 	bl	8001c8c <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff fef9 	bl	8001cd8 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8001ee6:	e023      	b.n	8001f30 <LL_EXTI_Init+0x1e4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff fea7 	bl	8001c40 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff feee 	bl	8001cd8 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8001efc:	e018      	b.n	8001f30 <LL_EXTI_Init+0x1e4>
          default:
            status = ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	60fb      	str	r3, [r7, #12]
            break;
 8001f02:	e015      	b.n	8001f30 <LL_EXTI_Init+0x1e4>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7ff fe13 	bl	8001b34 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7ff fe5a 	bl	8001bcc <LL_EXTI_DisableEvent_0_31>
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff fe1d 	bl	8001b5c <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff fe64 	bl	8001bf4 <LL_EXTI_DisableEvent_32_63>
 8001f2c:	e000      	b.n	8001f30 <LL_EXTI_Init+0x1e4>
      }
 8001f2e:	bf00      	nop
  }

  return status;
 8001f30:	68fb      	ldr	r3, [r7, #12]
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3710      	adds	r7, #16
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <LL_GPIO_SetPinMode>:
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	b08b      	sub	sp, #44	; 0x2c
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	60f8      	str	r0, [r7, #12]
 8001f42:	60b9      	str	r1, [r7, #8]
 8001f44:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	fa93 f3a3 	rbit	r3, r3
 8001f54:	613b      	str	r3, [r7, #16]
  return result;
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d101      	bne.n	8001f64 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8001f60:	2320      	movs	r3, #32
 8001f62:	e003      	b.n	8001f6c <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	fab3 f383 	clz	r3, r3
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	2103      	movs	r1, #3
 8001f70:	fa01 f303 	lsl.w	r3, r1, r3
 8001f74:	43db      	mvns	r3, r3
 8001f76:	401a      	ands	r2, r3
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7c:	6a3b      	ldr	r3, [r7, #32]
 8001f7e:	fa93 f3a3 	rbit	r3, r3
 8001f82:	61fb      	str	r3, [r7, #28]
  return result;
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d101      	bne.n	8001f92 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8001f8e:	2320      	movs	r3, #32
 8001f90:	e003      	b.n	8001f9a <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8001f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f94:	fab3 f383 	clz	r3, r3
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	6879      	ldr	r1, [r7, #4]
 8001f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa2:	431a      	orrs	r2, r3
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	601a      	str	r2, [r3, #0]
}
 8001fa8:	bf00      	nop
 8001faa:	372c      	adds	r7, #44	; 0x2c
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <LL_GPIO_SetPinOutputType>:
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	685a      	ldr	r2, [r3, #4]
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	43db      	mvns	r3, r3
 8001fc8:	401a      	ands	r2, r3
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	6879      	ldr	r1, [r7, #4]
 8001fce:	fb01 f303 	mul.w	r3, r1, r3
 8001fd2:	431a      	orrs	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	605a      	str	r2, [r3, #4]
}
 8001fd8:	bf00      	nop
 8001fda:	3714      	adds	r7, #20
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <LL_GPIO_SetPinSpeed>:
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b08b      	sub	sp, #44	; 0x2c
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	689a      	ldr	r2, [r3, #8]
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	fa93 f3a3 	rbit	r3, r3
 8001ffe:	613b      	str	r3, [r7, #16]
  return result;
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d101      	bne.n	800200e <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800200a:	2320      	movs	r3, #32
 800200c:	e003      	b.n	8002016 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	fab3 f383 	clz	r3, r3
 8002014:	b2db      	uxtb	r3, r3
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	2103      	movs	r1, #3
 800201a:	fa01 f303 	lsl.w	r3, r1, r3
 800201e:	43db      	mvns	r3, r3
 8002020:	401a      	ands	r2, r3
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002026:	6a3b      	ldr	r3, [r7, #32]
 8002028:	fa93 f3a3 	rbit	r3, r3
 800202c:	61fb      	str	r3, [r7, #28]
  return result;
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002034:	2b00      	cmp	r3, #0
 8002036:	d101      	bne.n	800203c <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8002038:	2320      	movs	r3, #32
 800203a:	e003      	b.n	8002044 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800203c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203e:	fab3 f383 	clz	r3, r3
 8002042:	b2db      	uxtb	r3, r3
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	6879      	ldr	r1, [r7, #4]
 8002048:	fa01 f303 	lsl.w	r3, r1, r3
 800204c:	431a      	orrs	r2, r3
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	609a      	str	r2, [r3, #8]
}
 8002052:	bf00      	nop
 8002054:	372c      	adds	r7, #44	; 0x2c
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr

0800205e <LL_GPIO_SetPinPull>:
{
 800205e:	b480      	push	{r7}
 8002060:	b08b      	sub	sp, #44	; 0x2c
 8002062:	af00      	add	r7, sp, #0
 8002064:	60f8      	str	r0, [r7, #12]
 8002066:	60b9      	str	r1, [r7, #8]
 8002068:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	68da      	ldr	r2, [r3, #12]
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	fa93 f3a3 	rbit	r3, r3
 8002078:	613b      	str	r3, [r7, #16]
  return result;
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d101      	bne.n	8002088 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8002084:	2320      	movs	r3, #32
 8002086:	e003      	b.n	8002090 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	fab3 f383 	clz	r3, r3
 800208e:	b2db      	uxtb	r3, r3
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	2103      	movs	r1, #3
 8002094:	fa01 f303 	lsl.w	r3, r1, r3
 8002098:	43db      	mvns	r3, r3
 800209a:	401a      	ands	r2, r3
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a0:	6a3b      	ldr	r3, [r7, #32]
 80020a2:	fa93 f3a3 	rbit	r3, r3
 80020a6:	61fb      	str	r3, [r7, #28]
  return result;
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80020ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d101      	bne.n	80020b6 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80020b2:	2320      	movs	r3, #32
 80020b4:	e003      	b.n	80020be <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80020b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b8:	fab3 f383 	clz	r3, r3
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	6879      	ldr	r1, [r7, #4]
 80020c2:	fa01 f303 	lsl.w	r3, r1, r3
 80020c6:	431a      	orrs	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	60da      	str	r2, [r3, #12]
}
 80020cc:	bf00      	nop
 80020ce:	372c      	adds	r7, #44	; 0x2c
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <LL_GPIO_SetAFPin_0_7>:
{
 80020d8:	b480      	push	{r7}
 80020da:	b08b      	sub	sp, #44	; 0x2c
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	6a1a      	ldr	r2, [r3, #32]
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	fa93 f3a3 	rbit	r3, r3
 80020f2:	613b      	str	r3, [r7, #16]
  return result;
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d101      	bne.n	8002102 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80020fe:	2320      	movs	r3, #32
 8002100:	e003      	b.n	800210a <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	fab3 f383 	clz	r3, r3
 8002108:	b2db      	uxtb	r3, r3
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	210f      	movs	r1, #15
 800210e:	fa01 f303 	lsl.w	r3, r1, r3
 8002112:	43db      	mvns	r3, r3
 8002114:	401a      	ands	r2, r3
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211a:	6a3b      	ldr	r3, [r7, #32]
 800211c:	fa93 f3a3 	rbit	r3, r3
 8002120:	61fb      	str	r3, [r7, #28]
  return result;
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002128:	2b00      	cmp	r3, #0
 800212a:	d101      	bne.n	8002130 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800212c:	2320      	movs	r3, #32
 800212e:	e003      	b.n	8002138 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8002130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002132:	fab3 f383 	clz	r3, r3
 8002136:	b2db      	uxtb	r3, r3
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	6879      	ldr	r1, [r7, #4]
 800213c:	fa01 f303 	lsl.w	r3, r1, r3
 8002140:	431a      	orrs	r2, r3
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	621a      	str	r2, [r3, #32]
}
 8002146:	bf00      	nop
 8002148:	372c      	adds	r7, #44	; 0x2c
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr

08002152 <LL_GPIO_SetAFPin_8_15>:
{
 8002152:	b480      	push	{r7}
 8002154:	b08b      	sub	sp, #44	; 0x2c
 8002156:	af00      	add	r7, sp, #0
 8002158:	60f8      	str	r0, [r7, #12]
 800215a:	60b9      	str	r1, [r7, #8]
 800215c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	0a1b      	lsrs	r3, r3, #8
 8002166:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	fa93 f3a3 	rbit	r3, r3
 800216e:	613b      	str	r3, [r7, #16]
  return result;
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800217a:	2320      	movs	r3, #32
 800217c:	e003      	b.n	8002186 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	fab3 f383 	clz	r3, r3
 8002184:	b2db      	uxtb	r3, r3
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	210f      	movs	r1, #15
 800218a:	fa01 f303 	lsl.w	r3, r1, r3
 800218e:	43db      	mvns	r3, r3
 8002190:	401a      	ands	r2, r3
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	0a1b      	lsrs	r3, r3, #8
 8002196:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002198:	6a3b      	ldr	r3, [r7, #32]
 800219a:	fa93 f3a3 	rbit	r3, r3
 800219e:	61fb      	str	r3, [r7, #28]
  return result;
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80021a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d101      	bne.n	80021ae <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80021aa:	2320      	movs	r3, #32
 80021ac:	e003      	b.n	80021b6 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80021ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b0:	fab3 f383 	clz	r3, r3
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	6879      	ldr	r1, [r7, #4]
 80021ba:	fa01 f303 	lsl.w	r3, r1, r3
 80021be:	431a      	orrs	r2, r3
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80021c4:	bf00      	nop
 80021c6:	372c      	adds	r7, #44	; 0x2c
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b088      	sub	sp, #32
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	fa93 f3a3 	rbit	r3, r3
 80021e6:	60fb      	str	r3, [r7, #12]
  return result;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d101      	bne.n	80021f6 <LL_GPIO_Init+0x26>
    return 32U;
 80021f2:	2320      	movs	r3, #32
 80021f4:	e003      	b.n	80021fe <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	fab3 f383 	clz	r3, r3
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002200:	e048      	b.n	8002294 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	2101      	movs	r1, #1
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	fa01 f303 	lsl.w	r3, r1, r3
 800220e:	4013      	ands	r3, r2
 8002210:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d03a      	beq.n	800228e <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	2b01      	cmp	r3, #1
 800221e:	d003      	beq.n	8002228 <LL_GPIO_Init+0x58>
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	2b02      	cmp	r3, #2
 8002226:	d10e      	bne.n	8002246 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	461a      	mov	r2, r3
 800222e:	69b9      	ldr	r1, [r7, #24]
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f7ff fed7 	bl	8001fe4 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	6819      	ldr	r1, [r3, #0]
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	461a      	mov	r2, r3
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f7ff feb7 	bl	8001fb4 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	461a      	mov	r2, r3
 800224c:	69b9      	ldr	r1, [r7, #24]
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f7ff ff05 	bl	800205e <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	2b02      	cmp	r3, #2
 800225a:	d111      	bne.n	8002280 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	2bff      	cmp	r3, #255	; 0xff
 8002260:	d807      	bhi.n	8002272 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	695b      	ldr	r3, [r3, #20]
 8002266:	461a      	mov	r2, r3
 8002268:	69b9      	ldr	r1, [r7, #24]
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f7ff ff34 	bl	80020d8 <LL_GPIO_SetAFPin_0_7>
 8002270:	e006      	b.n	8002280 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	461a      	mov	r2, r3
 8002278:	69b9      	ldr	r1, [r7, #24]
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f7ff ff69 	bl	8002152 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	461a      	mov	r2, r3
 8002286:	69b9      	ldr	r1, [r7, #24]
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f7ff fe56 	bl	8001f3a <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	3301      	adds	r3, #1
 8002292:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	fa22 f303 	lsr.w	r3, r2, r3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1af      	bne.n	8002202 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3720      	adds	r7, #32
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <LL_SPI_IsEnabled>:
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022bc:	2b40      	cmp	r3, #64	; 0x40
 80022be:	d101      	bne.n	80022c4 <LL_SPI_IsEnabled+0x18>
 80022c0:	2301      	movs	r3, #1
 80022c2:	e000      	b.n	80022c6 <LL_SPI_IsEnabled+0x1a>
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr

080022d2 <LL_SPI_SetRxFIFOThreshold>:
{
 80022d2:	b480      	push	{r7}
 80022d4:	b083      	sub	sp, #12
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
 80022da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	431a      	orrs	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	605a      	str	r2, [r3, #4]
}
 80022ec:	bf00      	nop
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <LL_SPI_SetCRCPolynomial>:
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	b29b      	uxth	r3, r3
 8002306:	461a      	mov	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	611a      	str	r2, [r3, #16]
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f7ff ffc0 	bl	80022ac <LL_SPI_IsEnabled>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d145      	bne.n	80023be <LL_SPI_Init+0xa6>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800233a:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	6811      	ldr	r1, [r2, #0]
 8002342:	683a      	ldr	r2, [r7, #0]
 8002344:	6852      	ldr	r2, [r2, #4]
 8002346:	4311      	orrs	r1, r2
 8002348:	683a      	ldr	r2, [r7, #0]
 800234a:	68d2      	ldr	r2, [r2, #12]
 800234c:	4311      	orrs	r1, r2
 800234e:	683a      	ldr	r2, [r7, #0]
 8002350:	6912      	ldr	r2, [r2, #16]
 8002352:	4311      	orrs	r1, r2
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	6952      	ldr	r2, [r2, #20]
 8002358:	4311      	orrs	r1, r2
 800235a:	683a      	ldr	r2, [r7, #0]
 800235c:	6992      	ldr	r2, [r2, #24]
 800235e:	4311      	orrs	r1, r2
 8002360:	683a      	ldr	r2, [r7, #0]
 8002362:	69d2      	ldr	r2, [r2, #28]
 8002364:	4311      	orrs	r1, r2
 8002366:	683a      	ldr	r2, [r7, #0]
 8002368:	6a12      	ldr	r2, [r2, #32]
 800236a:	430a      	orrs	r2, r1
 800236c:	431a      	orrs	r2, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800237a:	f023 0304 	bic.w	r3, r3, #4
 800237e:	683a      	ldr	r2, [r7, #0]
 8002380:	6891      	ldr	r1, [r2, #8]
 8002382:	683a      	ldr	r2, [r7, #0]
 8002384:	6952      	ldr	r2, [r2, #20]
 8002386:	0c12      	lsrs	r2, r2, #16
 8002388:	430a      	orrs	r2, r1
 800238a:	431a      	orrs	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	605a      	str	r2, [r3, #4]
               SPI_CR2_DS | SPI_CR2_SSOE,
               SPI_InitStruct->DataWidth | (SPI_InitStruct->NSS >> 16U));

    /* Set Rx FIFO to Quarter (1 Byte) in case of 8 Bits mode. No DataPacking by default */
    if (SPI_InitStruct->DataWidth < LL_SPI_DATAWIDTH_9BIT)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002398:	d204      	bcs.n	80023a4 <LL_SPI_Init+0x8c>
    {
      LL_SPI_SetRxFIFOThreshold(SPIx, LL_SPI_RX_FIFO_TH_QUARTER);
 800239a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f7ff ff97 	bl	80022d2 <LL_SPI_SetRxFIFOThreshold>

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	6a1b      	ldr	r3, [r3, #32]
 80023a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023ac:	d105      	bne.n	80023ba <LL_SPI_Init+0xa2>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b2:	4619      	mov	r1, r3
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f7ff ff9f 	bl	80022f8 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 80023ba:	2300      	movs	r3, #0
 80023bc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80023be:	7bfb      	ldrb	r3, [r7, #15]
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3710      	adds	r7, #16
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <LL_TIM_SetPrescaler>:
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <LL_TIM_SetAutoReload>:
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	683a      	ldr	r2, [r7, #0]
 80023f2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <LL_TIM_SetRepetitionCounter>:
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	683a      	ldr	r2, [r7, #0]
 800240e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	695b      	ldr	r3, [r3, #20]
 8002428:	f043 0201 	orr.w	r2, r3, #1
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	615a      	str	r2, [r3, #20]
}
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4a3d      	ldr	r2, [pc, #244]	; (8002544 <LL_TIM_Init+0x108>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d013      	beq.n	800247c <LL_TIM_Init+0x40>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800245a:	d00f      	beq.n	800247c <LL_TIM_Init+0x40>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4a3a      	ldr	r2, [pc, #232]	; (8002548 <LL_TIM_Init+0x10c>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d00b      	beq.n	800247c <LL_TIM_Init+0x40>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4a39      	ldr	r2, [pc, #228]	; (800254c <LL_TIM_Init+0x110>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d007      	beq.n	800247c <LL_TIM_Init+0x40>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a38      	ldr	r2, [pc, #224]	; (8002550 <LL_TIM_Init+0x114>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d003      	beq.n	800247c <LL_TIM_Init+0x40>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a37      	ldr	r2, [pc, #220]	; (8002554 <LL_TIM_Init+0x118>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d106      	bne.n	800248a <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	4313      	orrs	r3, r2
 8002488:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a2d      	ldr	r2, [pc, #180]	; (8002544 <LL_TIM_Init+0x108>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d01f      	beq.n	80024d2 <LL_TIM_Init+0x96>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002498:	d01b      	beq.n	80024d2 <LL_TIM_Init+0x96>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a2a      	ldr	r2, [pc, #168]	; (8002548 <LL_TIM_Init+0x10c>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d017      	beq.n	80024d2 <LL_TIM_Init+0x96>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a29      	ldr	r2, [pc, #164]	; (800254c <LL_TIM_Init+0x110>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d013      	beq.n	80024d2 <LL_TIM_Init+0x96>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a28      	ldr	r2, [pc, #160]	; (8002550 <LL_TIM_Init+0x114>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d00f      	beq.n	80024d2 <LL_TIM_Init+0x96>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a27      	ldr	r2, [pc, #156]	; (8002554 <LL_TIM_Init+0x118>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d00b      	beq.n	80024d2 <LL_TIM_Init+0x96>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a26      	ldr	r2, [pc, #152]	; (8002558 <LL_TIM_Init+0x11c>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d007      	beq.n	80024d2 <LL_TIM_Init+0x96>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a25      	ldr	r2, [pc, #148]	; (800255c <LL_TIM_Init+0x120>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d003      	beq.n	80024d2 <LL_TIM_Init+0x96>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a24      	ldr	r2, [pc, #144]	; (8002560 <LL_TIM_Init+0x124>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d106      	bne.n	80024e0 <LL_TIM_Init+0xa4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	4313      	orrs	r3, r2
 80024de:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	4619      	mov	r1, r3
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f7ff ff79 	bl	80023e4 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	881b      	ldrh	r3, [r3, #0]
 80024f6:	4619      	mov	r1, r3
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f7ff ff65 	bl	80023c8 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a10      	ldr	r2, [pc, #64]	; (8002544 <LL_TIM_Init+0x108>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d00f      	beq.n	8002526 <LL_TIM_Init+0xea>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a12      	ldr	r2, [pc, #72]	; (8002554 <LL_TIM_Init+0x118>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d00b      	beq.n	8002526 <LL_TIM_Init+0xea>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a11      	ldr	r2, [pc, #68]	; (8002558 <LL_TIM_Init+0x11c>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d007      	beq.n	8002526 <LL_TIM_Init+0xea>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a10      	ldr	r2, [pc, #64]	; (800255c <LL_TIM_Init+0x120>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d003      	beq.n	8002526 <LL_TIM_Init+0xea>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a0f      	ldr	r2, [pc, #60]	; (8002560 <LL_TIM_Init+0x124>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d105      	bne.n	8002532 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	4619      	mov	r1, r3
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f7ff ff67 	bl	8002400 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f7ff ff72 	bl	800241c <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	40012c00 	.word	0x40012c00
 8002548:	40000400 	.word	0x40000400
 800254c:	40000800 	.word	0x40000800
 8002550:	40000c00 	.word	0x40000c00
 8002554:	40013400 	.word	0x40013400
 8002558:	40014000 	.word	0x40014000
 800255c:	40014400 	.word	0x40014400
 8002560:	40014800 	.word	0x40014800

08002564 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	fbb2 f3f3 	udiv	r3, r2, r3
 8002576:	4a07      	ldr	r2, [pc, #28]	; (8002594 <LL_InitTick+0x30>)
 8002578:	3b01      	subs	r3, #1
 800257a:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 800257c:	4b05      	ldr	r3, [pc, #20]	; (8002594 <LL_InitTick+0x30>)
 800257e:	2200      	movs	r2, #0
 8002580:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002582:	4b04      	ldr	r3, [pc, #16]	; (8002594 <LL_InitTick+0x30>)
 8002584:	2205      	movs	r2, #5
 8002586:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002588:	bf00      	nop
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr
 8002594:	e000e010 	.word	0xe000e010

08002598 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80025a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f7ff ffdd 	bl	8002564 <LL_InitTick>
}
 80025aa:	bf00      	nop
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
	...

080025b4 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80025bc:	4a04      	ldr	r2, [pc, #16]	; (80025d0 <LL_SetSystemCoreClock+0x1c>)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6013      	str	r3, [r2, #0]
}
 80025c2:	bf00      	nop
 80025c4:	370c      	adds	r7, #12
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	20000000 	.word	0x20000000

080025d4 <__libc_init_array>:
 80025d4:	b570      	push	{r4, r5, r6, lr}
 80025d6:	4d0d      	ldr	r5, [pc, #52]	; (800260c <__libc_init_array+0x38>)
 80025d8:	4c0d      	ldr	r4, [pc, #52]	; (8002610 <__libc_init_array+0x3c>)
 80025da:	1b64      	subs	r4, r4, r5
 80025dc:	10a4      	asrs	r4, r4, #2
 80025de:	2600      	movs	r6, #0
 80025e0:	42a6      	cmp	r6, r4
 80025e2:	d109      	bne.n	80025f8 <__libc_init_array+0x24>
 80025e4:	4d0b      	ldr	r5, [pc, #44]	; (8002614 <__libc_init_array+0x40>)
 80025e6:	4c0c      	ldr	r4, [pc, #48]	; (8002618 <__libc_init_array+0x44>)
 80025e8:	f000 f820 	bl	800262c <_init>
 80025ec:	1b64      	subs	r4, r4, r5
 80025ee:	10a4      	asrs	r4, r4, #2
 80025f0:	2600      	movs	r6, #0
 80025f2:	42a6      	cmp	r6, r4
 80025f4:	d105      	bne.n	8002602 <__libc_init_array+0x2e>
 80025f6:	bd70      	pop	{r4, r5, r6, pc}
 80025f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80025fc:	4798      	blx	r3
 80025fe:	3601      	adds	r6, #1
 8002600:	e7ee      	b.n	80025e0 <__libc_init_array+0xc>
 8002602:	f855 3b04 	ldr.w	r3, [r5], #4
 8002606:	4798      	blx	r3
 8002608:	3601      	adds	r6, #1
 800260a:	e7f2      	b.n	80025f2 <__libc_init_array+0x1e>
 800260c:	08002654 	.word	0x08002654
 8002610:	08002654 	.word	0x08002654
 8002614:	08002654 	.word	0x08002654
 8002618:	08002658 	.word	0x08002658

0800261c <memset>:
 800261c:	4402      	add	r2, r0
 800261e:	4603      	mov	r3, r0
 8002620:	4293      	cmp	r3, r2
 8002622:	d100      	bne.n	8002626 <memset+0xa>
 8002624:	4770      	bx	lr
 8002626:	f803 1b01 	strb.w	r1, [r3], #1
 800262a:	e7f9      	b.n	8002620 <memset+0x4>

0800262c <_init>:
 800262c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800262e:	bf00      	nop
 8002630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002632:	bc08      	pop	{r3}
 8002634:	469e      	mov	lr, r3
 8002636:	4770      	bx	lr

08002638 <_fini>:
 8002638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800263a:	bf00      	nop
 800263c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800263e:	bc08      	pop	{r3}
 8002640:	469e      	mov	lr, r3
 8002642:	4770      	bx	lr
