
fersat_pdh.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a70  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002bf8  08002bf8  00012bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c08  08002c08  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08002c08  08002c08  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c08  08002c08  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c08  08002c08  00012c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c0c  08002c0c  00012c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08002c10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000bc7c  20000004  08002c14  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000bc80  08002c14  0002bc80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009a89  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d46  00000000  00000000  00029abd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a8  00000000  00000000  0002b808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008b0  00000000  00000000  0002c1b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001de79  00000000  00000000  0002ca60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000785d  00000000  00000000  0004a8d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a342b  00000000  00000000  00052136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f5561  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026d4  00000000  00000000  000f55b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002be0 	.word	0x08002be0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08002be0 	.word	0x08002be0

080001c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	db0b      	blt.n	80001f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001da:	79fb      	ldrb	r3, [r7, #7]
 80001dc:	f003 021f 	and.w	r2, r3, #31
 80001e0:	4907      	ldr	r1, [pc, #28]	; (8000200 <__NVIC_EnableIRQ+0x38>)
 80001e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e6:	095b      	lsrs	r3, r3, #5
 80001e8:	2001      	movs	r0, #1
 80001ea:	fa00 f202 	lsl.w	r2, r0, r2
 80001ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80001f2:	bf00      	nop
 80001f4:	370c      	adds	r7, #12
 80001f6:	46bd      	mov	sp, r7
 80001f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	e000e100 	.word	0xe000e100

08000204 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	4603      	mov	r3, r0
 800020c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800020e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000212:	2b00      	cmp	r3, #0
 8000214:	db12      	blt.n	800023c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000216:	79fb      	ldrb	r3, [r7, #7]
 8000218:	f003 021f 	and.w	r2, r3, #31
 800021c:	490a      	ldr	r1, [pc, #40]	; (8000248 <__NVIC_DisableIRQ+0x44>)
 800021e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000222:	095b      	lsrs	r3, r3, #5
 8000224:	2001      	movs	r0, #1
 8000226:	fa00 f202 	lsl.w	r2, r0, r2
 800022a:	3320      	adds	r3, #32
 800022c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000230:	f3bf 8f4f 	dsb	sy
}
 8000234:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000236:	f3bf 8f6f 	isb	sy
}
 800023a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800023c:	bf00      	nop
 800023e:	370c      	adds	r7, #12
 8000240:	46bd      	mov	sp, r7
 8000242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000246:	4770      	bx	lr
 8000248:	e000e100 	.word	0xe000e100

0800024c <LL_SPI_DMA_GetRegAddr>:
  * @rmtoll DR           DR            LL_SPI_DMA_GetRegAddr
  * @param  SPIx SPI Instance
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_SPI_DMA_GetRegAddr(SPI_TypeDef *SPIx)
{
 800024c:	b480      	push	{r7}
 800024e:	b083      	sub	sp, #12
 8000250:	af00      	add	r7, sp, #0
 8000252:	6078      	str	r0, [r7, #4]
  return (uint32_t) &(SPIx->DR);
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	330c      	adds	r3, #12
}
 8000258:	4618      	mov	r0, r3
 800025a:	370c      	adds	r7, #12
 800025c:	46bd      	mov	sp, r7
 800025e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000262:	4770      	bx	lr

08000264 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000264:	b480      	push	{r7}
 8000266:	b083      	sub	sp, #12
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
 800026c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	683a      	ldr	r2, [r7, #0]
 8000272:	619a      	str	r2, [r3, #24]
}
 8000274:	bf00      	nop
 8000276:	370c      	adds	r7, #12
 8000278:	46bd      	mov	sp, r7
 800027a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027e:	4770      	bx	lr

08000280 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
 8000288:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	683a      	ldr	r2, [r7, #0]
 800028e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000290:	bf00      	nop
 8000292:	370c      	adds	r7, #12
 8000294:	46bd      	mov	sp, r7
 8000296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029a:	4770      	bx	lr

0800029c <ADC_Init>:
ADS131M08 *ads131m08;

// Function used to perform ADC initialization, prepares the required memory
// structures and allocates memory for samples, sets SPI mode etc. This
// function can also be used to perform initial ADC configuration if necessary.
void ADC_Init(ADS131M08 *adc_struct, SPI_TypeDef *SPIx, DMA_TypeDef *DMAx) {
 800029c:	b580      	push	{r7, lr}
 800029e:	b084      	sub	sp, #16
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	60f8      	str	r0, [r7, #12]
 80002a4:	60b9      	str	r1, [r7, #8]
 80002a6:	607a      	str	r2, [r7, #4]
	static uint8_t samples_array[NUM_SAMPLES * BYTES_PER_SAMPLE];
	samples = samples_array;
 80002a8:	4b13      	ldr	r3, [pc, #76]	; (80002f8 <ADC_Init+0x5c>)
 80002aa:	4a14      	ldr	r2, [pc, #80]	; (80002fc <ADC_Init+0x60>)
 80002ac:	601a      	str	r2, [r3, #0]

	adc_struct->SPIx = SPIx;
 80002ae:	68fb      	ldr	r3, [r7, #12]
 80002b0:	68ba      	ldr	r2, [r7, #8]
 80002b2:	601a      	str	r2, [r3, #0]
	adc_struct->DMAx = DMAx;
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	687a      	ldr	r2, [r7, #4]
 80002b8:	605a      	str	r2, [r3, #4]
	adc_struct->num_samples = NUM_SAMPLES;
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002c0:	811a      	strh	r2, [r3, #8]
	adc_struct->samples = samples;
 80002c2:	4b0d      	ldr	r3, [pc, #52]	; (80002f8 <ADC_Init+0x5c>)
 80002c4:	681a      	ldr	r2, [r3, #0]
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	60da      	str	r2, [r3, #12]
	adc_struct->sampling_complete_flag = 0;
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	2200      	movs	r2, #0
 80002ce:	741a      	strb	r2, [r3, #16]

	ads131m08 = adc_struct;
 80002d0:	4a0b      	ldr	r2, [pc, #44]	; (8000300 <ADC_Init+0x64>)
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	6013      	str	r3, [r2, #0]
	SPI_Set_Mode(CPOL0_CPHA1, SPIx);
 80002d6:	68b9      	ldr	r1, [r7, #8]
 80002d8:	2000      	movs	r0, #0
 80002da:	f001 fd85 	bl	8001de8 <SPI_Set_Mode>
	ADC_DMA_init();
 80002de:	f000 f8ad 	bl	800043c <ADC_DMA_init>
	current_sample_count = 0;
 80002e2:	4b08      	ldr	r3, [pc, #32]	; (8000304 <ADC_Init+0x68>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	801a      	strh	r2, [r3, #0]
	drdy_it_initialized = 0;
 80002e8:	4b07      	ldr	r3, [pc, #28]	; (8000308 <ADC_Init+0x6c>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	701a      	strb	r2, [r3, #0]
}
 80002ee:	bf00      	nop
 80002f0:	3710      	adds	r7, #16
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	20000024 	.word	0x20000024
 80002fc:	2000004c 	.word	0x2000004c
 8000300:	20000048 	.word	0x20000048
 8000304:	20000020 	.word	0x20000020
 8000308:	20000022 	.word	0x20000022

0800030c <ADC_Start_Sampling>:

// Enables DRDY interrupts and starts sample collection.
void ADC_Start_Sampling() {
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
	ADC_first_read(ads131m08->SPIx);
 8000310:	4b06      	ldr	r3, [pc, #24]	; (800032c <ADC_Start_Sampling+0x20>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	4618      	mov	r0, r3
 8000318:	f000 f80c 	bl	8000334 <ADC_first_read>
	drdy_it_initialized = 1;
 800031c:	4b04      	ldr	r3, [pc, #16]	; (8000330 <ADC_Start_Sampling+0x24>)
 800031e:	2201      	movs	r2, #1
 8000320:	701a      	strb	r2, [r3, #0]
	NVIC_EnableIRQ(ADC_DRDY_IRQn);
 8000322:	200a      	movs	r0, #10
 8000324:	f7ff ff50 	bl	80001c8 <__NVIC_EnableIRQ>
}
 8000328:	bf00      	nop
 800032a:	bd80      	pop	{r7, pc}
 800032c:	20000048 	.word	0x20000048
 8000330:	20000022 	.word	0x20000022

08000334 <ADC_first_read>:

// Perform two sample reads to clear ADC's 2-deep FIFO buffer and ensure predictable
// DRDY pin behavior. Alternatively, a short pulse on applied to the SYNC/RESET pin
// can be used for this purpose.
static void ADC_first_read(SPI_TypeDef *SPIx) {
 8000334:	b580      	push	{r7, lr}
 8000336:	b08c      	sub	sp, #48	; 0x30
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
	uint8_t rx_buffer[30];

	LL_GPIO_ResetOutputPin(ADC_CS_GPIOx, ADC_CS_PIN); // \CS low
 800033c:	2102      	movs	r1, #2
 800033e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000342:	f7ff ff9d 	bl	8000280 <LL_GPIO_ResetOutputPin>
	SPI_TransmitReceive(SPIx, 30, dummy_bytes, rx_buffer);
 8000346:	f107 030c 	add.w	r3, r7, #12
 800034a:	4a15      	ldr	r2, [pc, #84]	; (80003a0 <ADC_first_read+0x6c>)
 800034c:	211e      	movs	r1, #30
 800034e:	6878      	ldr	r0, [r7, #4]
 8000350:	f001 fce2 	bl	8001d18 <SPI_TransmitReceive>
	LL_GPIO_SetOutputPin(ADC_CS_GPIOx, ADC_CS_PIN); // \CS high
 8000354:	2102      	movs	r1, #2
 8000356:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800035a:	f7ff ff83 	bl	8000264 <LL_GPIO_SetOutputPin>

	for(int i = 0; i < 100; i++); // TODO: write a delay function to replace this
 800035e:	2300      	movs	r3, #0
 8000360:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000362:	e002      	b.n	800036a <ADC_first_read+0x36>
 8000364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000366:	3301      	adds	r3, #1
 8000368:	62fb      	str	r3, [r7, #44]	; 0x2c
 800036a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800036c:	2b63      	cmp	r3, #99	; 0x63
 800036e:	ddf9      	ble.n	8000364 <ADC_first_read+0x30>

	LL_GPIO_ResetOutputPin(ADC_CS_GPIOx, ADC_CS_PIN); // \CS low
 8000370:	2102      	movs	r1, #2
 8000372:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000376:	f7ff ff83 	bl	8000280 <LL_GPIO_ResetOutputPin>
	SPI_TransmitReceive(SPIx, 30, dummy_bytes, rx_buffer);
 800037a:	f107 030c 	add.w	r3, r7, #12
 800037e:	4a08      	ldr	r2, [pc, #32]	; (80003a0 <ADC_first_read+0x6c>)
 8000380:	211e      	movs	r1, #30
 8000382:	6878      	ldr	r0, [r7, #4]
 8000384:	f001 fcc8 	bl	8001d18 <SPI_TransmitReceive>
	LL_GPIO_SetOutputPin(ADC_CS_GPIOx, ADC_CS_PIN); // \CS high
 8000388:	2102      	movs	r1, #2
 800038a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800038e:	f7ff ff69 	bl	8000264 <LL_GPIO_SetOutputPin>

	SPI_Disable(SPIx);
 8000392:	6878      	ldr	r0, [r7, #4]
 8000394:	f001 fd0f 	bl	8001db6 <SPI_Disable>
}
 8000398:	bf00      	nop
 800039a:	3730      	adds	r7, #48	; 0x30
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	20000028 	.word	0x20000028

080003a4 <ADC_DRDY_interrupt_handler>:

// Called by DRDY interrupt routine, starts SPI DMA transfer.
void ADC_DRDY_interrupt_handler() {
 80003a4:	b598      	push	{r3, r4, r7, lr}
 80003a6:	af00      	add	r7, sp, #0
	if (drdy_it_initialized && current_sample_count < NUM_SAMPLES) {
 80003a8:	4b20      	ldr	r3, [pc, #128]	; (800042c <ADC_DRDY_interrupt_handler+0x88>)
 80003aa:	781b      	ldrb	r3, [r3, #0]
 80003ac:	b2db      	uxtb	r3, r3
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d029      	beq.n	8000406 <ADC_DRDY_interrupt_handler+0x62>
 80003b2:	4b1f      	ldr	r3, [pc, #124]	; (8000430 <ADC_DRDY_interrupt_handler+0x8c>)
 80003b4:	881b      	ldrh	r3, [r3, #0]
 80003b6:	b29b      	uxth	r3, r3
 80003b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80003bc:	d223      	bcs.n	8000406 <ADC_DRDY_interrupt_handler+0x62>
		ADC_Set_DMA_Data_Length();
 80003be:	f000 f867 	bl	8000490 <ADC_Set_DMA_Data_Length>
		DMA_Reload_Memory_Address(ads131m08->DMAx, LL_DMA_CHANNEL_1, samples + current_sample_count++ * BYTES_PER_SAMPLE);
 80003c2:	4b1c      	ldr	r3, [pc, #112]	; (8000434 <ADC_DRDY_interrupt_handler+0x90>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	6858      	ldr	r0, [r3, #4]
 80003c8:	4b1b      	ldr	r3, [pc, #108]	; (8000438 <ADC_DRDY_interrupt_handler+0x94>)
 80003ca:	681a      	ldr	r2, [r3, #0]
 80003cc:	4b18      	ldr	r3, [pc, #96]	; (8000430 <ADC_DRDY_interrupt_handler+0x8c>)
 80003ce:	881b      	ldrh	r3, [r3, #0]
 80003d0:	b29b      	uxth	r3, r3
 80003d2:	1c59      	adds	r1, r3, #1
 80003d4:	b28c      	uxth	r4, r1
 80003d6:	4916      	ldr	r1, [pc, #88]	; (8000430 <ADC_DRDY_interrupt_handler+0x8c>)
 80003d8:	800c      	strh	r4, [r1, #0]
 80003da:	4619      	mov	r1, r3
 80003dc:	460b      	mov	r3, r1
 80003de:	011b      	lsls	r3, r3, #4
 80003e0:	1a5b      	subs	r3, r3, r1
 80003e2:	005b      	lsls	r3, r3, #1
 80003e4:	4413      	add	r3, r2
 80003e6:	461a      	mov	r2, r3
 80003e8:	2100      	movs	r1, #0
 80003ea:	f000 fbcf 	bl	8000b8c <DMA_Reload_Memory_Address>
		ADC_Enable_SPI_DMA_transfer();
 80003ee:	f000 f865 	bl	80004bc <ADC_Enable_SPI_DMA_transfer>

		NVIC_DisableIRQ(ADC_DRDY_IRQn); // Interrupt is re-enabled in DMA transfer complete routine
 80003f2:	200a      	movs	r0, #10
 80003f4:	f7ff ff06 	bl	8000204 <__NVIC_DisableIRQ>

		SPI_Start_Transfer(ads131m08->SPIx);
 80003f8:	4b0e      	ldr	r3, [pc, #56]	; (8000434 <ADC_DRDY_interrupt_handler+0x90>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	4618      	mov	r0, r3
 8000400:	f001 fc7a 	bl	8001cf8 <SPI_Start_Transfer>
	} else if (current_sample_count >= NUM_SAMPLES) {
		NVIC_DisableIRQ(ADC_DRDY_IRQn);
		ads131m08->sampling_complete_flag = 1;
		drdy_it_initialized = 0;
	}
}
 8000404:	e00f      	b.n	8000426 <ADC_DRDY_interrupt_handler+0x82>
	} else if (current_sample_count >= NUM_SAMPLES) {
 8000406:	4b0a      	ldr	r3, [pc, #40]	; (8000430 <ADC_DRDY_interrupt_handler+0x8c>)
 8000408:	881b      	ldrh	r3, [r3, #0]
 800040a:	b29b      	uxth	r3, r3
 800040c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000410:	d309      	bcc.n	8000426 <ADC_DRDY_interrupt_handler+0x82>
		NVIC_DisableIRQ(ADC_DRDY_IRQn);
 8000412:	200a      	movs	r0, #10
 8000414:	f7ff fef6 	bl	8000204 <__NVIC_DisableIRQ>
		ads131m08->sampling_complete_flag = 1;
 8000418:	4b06      	ldr	r3, [pc, #24]	; (8000434 <ADC_DRDY_interrupt_handler+0x90>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	2201      	movs	r2, #1
 800041e:	741a      	strb	r2, [r3, #16]
		drdy_it_initialized = 0;
 8000420:	4b02      	ldr	r3, [pc, #8]	; (800042c <ADC_DRDY_interrupt_handler+0x88>)
 8000422:	2200      	movs	r2, #0
 8000424:	701a      	strb	r2, [r3, #0]
}
 8000426:	bf00      	nop
 8000428:	bd98      	pop	{r3, r4, r7, pc}
 800042a:	bf00      	nop
 800042c:	20000022 	.word	0x20000022
 8000430:	20000020 	.word	0x20000020
 8000434:	20000048 	.word	0x20000048
 8000438:	20000024 	.word	0x20000024

0800043c <ADC_DMA_init>:

static void ADC_DMA_init() {
 800043c:	b598      	push	{r3, r4, r7, lr}
 800043e:	af00      	add	r7, sp, #0
	DMA_Channel_Init(ads131m08->DMAx, LL_DMA_CHANNEL_1, LL_SPI_DMA_GetRegAddr(ads131m08->SPIx), samples);
 8000440:	4b10      	ldr	r3, [pc, #64]	; (8000484 <ADC_DMA_init+0x48>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	685c      	ldr	r4, [r3, #4]
 8000446:	4b0f      	ldr	r3, [pc, #60]	; (8000484 <ADC_DMA_init+0x48>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4618      	mov	r0, r3
 800044e:	f7ff fefd 	bl	800024c <LL_SPI_DMA_GetRegAddr>
 8000452:	4602      	mov	r2, r0
 8000454:	4b0c      	ldr	r3, [pc, #48]	; (8000488 <ADC_DMA_init+0x4c>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	2100      	movs	r1, #0
 800045a:	4620      	mov	r0, r4
 800045c:	f000 fb6d 	bl	8000b3a <DMA_Channel_Init>
	DMA_Channel_Init(ads131m08->DMAx, LL_DMA_CHANNEL_2, LL_SPI_DMA_GetRegAddr(ads131m08->SPIx), dummy_bytes);
 8000460:	4b08      	ldr	r3, [pc, #32]	; (8000484 <ADC_DMA_init+0x48>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	685c      	ldr	r4, [r3, #4]
 8000466:	4b07      	ldr	r3, [pc, #28]	; (8000484 <ADC_DMA_init+0x48>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4618      	mov	r0, r3
 800046e:	f7ff feed 	bl	800024c <LL_SPI_DMA_GetRegAddr>
 8000472:	4602      	mov	r2, r0
 8000474:	4b05      	ldr	r3, [pc, #20]	; (800048c <ADC_DMA_init+0x50>)
 8000476:	2101      	movs	r1, #1
 8000478:	4620      	mov	r0, r4
 800047a:	f000 fb5e 	bl	8000b3a <DMA_Channel_Init>
}
 800047e:	bf00      	nop
 8000480:	bd98      	pop	{r3, r4, r7, pc}
 8000482:	bf00      	nop
 8000484:	20000048 	.word	0x20000048
 8000488:	20000024 	.word	0x20000024
 800048c:	20000028 	.word	0x20000028

08000490 <ADC_Set_DMA_Data_Length>:

static void ADC_Set_DMA_Data_Length() {
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0
	DMA_Set_Channel_Data_Length(ads131m08->DMAx, LL_DMA_CHANNEL_1, BYTES_PER_SAMPLE);
 8000494:	4b08      	ldr	r3, [pc, #32]	; (80004b8 <ADC_Set_DMA_Data_Length+0x28>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	685b      	ldr	r3, [r3, #4]
 800049a:	221e      	movs	r2, #30
 800049c:	2100      	movs	r1, #0
 800049e:	4618      	mov	r0, r3
 80004a0:	f000 fb65 	bl	8000b6e <DMA_Set_Channel_Data_Length>
	DMA_Set_Channel_Data_Length(ads131m08->DMAx, LL_DMA_CHANNEL_2, BYTES_PER_SAMPLE);
 80004a4:	4b04      	ldr	r3, [pc, #16]	; (80004b8 <ADC_Set_DMA_Data_Length+0x28>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	685b      	ldr	r3, [r3, #4]
 80004aa:	221e      	movs	r2, #30
 80004ac:	2101      	movs	r1, #1
 80004ae:	4618      	mov	r0, r3
 80004b0:	f000 fb5d 	bl	8000b6e <DMA_Set_Channel_Data_Length>
}
 80004b4:	bf00      	nop
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	20000048 	.word	0x20000048

080004bc <ADC_Enable_SPI_DMA_transfer>:

static void ADC_Enable_SPI_DMA_transfer() {
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
	SPI_Enable_DMA_Rx_Request(ads131m08->SPIx);
 80004c0:	4b0c      	ldr	r3, [pc, #48]	; (80004f4 <ADC_Enable_SPI_DMA_transfer+0x38>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	4618      	mov	r0, r3
 80004c8:	f001 fbe4 	bl	8001c94 <SPI_Enable_DMA_Rx_Request>
	DMA_Enable_CH1_CH2(ads131m08->DMAx);
 80004cc:	4b09      	ldr	r3, [pc, #36]	; (80004f4 <ADC_Enable_SPI_DMA_transfer+0x38>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	685b      	ldr	r3, [r3, #4]
 80004d2:	4618      	mov	r0, r3
 80004d4:	f000 fb6a 	bl	8000bac <DMA_Enable_CH1_CH2>
	SPI_Enable_DMA_Tx_Request(ads131m08->SPIx);
 80004d8:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <ADC_Enable_SPI_DMA_transfer+0x38>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	4618      	mov	r0, r3
 80004e0:	f001 fbe3 	bl	8001caa <SPI_Enable_DMA_Tx_Request>
	SPI_Enable_RXNE_TXE_Interrupts(ads131m08->SPIx);
 80004e4:	4b03      	ldr	r3, [pc, #12]	; (80004f4 <ADC_Enable_SPI_DMA_transfer+0x38>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	4618      	mov	r0, r3
 80004ec:	f001 fbf6 	bl	8001cdc <SPI_Enable_RXNE_TXE_Interrupts>
}
 80004f0:	bf00      	nop
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	20000048 	.word	0x20000048

080004f8 <LL_GPIO_SetOutputPin>:
{
 80004f8:	b480      	push	{r7}
 80004fa:	b083      	sub	sp, #12
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
 8000500:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	683a      	ldr	r2, [r7, #0]
 8000506:	619a      	str	r2, [r3, #24]
}
 8000508:	bf00      	nop
 800050a:	370c      	adds	r7, #12
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr

08000514 <LL_GPIO_ResetOutputPin>:
{
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
 800051c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	683a      	ldr	r2, [r7, #0]
 8000522:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000524:	bf00      	nop
 8000526:	370c      	adds	r7, #12
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr

08000530 <ADT7301_Init>:
#include "adt7301.h"

ADT7301 *adt7301;

// Initializes required memory structures and sets SPI mode.
void ADT7301_Init(ADT7301 *adt7301_struct, SPI_TypeDef *SPIx) {
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
 8000538:	6039      	str	r1, [r7, #0]
	adt7301_struct->SPIx = SPIx;
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	683a      	ldr	r2, [r7, #0]
 800053e:	601a      	str	r2, [r3, #0]
	adt7301 = adt7301_struct;
 8000540:	4a05      	ldr	r2, [pc, #20]	; (8000558 <ADT7301_Init+0x28>)
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	6013      	str	r3, [r2, #0]

	SPI_Set_Mode(CPOL1_CPHA1, SPIx);
 8000546:	6839      	ldr	r1, [r7, #0]
 8000548:	2001      	movs	r0, #1
 800054a:	f001 fc4d 	bl	8001de8 <SPI_Set_Mode>
}
 800054e:	bf00      	nop
 8000550:	3708      	adds	r7, #8
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	20003c4c 	.word	0x20003c4c

0800055c <ADT7301_Collect_Sample>:

// Collects a sample from one temperature sensor, specified by parameter ts.
// Also performs conversion from raw data to a floating point temperature value.
void ADT7301_Collect_Sample(temp_sensor ts) {
 800055c:	b580      	push	{r7, lr}
 800055e:	b084      	sub	sp, #16
 8000560:	af00      	add	r7, sp, #0
 8000562:	4603      	mov	r3, r0
 8000564:	71fb      	strb	r3, [r7, #7]
	uint8_t sample_bytes[2];
	uint8_t dummy_bytes[2] = {0};
 8000566:	2300      	movs	r3, #0
 8000568:	813b      	strh	r3, [r7, #8]

	if (ts == TEMP1) {
 800056a:	79fb      	ldrb	r3, [r7, #7]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d114      	bne.n	800059a <ADT7301_Collect_Sample+0x3e>
		LL_GPIO_ResetOutputPin(TEMP1_CS_GPIOx, TEMP1_CS_PIN);
 8000570:	2108      	movs	r1, #8
 8000572:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000576:	f7ff ffcd 	bl	8000514 <LL_GPIO_ResetOutputPin>
		SPI_TransmitReceive(adt7301->SPIx, 2, dummy_bytes, sample_bytes);
 800057a:	4b3d      	ldr	r3, [pc, #244]	; (8000670 <ADT7301_Collect_Sample+0x114>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	6818      	ldr	r0, [r3, #0]
 8000580:	f107 030c 	add.w	r3, r7, #12
 8000584:	f107 0208 	add.w	r2, r7, #8
 8000588:	2102      	movs	r1, #2
 800058a:	f001 fbc5 	bl	8001d18 <SPI_TransmitReceive>
		LL_GPIO_SetOutputPin(TEMP1_CS_GPIOx, TEMP1_CS_PIN);
 800058e:	2108      	movs	r1, #8
 8000590:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000594:	f7ff ffb0 	bl	80004f8 <LL_GPIO_SetOutputPin>
 8000598:	e032      	b.n	8000600 <ADT7301_Collect_Sample+0xa4>
	} else if (ts == TEMP2) {
 800059a:	79fb      	ldrb	r3, [r7, #7]
 800059c:	2b01      	cmp	r3, #1
 800059e:	d116      	bne.n	80005ce <ADT7301_Collect_Sample+0x72>
		LL_GPIO_ResetOutputPin(TEMP2_CS_GPIOx, TEMP2_CS_PIN);
 80005a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005a8:	f7ff ffb4 	bl	8000514 <LL_GPIO_ResetOutputPin>
		SPI_TransmitReceive(adt7301->SPIx, 2, dummy_bytes, sample_bytes);
 80005ac:	4b30      	ldr	r3, [pc, #192]	; (8000670 <ADT7301_Collect_Sample+0x114>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	6818      	ldr	r0, [r3, #0]
 80005b2:	f107 030c 	add.w	r3, r7, #12
 80005b6:	f107 0208 	add.w	r2, r7, #8
 80005ba:	2102      	movs	r1, #2
 80005bc:	f001 fbac 	bl	8001d18 <SPI_TransmitReceive>
		LL_GPIO_SetOutputPin(TEMP2_CS_GPIOx, TEMP2_CS_PIN);
 80005c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005c8:	f7ff ff96 	bl	80004f8 <LL_GPIO_SetOutputPin>
 80005cc:	e018      	b.n	8000600 <ADT7301_Collect_Sample+0xa4>
	} else if (ts == TEMP3) {
 80005ce:	79fb      	ldrb	r3, [r7, #7]
 80005d0:	2b02      	cmp	r3, #2
 80005d2:	d115      	bne.n	8000600 <ADT7301_Collect_Sample+0xa4>
		LL_GPIO_ResetOutputPin(TEMP3_CS_GPIOx, TEMP3_CS_PIN);
 80005d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005dc:	f7ff ff9a 	bl	8000514 <LL_GPIO_ResetOutputPin>
		SPI_TransmitReceive(adt7301->SPIx, 2, dummy_bytes, sample_bytes);
 80005e0:	4b23      	ldr	r3, [pc, #140]	; (8000670 <ADT7301_Collect_Sample+0x114>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	6818      	ldr	r0, [r3, #0]
 80005e6:	f107 030c 	add.w	r3, r7, #12
 80005ea:	f107 0208 	add.w	r2, r7, #8
 80005ee:	2102      	movs	r1, #2
 80005f0:	f001 fb92 	bl	8001d18 <SPI_TransmitReceive>
		LL_GPIO_SetOutputPin(TEMP3_CS_GPIOx, TEMP3_CS_PIN);
 80005f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005fc:	f7ff ff7c 	bl	80004f8 <LL_GPIO_SetOutputPin>
	}

	int16_t tmp = (sample_bytes[0] << 8) | sample_bytes[1];
 8000600:	7b3b      	ldrb	r3, [r7, #12]
 8000602:	021b      	lsls	r3, r3, #8
 8000604:	b21a      	sxth	r2, r3
 8000606:	7b7b      	ldrb	r3, [r7, #13]
 8000608:	b21b      	sxth	r3, r3
 800060a:	4313      	orrs	r3, r2
 800060c:	81fb      	strh	r3, [r7, #14]

	if ((tmp & (1 << 13)) != 0) {
 800060e:	89fb      	ldrh	r3, [r7, #14]
 8000610:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000614:	2b00      	cmp	r3, #0
 8000616:	d004      	beq.n	8000622 <ADT7301_Collect_Sample+0xc6>
		tmp -= 16384;
 8000618:	89fb      	ldrh	r3, [r7, #14]
 800061a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800061e:	b29b      	uxth	r3, r3
 8000620:	81fb      	strh	r3, [r7, #14]
	}

	adt7301->samples[ts] = (float)tmp;
 8000622:	4b13      	ldr	r3, [pc, #76]	; (8000670 <ADT7301_Collect_Sample+0x114>)
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800062c:	ee07 1a90 	vmov	s15, r1
 8000630:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000634:	009b      	lsls	r3, r3, #2
 8000636:	4413      	add	r3, r2
 8000638:	3304      	adds	r3, #4
 800063a:	edc3 7a00 	vstr	s15, [r3]
	adt7301->samples[ts] /= 32.;
 800063e:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <ADT7301_Collect_Sample+0x114>)
 8000640:	681a      	ldr	r2, [r3, #0]
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	009b      	lsls	r3, r3, #2
 8000646:	4413      	add	r3, r2
 8000648:	3304      	adds	r3, #4
 800064a:	ed93 7a00 	vldr	s14, [r3]
 800064e:	4b08      	ldr	r3, [pc, #32]	; (8000670 <ADT7301_Collect_Sample+0x114>)
 8000650:	681a      	ldr	r2, [r3, #0]
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	eddf 6a07 	vldr	s13, [pc, #28]	; 8000674 <ADT7301_Collect_Sample+0x118>
 8000658:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800065c:	009b      	lsls	r3, r3, #2
 800065e:	4413      	add	r3, r2
 8000660:	3304      	adds	r3, #4
 8000662:	edc3 7a00 	vstr	s15, [r3]
}
 8000666:	bf00      	nop
 8000668:	3710      	adds	r7, #16
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	20003c4c 	.word	0x20003c4c
 8000674:	42000000 	.word	0x42000000

08000678 <ADT7301_Shutdown>:

// Puts temperature sensor ts into shutdown mode.
void ADT7301_Shutdown(temp_sensor ts) {
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	4603      	mov	r3, r0
 8000680:	71fb      	strb	r3, [r7, #7]
	uint8_t dummy_buffer[2];
	uint8_t shutdown_cmd[2] = {0x20, 0x00};
 8000682:	2320      	movs	r3, #32
 8000684:	813b      	strh	r3, [r7, #8]

	if (ts == TEMP1) {
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d114      	bne.n	80006b6 <ADT7301_Shutdown+0x3e>
		LL_GPIO_ResetOutputPin(TEMP1_CS_GPIOx, TEMP1_CS_PIN);
 800068c:	2108      	movs	r1, #8
 800068e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000692:	f7ff ff3f 	bl	8000514 <LL_GPIO_ResetOutputPin>
		SPI_TransmitReceive(adt7301->SPIx, 2, shutdown_cmd, dummy_buffer);
 8000696:	4b23      	ldr	r3, [pc, #140]	; (8000724 <ADT7301_Shutdown+0xac>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	6818      	ldr	r0, [r3, #0]
 800069c:	f107 030c 	add.w	r3, r7, #12
 80006a0:	f107 0208 	add.w	r2, r7, #8
 80006a4:	2102      	movs	r1, #2
 80006a6:	f001 fb37 	bl	8001d18 <SPI_TransmitReceive>
		LL_GPIO_SetOutputPin(TEMP1_CS_GPIOx, TEMP1_CS_PIN);
 80006aa:	2108      	movs	r1, #8
 80006ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006b0:	f7ff ff22 	bl	80004f8 <LL_GPIO_SetOutputPin>
	} else if (ts == TEMP3) {
		LL_GPIO_ResetOutputPin(TEMP3_CS_GPIOx, TEMP3_CS_PIN);
		SPI_TransmitReceive(adt7301->SPIx, 2, shutdown_cmd, dummy_buffer);
		LL_GPIO_SetOutputPin(TEMP3_CS_GPIOx, TEMP3_CS_PIN);
	}
}
 80006b4:	e032      	b.n	800071c <ADT7301_Shutdown+0xa4>
	} else if (ts == TEMP2) {
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	2b01      	cmp	r3, #1
 80006ba:	d116      	bne.n	80006ea <ADT7301_Shutdown+0x72>
		LL_GPIO_ResetOutputPin(TEMP2_CS_GPIOx, TEMP2_CS_PIN);
 80006bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006c4:	f7ff ff26 	bl	8000514 <LL_GPIO_ResetOutputPin>
		SPI_TransmitReceive(adt7301->SPIx, 2, shutdown_cmd, dummy_buffer);
 80006c8:	4b16      	ldr	r3, [pc, #88]	; (8000724 <ADT7301_Shutdown+0xac>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	6818      	ldr	r0, [r3, #0]
 80006ce:	f107 030c 	add.w	r3, r7, #12
 80006d2:	f107 0208 	add.w	r2, r7, #8
 80006d6:	2102      	movs	r1, #2
 80006d8:	f001 fb1e 	bl	8001d18 <SPI_TransmitReceive>
		LL_GPIO_SetOutputPin(TEMP2_CS_GPIOx, TEMP2_CS_PIN);
 80006dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e4:	f7ff ff08 	bl	80004f8 <LL_GPIO_SetOutputPin>
}
 80006e8:	e018      	b.n	800071c <ADT7301_Shutdown+0xa4>
	} else if (ts == TEMP3) {
 80006ea:	79fb      	ldrb	r3, [r7, #7]
 80006ec:	2b02      	cmp	r3, #2
 80006ee:	d115      	bne.n	800071c <ADT7301_Shutdown+0xa4>
		LL_GPIO_ResetOutputPin(TEMP3_CS_GPIOx, TEMP3_CS_PIN);
 80006f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006f8:	f7ff ff0c 	bl	8000514 <LL_GPIO_ResetOutputPin>
		SPI_TransmitReceive(adt7301->SPIx, 2, shutdown_cmd, dummy_buffer);
 80006fc:	4b09      	ldr	r3, [pc, #36]	; (8000724 <ADT7301_Shutdown+0xac>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	6818      	ldr	r0, [r3, #0]
 8000702:	f107 030c 	add.w	r3, r7, #12
 8000706:	f107 0208 	add.w	r2, r7, #8
 800070a:	2102      	movs	r1, #2
 800070c:	f001 fb04 	bl	8001d18 <SPI_TransmitReceive>
		LL_GPIO_SetOutputPin(TEMP3_CS_GPIOx, TEMP3_CS_PIN);
 8000710:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000714:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000718:	f7ff feee 	bl	80004f8 <LL_GPIO_SetOutputPin>
}
 800071c:	bf00      	nop
 800071e:	3710      	adds	r7, #16
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20003c4c 	.word	0x20003c4c

08000728 <ADT7301_Wakeup>:

// Wakes sensor up from shutdown mode.
void ADT7301_Wakeup(temp_sensor ts) {
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	71fb      	strb	r3, [r7, #7]
	uint8_t dummy_buffer[2];
	uint8_t wakeup_cmd[2] = {0};
 8000732:	2300      	movs	r3, #0
 8000734:	813b      	strh	r3, [r7, #8]

	if (ts == TEMP1) {
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d114      	bne.n	8000766 <ADT7301_Wakeup+0x3e>
		LL_GPIO_ResetOutputPin(TEMP1_CS_GPIOx, TEMP1_CS_PIN);
 800073c:	2108      	movs	r1, #8
 800073e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000742:	f7ff fee7 	bl	8000514 <LL_GPIO_ResetOutputPin>
		SPI_TransmitReceive(adt7301->SPIx, 2, wakeup_cmd, dummy_buffer);
 8000746:	4b23      	ldr	r3, [pc, #140]	; (80007d4 <ADT7301_Wakeup+0xac>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	6818      	ldr	r0, [r3, #0]
 800074c:	f107 030c 	add.w	r3, r7, #12
 8000750:	f107 0208 	add.w	r2, r7, #8
 8000754:	2102      	movs	r1, #2
 8000756:	f001 fadf 	bl	8001d18 <SPI_TransmitReceive>
		LL_GPIO_SetOutputPin(TEMP1_CS_GPIOx, TEMP1_CS_PIN);
 800075a:	2108      	movs	r1, #8
 800075c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000760:	f7ff feca 	bl	80004f8 <LL_GPIO_SetOutputPin>
	} else if (ts == TEMP3) {
		LL_GPIO_ResetOutputPin(TEMP3_CS_GPIOx, TEMP3_CS_PIN);
		SPI_TransmitReceive(adt7301->SPIx, 2, wakeup_cmd, dummy_buffer);
		LL_GPIO_SetOutputPin(TEMP3_CS_GPIOx, TEMP3_CS_PIN);
	}
}
 8000764:	e032      	b.n	80007cc <ADT7301_Wakeup+0xa4>
	} else if (ts == TEMP2) {
 8000766:	79fb      	ldrb	r3, [r7, #7]
 8000768:	2b01      	cmp	r3, #1
 800076a:	d116      	bne.n	800079a <ADT7301_Wakeup+0x72>
		LL_GPIO_ResetOutputPin(TEMP2_CS_GPIOx, TEMP2_CS_PIN);
 800076c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000770:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000774:	f7ff fece 	bl	8000514 <LL_GPIO_ResetOutputPin>
		SPI_TransmitReceive(adt7301->SPIx, 2, wakeup_cmd, dummy_buffer);
 8000778:	4b16      	ldr	r3, [pc, #88]	; (80007d4 <ADT7301_Wakeup+0xac>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	6818      	ldr	r0, [r3, #0]
 800077e:	f107 030c 	add.w	r3, r7, #12
 8000782:	f107 0208 	add.w	r2, r7, #8
 8000786:	2102      	movs	r1, #2
 8000788:	f001 fac6 	bl	8001d18 <SPI_TransmitReceive>
		LL_GPIO_SetOutputPin(TEMP2_CS_GPIOx, TEMP2_CS_PIN);
 800078c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000790:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000794:	f7ff feb0 	bl	80004f8 <LL_GPIO_SetOutputPin>
}
 8000798:	e018      	b.n	80007cc <ADT7301_Wakeup+0xa4>
	} else if (ts == TEMP3) {
 800079a:	79fb      	ldrb	r3, [r7, #7]
 800079c:	2b02      	cmp	r3, #2
 800079e:	d115      	bne.n	80007cc <ADT7301_Wakeup+0xa4>
		LL_GPIO_ResetOutputPin(TEMP3_CS_GPIOx, TEMP3_CS_PIN);
 80007a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007a8:	f7ff feb4 	bl	8000514 <LL_GPIO_ResetOutputPin>
		SPI_TransmitReceive(adt7301->SPIx, 2, wakeup_cmd, dummy_buffer);
 80007ac:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <ADT7301_Wakeup+0xac>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	6818      	ldr	r0, [r3, #0]
 80007b2:	f107 030c 	add.w	r3, r7, #12
 80007b6:	f107 0208 	add.w	r2, r7, #8
 80007ba:	2102      	movs	r1, #2
 80007bc:	f001 faac 	bl	8001d18 <SPI_TransmitReceive>
		LL_GPIO_SetOutputPin(TEMP3_CS_GPIOx, TEMP3_CS_PIN);
 80007c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c8:	f7ff fe96 	bl	80004f8 <LL_GPIO_SetOutputPin>
}
 80007cc:	bf00      	nop
 80007ce:	3710      	adds	r7, #16
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	20003c4c 	.word	0x20003c4c

080007d8 <__NVIC_GetPriorityGrouping>:
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007dc:	4b04      	ldr	r3, [pc, #16]	; (80007f0 <__NVIC_GetPriorityGrouping+0x18>)
 80007de:	68db      	ldr	r3, [r3, #12]
 80007e0:	0a1b      	lsrs	r3, r3, #8
 80007e2:	f003 0307 	and.w	r3, r3, #7
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr
 80007f0:	e000ed00 	.word	0xe000ed00

080007f4 <__NVIC_EnableIRQ>:
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	4603      	mov	r3, r0
 80007fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000802:	2b00      	cmp	r3, #0
 8000804:	db0b      	blt.n	800081e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	f003 021f 	and.w	r2, r3, #31
 800080c:	4907      	ldr	r1, [pc, #28]	; (800082c <__NVIC_EnableIRQ+0x38>)
 800080e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000812:	095b      	lsrs	r3, r3, #5
 8000814:	2001      	movs	r0, #1
 8000816:	fa00 f202 	lsl.w	r2, r0, r2
 800081a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800081e:	bf00      	nop
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	e000e100 	.word	0xe000e100

08000830 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	4603      	mov	r3, r0
 8000838:	6039      	str	r1, [r7, #0]
 800083a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800083c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000840:	2b00      	cmp	r3, #0
 8000842:	db0a      	blt.n	800085a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	b2da      	uxtb	r2, r3
 8000848:	490c      	ldr	r1, [pc, #48]	; (800087c <__NVIC_SetPriority+0x4c>)
 800084a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800084e:	0112      	lsls	r2, r2, #4
 8000850:	b2d2      	uxtb	r2, r2
 8000852:	440b      	add	r3, r1
 8000854:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000858:	e00a      	b.n	8000870 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	b2da      	uxtb	r2, r3
 800085e:	4908      	ldr	r1, [pc, #32]	; (8000880 <__NVIC_SetPriority+0x50>)
 8000860:	79fb      	ldrb	r3, [r7, #7]
 8000862:	f003 030f 	and.w	r3, r3, #15
 8000866:	3b04      	subs	r3, #4
 8000868:	0112      	lsls	r2, r2, #4
 800086a:	b2d2      	uxtb	r2, r2
 800086c:	440b      	add	r3, r1
 800086e:	761a      	strb	r2, [r3, #24]
}
 8000870:	bf00      	nop
 8000872:	370c      	adds	r7, #12
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr
 800087c:	e000e100 	.word	0xe000e100
 8000880:	e000ed00 	.word	0xe000ed00

08000884 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000884:	b480      	push	{r7}
 8000886:	b089      	sub	sp, #36	; 0x24
 8000888:	af00      	add	r7, sp, #0
 800088a:	60f8      	str	r0, [r7, #12]
 800088c:	60b9      	str	r1, [r7, #8]
 800088e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	f003 0307 	and.w	r3, r3, #7
 8000896:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000898:	69fb      	ldr	r3, [r7, #28]
 800089a:	f1c3 0307 	rsb	r3, r3, #7
 800089e:	2b04      	cmp	r3, #4
 80008a0:	bf28      	it	cs
 80008a2:	2304      	movcs	r3, #4
 80008a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008a6:	69fb      	ldr	r3, [r7, #28]
 80008a8:	3304      	adds	r3, #4
 80008aa:	2b06      	cmp	r3, #6
 80008ac:	d902      	bls.n	80008b4 <NVIC_EncodePriority+0x30>
 80008ae:	69fb      	ldr	r3, [r7, #28]
 80008b0:	3b03      	subs	r3, #3
 80008b2:	e000      	b.n	80008b6 <NVIC_EncodePriority+0x32>
 80008b4:	2300      	movs	r3, #0
 80008b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80008bc:	69bb      	ldr	r3, [r7, #24]
 80008be:	fa02 f303 	lsl.w	r3, r2, r3
 80008c2:	43da      	mvns	r2, r3
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	401a      	ands	r2, r3
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	fa01 f303 	lsl.w	r3, r1, r3
 80008d6:	43d9      	mvns	r1, r3
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008dc:	4313      	orrs	r3, r2
         );
}
 80008de:	4618      	mov	r0, r3
 80008e0:	3724      	adds	r7, #36	; 0x24
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
	...

080008ec <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b085      	sub	sp, #20
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 80008fa:	4a0c      	ldr	r2, [pc, #48]	; (800092c <LL_DMA_EnableChannel+0x40>)
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	4413      	add	r3, r2
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	461a      	mov	r2, r3
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	4413      	add	r3, r2
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4908      	ldr	r1, [pc, #32]	; (800092c <LL_DMA_EnableChannel+0x40>)
 800090c:	683a      	ldr	r2, [r7, #0]
 800090e:	440a      	add	r2, r1
 8000910:	7812      	ldrb	r2, [r2, #0]
 8000912:	4611      	mov	r1, r2
 8000914:	68fa      	ldr	r2, [r7, #12]
 8000916:	440a      	add	r2, r1
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	6013      	str	r3, [r2, #0]
}
 800091e:	bf00      	nop
 8000920:	3714      	adds	r7, #20
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	08002bf8 	.word	0x08002bf8

08000930 <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000930:	b480      	push	{r7}
 8000932:	b085      	sub	sp, #20
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
 8000938:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	60fb      	str	r3, [r7, #12]
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 800093e:	4a0c      	ldr	r2, [pc, #48]	; (8000970 <LL_DMA_DisableChannel+0x40>)
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	4413      	add	r3, r2
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	461a      	mov	r2, r3
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	4413      	add	r3, r2
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4908      	ldr	r1, [pc, #32]	; (8000970 <LL_DMA_DisableChannel+0x40>)
 8000950:	683a      	ldr	r2, [r7, #0]
 8000952:	440a      	add	r2, r1
 8000954:	7812      	ldrb	r2, [r2, #0]
 8000956:	4611      	mov	r1, r2
 8000958:	68fa      	ldr	r2, [r7, #12]
 800095a:	440a      	add	r2, r1
 800095c:	f023 0301 	bic.w	r3, r3, #1
 8000960:	6013      	str	r3, [r2, #0]
}
 8000962:	bf00      	nop
 8000964:	3714      	adds	r7, #20
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	08002bf8 	.word	0x08002bf8

08000974 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 8000974:	b480      	push	{r7}
 8000976:	b087      	sub	sp, #28
 8000978:	af00      	add	r7, sp, #0
 800097a:	60f8      	str	r0, [r7, #12]
 800097c:	60b9      	str	r1, [r7, #8]
 800097e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8000984:	4a0d      	ldr	r2, [pc, #52]	; (80009bc <LL_DMA_SetDataLength+0x48>)
 8000986:	68bb      	ldr	r3, [r7, #8]
 8000988:	4413      	add	r3, r2
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	461a      	mov	r2, r3
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	4413      	add	r3, r2
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	0c1b      	lsrs	r3, r3, #16
 8000996:	041b      	lsls	r3, r3, #16
 8000998:	4908      	ldr	r1, [pc, #32]	; (80009bc <LL_DMA_SetDataLength+0x48>)
 800099a:	68ba      	ldr	r2, [r7, #8]
 800099c:	440a      	add	r2, r1
 800099e:	7812      	ldrb	r2, [r2, #0]
 80009a0:	4611      	mov	r1, r2
 80009a2:	697a      	ldr	r2, [r7, #20]
 80009a4:	440a      	add	r2, r1
 80009a6:	4611      	mov	r1, r2
 80009a8:	687a      	ldr	r2, [r7, #4]
 80009aa:	4313      	orrs	r3, r2
 80009ac:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 80009ae:	bf00      	nop
 80009b0:	371c      	adds	r7, #28
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	08002bf8 	.word	0x08002bf8

080009c0 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  MemoryAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAddress)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b087      	sub	sp, #28
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	60b9      	str	r1, [r7, #8]
 80009ca:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 80009d0:	4a07      	ldr	r2, [pc, #28]	; (80009f0 <LL_DMA_SetMemoryAddress+0x30>)
 80009d2:	68bb      	ldr	r3, [r7, #8]
 80009d4:	4413      	add	r3, r2
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	461a      	mov	r2, r3
 80009da:	697b      	ldr	r3, [r7, #20]
 80009dc:	4413      	add	r3, r2
 80009de:	461a      	mov	r2, r3
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	60d3      	str	r3, [r2, #12]
}
 80009e4:	bf00      	nop
 80009e6:	371c      	adds	r7, #28
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr
 80009f0:	08002bf8 	.word	0x08002bf8

080009f4 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  PeriphAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b087      	sub	sp, #28
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	60f8      	str	r0, [r7, #12]
 80009fc:	60b9      	str	r1, [r7, #8]
 80009fe:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 8000a04:	4a07      	ldr	r2, [pc, #28]	; (8000a24 <LL_DMA_SetPeriphAddress+0x30>)
 8000a06:	68bb      	ldr	r3, [r7, #8]
 8000a08:	4413      	add	r3, r2
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	4413      	add	r3, r2
 8000a12:	461a      	mov	r2, r3
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	6093      	str	r3, [r2, #8]
}
 8000a18:	bf00      	nop
 8000a1a:	371c      	adds	r7, #28
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr
 8000a24:	08002bf8 	.word	0x08002bf8

08000a28 <LL_DMA_ClearFlag_TC1>:
  * @rmtoll IFCR         CTCIF1        LL_DMA_ClearFlag_TC1
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC1(DMA_TypeDef *DMAx)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	2202      	movs	r2, #2
 8000a34:	605a      	str	r2, [r3, #4]
}
 8000a36:	bf00      	nop
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr

08000a42 <LL_DMA_ClearFlag_TC2>:
  * @rmtoll IFCR         CTCIF2        LL_DMA_ClearFlag_TC2
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC2(DMA_TypeDef *DMAx)
{
 8000a42:	b480      	push	{r7}
 8000a44:	b083      	sub	sp, #12
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF2);
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2220      	movs	r2, #32
 8000a4e:	605a      	str	r2, [r3, #4]
}
 8000a50:	bf00      	nop
 8000a52:	370c      	adds	r7, #12
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr

08000a5c <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;    
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 8000a6a:	4a0c      	ldr	r2, [pc, #48]	; (8000a9c <LL_DMA_EnableIT_TC+0x40>)
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	4413      	add	r3, r2
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	461a      	mov	r2, r3
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	4413      	add	r3, r2
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4908      	ldr	r1, [pc, #32]	; (8000a9c <LL_DMA_EnableIT_TC+0x40>)
 8000a7c:	683a      	ldr	r2, [r7, #0]
 8000a7e:	440a      	add	r2, r1
 8000a80:	7812      	ldrb	r2, [r2, #0]
 8000a82:	4611      	mov	r1, r2
 8000a84:	68fa      	ldr	r2, [r7, #12]
 8000a86:	440a      	add	r2, r1
 8000a88:	f043 0302 	orr.w	r3, r3, #2
 8000a8c:	6013      	str	r3, [r2, #0]
}
 8000a8e:	bf00      	nop
 8000a90:	3714      	adds	r7, #20
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	08002bf8 	.word	0x08002bf8

08000aa0 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b085      	sub	sp, #20
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000aa8:	4b08      	ldr	r3, [pc, #32]	; (8000acc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000aaa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000aac:	4907      	ldr	r1, [pc, #28]	; (8000acc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000ab4:	4b05      	ldr	r3, [pc, #20]	; (8000acc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000ab6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	4013      	ands	r3, r2
 8000abc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000abe:	68fb      	ldr	r3, [r7, #12]
}
 8000ac0:	bf00      	nop
 8000ac2:	3714      	adds	r7, #20
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr
 8000acc:	40021000 	.word	0x40021000

08000ad0 <LL_GPIO_SetOutputPin>:
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	683a      	ldr	r2, [r7, #0]
 8000ade:	619a      	str	r2, [r3, #24]
}
 8000ae0:	bf00      	nop
 8000ae2:	370c      	adds	r7, #12
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 8000af0:	2002      	movs	r0, #2
 8000af2:	f7ff ffd5 	bl	8000aa0 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA2_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000af6:	f7ff fe6f 	bl	80007d8 <__NVIC_GetPriorityGrouping>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2200      	movs	r2, #0
 8000afe:	2100      	movs	r1, #0
 8000b00:	4618      	mov	r0, r3
 8000b02:	f7ff febf 	bl	8000884 <NVIC_EncodePriority>
 8000b06:	4603      	mov	r3, r0
 8000b08:	4619      	mov	r1, r3
 8000b0a:	2038      	movs	r0, #56	; 0x38
 8000b0c:	f7ff fe90 	bl	8000830 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8000b10:	2038      	movs	r0, #56	; 0x38
 8000b12:	f7ff fe6f 	bl	80007f4 <__NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Channel2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000b16:	f7ff fe5f 	bl	80007d8 <__NVIC_GetPriorityGrouping>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2100      	movs	r1, #0
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff feaf 	bl	8000884 <NVIC_EncodePriority>
 8000b26:	4603      	mov	r3, r0
 8000b28:	4619      	mov	r1, r3
 8000b2a:	2039      	movs	r0, #57	; 0x39
 8000b2c:	f7ff fe80 	bl	8000830 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8000b30:	2039      	movs	r0, #57	; 0x39
 8000b32:	f7ff fe5f 	bl	80007f4 <__NVIC_EnableIRQ>

}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <DMA_Channel_Init>:

/* USER CODE BEGIN 2 */
void DMA_Channel_Init(DMA_TypeDef *DMAx, uint32_t channel, uint32_t periph_addr, uint8_t *mem_addr) {
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b084      	sub	sp, #16
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	60f8      	str	r0, [r7, #12]
 8000b42:	60b9      	str	r1, [r7, #8]
 8000b44:	607a      	str	r2, [r7, #4]
 8000b46:	603b      	str	r3, [r7, #0]
	LL_DMA_SetPeriphAddress(DMAx, channel, periph_addr);
 8000b48:	687a      	ldr	r2, [r7, #4]
 8000b4a:	68b9      	ldr	r1, [r7, #8]
 8000b4c:	68f8      	ldr	r0, [r7, #12]
 8000b4e:	f7ff ff51 	bl	80009f4 <LL_DMA_SetPeriphAddress>
	LL_DMA_SetMemoryAddress(DMAx, channel, (uint32_t) mem_addr);
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	461a      	mov	r2, r3
 8000b56:	68b9      	ldr	r1, [r7, #8]
 8000b58:	68f8      	ldr	r0, [r7, #12]
 8000b5a:	f7ff ff31 	bl	80009c0 <LL_DMA_SetMemoryAddress>
	LL_DMA_EnableIT_TC(DMAx, channel);
 8000b5e:	68b9      	ldr	r1, [r7, #8]
 8000b60:	68f8      	ldr	r0, [r7, #12]
 8000b62:	f7ff ff7b 	bl	8000a5c <LL_DMA_EnableIT_TC>
}
 8000b66:	bf00      	nop
 8000b68:	3710      	adds	r7, #16
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <DMA_Set_Channel_Data_Length>:

void DMA_Set_Channel_Data_Length(DMA_TypeDef *DMAx, uint32_t channel, uint32_t length) {
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	b084      	sub	sp, #16
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	60f8      	str	r0, [r7, #12]
 8000b76:	60b9      	str	r1, [r7, #8]
 8000b78:	607a      	str	r2, [r7, #4]
	LL_DMA_SetDataLength(DMAx, channel, length);
 8000b7a:	687a      	ldr	r2, [r7, #4]
 8000b7c:	68b9      	ldr	r1, [r7, #8]
 8000b7e:	68f8      	ldr	r0, [r7, #12]
 8000b80:	f7ff fef8 	bl	8000974 <LL_DMA_SetDataLength>
}
 8000b84:	bf00      	nop
 8000b86:	3710      	adds	r7, #16
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <DMA_Reload_Memory_Address>:

void DMA_Reload_Memory_Address(DMA_TypeDef *DMAx, uint32_t channel, uint8_t *mem_addr) {
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	60f8      	str	r0, [r7, #12]
 8000b94:	60b9      	str	r1, [r7, #8]
 8000b96:	607a      	str	r2, [r7, #4]
	LL_DMA_SetMemoryAddress(DMAx, channel, (uint32_t) mem_addr);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	68b9      	ldr	r1, [r7, #8]
 8000b9e:	68f8      	ldr	r0, [r7, #12]
 8000ba0:	f7ff ff0e 	bl	80009c0 <LL_DMA_SetMemoryAddress>
}
 8000ba4:	bf00      	nop
 8000ba6:	3710      	adds	r7, #16
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}

08000bac <DMA_Enable_CH1_CH2>:

void DMA_Enable_CH1_CH2(DMA_TypeDef *DMAx) {
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
	LL_DMA_EnableChannel(DMAx, LL_DMA_CHANNEL_1);
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	6878      	ldr	r0, [r7, #4]
 8000bb8:	f7ff fe98 	bl	80008ec <LL_DMA_EnableChannel>
	LL_DMA_EnableChannel(DMAx, LL_DMA_CHANNEL_2);
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	6878      	ldr	r0, [r7, #4]
 8000bc0:	f7ff fe94 	bl	80008ec <LL_DMA_EnableChannel>
}
 8000bc4:	bf00      	nop
 8000bc6:	3708      	adds	r7, #8
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <DMA_Transfer_Complete_RX_interrupt_handler>:

void DMA_Transfer_Complete_RX_interrupt_handler() {
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
	LL_DMA_ClearFlag_TC1(DMA2);
 8000bd0:	480b      	ldr	r0, [pc, #44]	; (8000c00 <DMA_Transfer_Complete_RX_interrupt_handler+0x34>)
 8000bd2:	f7ff ff29 	bl	8000a28 <LL_DMA_ClearFlag_TC1>
	LL_DMA_DisableChannel(DMA2, LL_DMA_CHANNEL_1);
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	4809      	ldr	r0, [pc, #36]	; (8000c00 <DMA_Transfer_Complete_RX_interrupt_handler+0x34>)
 8000bda:	f7ff fea9 	bl	8000930 <LL_DMA_DisableChannel>

	if (tc == 1) {
 8000bde:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <DMA_Transfer_Complete_RX_interrupt_handler+0x38>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d106      	bne.n	8000bf6 <DMA_Transfer_Complete_RX_interrupt_handler+0x2a>
		DMA_Disable(SB_SPIx);
 8000be8:	4807      	ldr	r0, [pc, #28]	; (8000c08 <DMA_Transfer_Complete_RX_interrupt_handler+0x3c>)
 8000bea:	f000 f82f 	bl	8000c4c <DMA_Disable>
		tc = 0;
 8000bee:	4b05      	ldr	r3, [pc, #20]	; (8000c04 <DMA_Transfer_Complete_RX_interrupt_handler+0x38>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	701a      	strb	r2, [r3, #0]
	} else {
		tc = 1;
	}
}
 8000bf4:	e002      	b.n	8000bfc <DMA_Transfer_Complete_RX_interrupt_handler+0x30>
		tc = 1;
 8000bf6:	4b03      	ldr	r3, [pc, #12]	; (8000c04 <DMA_Transfer_Complete_RX_interrupt_handler+0x38>)
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	701a      	strb	r2, [r3, #0]
}
 8000bfc:	bf00      	nop
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	40020400 	.word	0x40020400
 8000c04:	20003c50 	.word	0x20003c50
 8000c08:	40003c00 	.word	0x40003c00

08000c0c <DMA_Transfer_Complete_TX_interrupt_handler>:

void DMA_Transfer_Complete_TX_interrupt_handler() {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
	LL_DMA_ClearFlag_TC2(DMA2);
 8000c10:	480b      	ldr	r0, [pc, #44]	; (8000c40 <DMA_Transfer_Complete_TX_interrupt_handler+0x34>)
 8000c12:	f7ff ff16 	bl	8000a42 <LL_DMA_ClearFlag_TC2>
	LL_DMA_DisableChannel(DMA2, LL_DMA_CHANNEL_2);
 8000c16:	2101      	movs	r1, #1
 8000c18:	4809      	ldr	r0, [pc, #36]	; (8000c40 <DMA_Transfer_Complete_TX_interrupt_handler+0x34>)
 8000c1a:	f7ff fe89 	bl	8000930 <LL_DMA_DisableChannel>

	if (tc == 1) {
 8000c1e:	4b09      	ldr	r3, [pc, #36]	; (8000c44 <DMA_Transfer_Complete_TX_interrupt_handler+0x38>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d106      	bne.n	8000c36 <DMA_Transfer_Complete_TX_interrupt_handler+0x2a>
		DMA_Disable(SB_SPIx);
 8000c28:	4807      	ldr	r0, [pc, #28]	; (8000c48 <DMA_Transfer_Complete_TX_interrupt_handler+0x3c>)
 8000c2a:	f000 f80f 	bl	8000c4c <DMA_Disable>
		tc = 0;
 8000c2e:	4b05      	ldr	r3, [pc, #20]	; (8000c44 <DMA_Transfer_Complete_TX_interrupt_handler+0x38>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	701a      	strb	r2, [r3, #0]
	} else {
		tc = 1;
	}
}
 8000c34:	e002      	b.n	8000c3c <DMA_Transfer_Complete_TX_interrupt_handler+0x30>
		tc = 1;
 8000c36:	4b03      	ldr	r3, [pc, #12]	; (8000c44 <DMA_Transfer_Complete_TX_interrupt_handler+0x38>)
 8000c38:	2201      	movs	r2, #1
 8000c3a:	701a      	strb	r2, [r3, #0]
}
 8000c3c:	bf00      	nop
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40020400 	.word	0x40020400
 8000c44:	20003c50 	.word	0x20003c50
 8000c48:	40003c00 	.word	0x40003c00

08000c4c <DMA_Disable>:


void DMA_Disable(SPI_TypeDef *SPIx) {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
	SPI_Disable(SPIx);
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	f001 f8ae 	bl	8001db6 <SPI_Disable>

	SPI_Disable_DMA_Requests(SPIx);
 8000c5a:	6878      	ldr	r0, [r7, #4]
 8000c5c:	f001 f830 	bl	8001cc0 <SPI_Disable_DMA_Requests>

	LL_GPIO_SetOutputPin(ADC_CS_GPIOx, ADC_CS_PIN);
 8000c60:	2102      	movs	r1, #2
 8000c62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c66:	f7ff ff33 	bl	8000ad0 <LL_GPIO_SetOutputPin>
	NVIC_EnableIRQ(EXTI4_IRQn);
 8000c6a:	200a      	movs	r0, #10
 8000c6c:	f7ff fdc2 	bl	80007f4 <__NVIC_EnableIRQ>
}
 8000c70:	bf00      	nop
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <__NVIC_GetPriorityGrouping>:
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c7c:	4b04      	ldr	r3, [pc, #16]	; (8000c90 <__NVIC_GetPriorityGrouping+0x18>)
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	0a1b      	lsrs	r3, r3, #8
 8000c82:	f003 0307 	and.w	r3, r3, #7
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <__NVIC_EnableIRQ>:
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	db0b      	blt.n	8000cbe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	f003 021f 	and.w	r2, r3, #31
 8000cac:	4907      	ldr	r1, [pc, #28]	; (8000ccc <__NVIC_EnableIRQ+0x38>)
 8000cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb2:	095b      	lsrs	r3, r3, #5
 8000cb4:	2001      	movs	r0, #1
 8000cb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000cbe:	bf00      	nop
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	e000e100 	.word	0xe000e100

08000cd0 <__NVIC_SetPriority>:
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	6039      	str	r1, [r7, #0]
 8000cda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	db0a      	blt.n	8000cfa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	b2da      	uxtb	r2, r3
 8000ce8:	490c      	ldr	r1, [pc, #48]	; (8000d1c <__NVIC_SetPriority+0x4c>)
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	0112      	lsls	r2, r2, #4
 8000cf0:	b2d2      	uxtb	r2, r2
 8000cf2:	440b      	add	r3, r1
 8000cf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000cf8:	e00a      	b.n	8000d10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	4908      	ldr	r1, [pc, #32]	; (8000d20 <__NVIC_SetPriority+0x50>)
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	f003 030f 	and.w	r3, r3, #15
 8000d06:	3b04      	subs	r3, #4
 8000d08:	0112      	lsls	r2, r2, #4
 8000d0a:	b2d2      	uxtb	r2, r2
 8000d0c:	440b      	add	r3, r1
 8000d0e:	761a      	strb	r2, [r3, #24]
}
 8000d10:	bf00      	nop
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	e000e100 	.word	0xe000e100
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <NVIC_EncodePriority>:
{
 8000d24:	b480      	push	{r7}
 8000d26:	b089      	sub	sp, #36	; 0x24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	f1c3 0307 	rsb	r3, r3, #7
 8000d3e:	2b04      	cmp	r3, #4
 8000d40:	bf28      	it	cs
 8000d42:	2304      	movcs	r3, #4
 8000d44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	3304      	adds	r3, #4
 8000d4a:	2b06      	cmp	r3, #6
 8000d4c:	d902      	bls.n	8000d54 <NVIC_EncodePriority+0x30>
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	3b03      	subs	r3, #3
 8000d52:	e000      	b.n	8000d56 <NVIC_EncodePriority+0x32>
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	43da      	mvns	r2, r3
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	401a      	ands	r2, r3
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	fa01 f303 	lsl.w	r3, r1, r3
 8000d76:	43d9      	mvns	r1, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d7c:	4313      	orrs	r3, r2
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3724      	adds	r7, #36	; 0x24
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
	...

08000d8c <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b085      	sub	sp, #20
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000d94:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000d96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d98:	4907      	ldr	r1, [pc, #28]	; (8000db8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000da0:	4b05      	ldr	r3, [pc, #20]	; (8000db8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000da2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	4013      	ands	r3, r2
 8000da8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000daa:	68fb      	ldr	r3, [r7, #12]
}
 8000dac:	bf00      	nop
 8000dae:	3714      	adds	r7, #20
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	40021000 	.word	0x40021000

08000dbc <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b087      	sub	sp, #28
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8000dc6:	4a17      	ldr	r2, [pc, #92]	; (8000e24 <LL_SYSCFG_SetEXTISource+0x68>)
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	3302      	adds	r3, #2
 8000dce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	0c1b      	lsrs	r3, r3, #16
 8000dd6:	43db      	mvns	r3, r3
 8000dd8:	ea02 0103 	and.w	r1, r2, r3
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	0c1b      	lsrs	r3, r3, #16
 8000de0:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	fa93 f3a3 	rbit	r3, r3
 8000de8:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d101      	bne.n	8000df8 <LL_SYSCFG_SetEXTISource+0x3c>
  {
    return 32U;
 8000df4:	2320      	movs	r3, #32
 8000df6:	e003      	b.n	8000e00 <LL_SYSCFG_SetEXTISource+0x44>
  }
  return __builtin_clz(value);
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	fab3 f383 	clz	r3, r3
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	461a      	mov	r2, r3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	fa03 f202 	lsl.w	r2, r3, r2
 8000e08:	4806      	ldr	r0, [pc, #24]	; (8000e24 <LL_SYSCFG_SetEXTISource+0x68>)
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	430a      	orrs	r2, r1
 8000e10:	3302      	adds	r3, #2
 8000e12:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000e16:	bf00      	nop
 8000e18:	371c      	adds	r7, #28
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	40010000 	.word	0x40010000

08000e28 <LL_GPIO_SetPinMode>:
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b08b      	sub	sp, #44	; 0x2c
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	fa93 f3a3 	rbit	r3, r3
 8000e42:	613b      	str	r3, [r7, #16]
  return result;
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d101      	bne.n	8000e52 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8000e4e:	2320      	movs	r3, #32
 8000e50:	e003      	b.n	8000e5a <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8000e52:	69bb      	ldr	r3, [r7, #24]
 8000e54:	fab3 f383 	clz	r3, r3
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	2103      	movs	r1, #3
 8000e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e62:	43db      	mvns	r3, r3
 8000e64:	401a      	ands	r2, r3
 8000e66:	68bb      	ldr	r3, [r7, #8]
 8000e68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e6a:	6a3b      	ldr	r3, [r7, #32]
 8000e6c:	fa93 f3a3 	rbit	r3, r3
 8000e70:	61fb      	str	r3, [r7, #28]
  return result;
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d101      	bne.n	8000e80 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8000e7c:	2320      	movs	r3, #32
 8000e7e:	e003      	b.n	8000e88 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e82:	fab3 f383 	clz	r3, r3
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	6879      	ldr	r1, [r7, #4]
 8000e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e90:	431a      	orrs	r2, r3
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	601a      	str	r2, [r3, #0]
}
 8000e96:	bf00      	nop
 8000e98:	372c      	adds	r7, #44	; 0x2c
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr

08000ea2 <LL_GPIO_SetPinPull>:
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	b08b      	sub	sp, #44	; 0x2c
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	60f8      	str	r0, [r7, #12]
 8000eaa:	60b9      	str	r1, [r7, #8]
 8000eac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	68da      	ldr	r2, [r3, #12]
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	fa93 f3a3 	rbit	r3, r3
 8000ebc:	613b      	str	r3, [r7, #16]
  return result;
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000ec2:	69bb      	ldr	r3, [r7, #24]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d101      	bne.n	8000ecc <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8000ec8:	2320      	movs	r3, #32
 8000eca:	e003      	b.n	8000ed4 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8000ecc:	69bb      	ldr	r3, [r7, #24]
 8000ece:	fab3 f383 	clz	r3, r3
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	2103      	movs	r1, #3
 8000ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8000edc:	43db      	mvns	r3, r3
 8000ede:	401a      	ands	r2, r3
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ee4:	6a3b      	ldr	r3, [r7, #32]
 8000ee6:	fa93 f3a3 	rbit	r3, r3
 8000eea:	61fb      	str	r3, [r7, #28]
  return result;
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d101      	bne.n	8000efa <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8000ef6:	2320      	movs	r3, #32
 8000ef8:	e003      	b.n	8000f02 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8000efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000efc:	fab3 f383 	clz	r3, r3
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	6879      	ldr	r1, [r7, #4]
 8000f06:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0a:	431a      	orrs	r2, r3
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	60da      	str	r2, [r3, #12]
}
 8000f10:	bf00      	nop
 8000f12:	372c      	adds	r7, #44	; 0x2c
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <LL_GPIO_SetOutputPin>:
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	683a      	ldr	r2, [r7, #0]
 8000f2a:	619a      	str	r2, [r3, #24]
}
 8000f2c:	bf00      	nop
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08a      	sub	sp, #40	; 0x28
 8000f3c:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000f3e:	f107 031c 	add.w	r3, r7, #28
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	605a      	str	r2, [r3, #4]
 8000f48:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4a:	1d3b      	adds	r3, r7, #4
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]
 8000f58:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000f5a:	2001      	movs	r0, #1
 8000f5c:	f7ff ff16 	bl	8000d8c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000f60:	2004      	movs	r0, #4
 8000f62:	f7ff ff13 	bl	8000d8c <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3|LL_GPIO_PIN_10);
 8000f66:	f240 410e 	movw	r1, #1038	; 0x40e
 8000f6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f6e:	f7ff ffd5 	bl	8000f1c <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_9);
 8000f72:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f76:	482c      	ldr	r0, [pc, #176]	; (8001028 <MX_GPIO_Init+0xf0>)
 8000f78:	f7ff ffd0 	bl	8000f1c <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3|LL_GPIO_PIN_10;
 8000f7c:	f240 430e 	movw	r3, #1038	; 0x40e
 8000f80:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f82:	2301      	movs	r3, #1
 8000f84:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000f86:	2300      	movs	r3, #0
 8000f88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f92:	1d3b      	adds	r3, r7, #4
 8000f94:	4619      	mov	r1, r3
 8000f96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f9a:	f001 fbf3 	bl	8002784 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8000f9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fa2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fb4:	1d3b      	adds	r3, r7, #4
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	481b      	ldr	r0, [pc, #108]	; (8001028 <MX_GPIO_Init+0xf0>)
 8000fba:	f001 fbe3 	bl	8002784 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE4);
 8000fbe:	491b      	ldr	r1, [pc, #108]	; (800102c <MX_GPIO_Init+0xf4>)
 8000fc0:	2002      	movs	r0, #2
 8000fc2:	f7ff fefb 	bl	8000dbc <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_4;
 8000fc6:	2310      	movs	r3, #16
 8000fc8:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000fe0:	f107 031c 	add.w	r3, r7, #28
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f001 f98b 	bl	8002300 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(GPIOC, LL_GPIO_PIN_4, LL_GPIO_PULL_NO);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2110      	movs	r1, #16
 8000fee:	480e      	ldr	r0, [pc, #56]	; (8001028 <MX_GPIO_Init+0xf0>)
 8000ff0:	f7ff ff57 	bl	8000ea2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_4, LL_GPIO_MODE_INPUT);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2110      	movs	r1, #16
 8000ff8:	480b      	ldr	r0, [pc, #44]	; (8001028 <MX_GPIO_Init+0xf0>)
 8000ffa:	f7ff ff15 	bl	8000e28 <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000ffe:	f7ff fe3b 	bl	8000c78 <__NVIC_GetPriorityGrouping>
 8001002:	4603      	mov	r3, r0
 8001004:	2200      	movs	r2, #0
 8001006:	2100      	movs	r1, #0
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff fe8b 	bl	8000d24 <NVIC_EncodePriority>
 800100e:	4603      	mov	r3, r0
 8001010:	4619      	mov	r1, r3
 8001012:	200a      	movs	r0, #10
 8001014:	f7ff fe5c 	bl	8000cd0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI4_IRQn);
 8001018:	200a      	movs	r0, #10
 800101a:	f7ff fe3b 	bl	8000c94 <__NVIC_EnableIRQ>

}
 800101e:	bf00      	nop
 8001020:	3728      	adds	r7, #40	; 0x28
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	48000800 	.word	0x48000800
 800102c:	000f0001 	.word	0x000f0001

08001030 <__NVIC_SetPriorityGrouping>:
{
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f003 0307 	and.w	r3, r3, #7
 800103e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001040:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <__NVIC_SetPriorityGrouping+0x44>)
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001046:	68ba      	ldr	r2, [r7, #8]
 8001048:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800104c:	4013      	ands	r3, r2
 800104e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001058:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800105c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001060:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001062:	4a04      	ldr	r2, [pc, #16]	; (8001074 <__NVIC_SetPriorityGrouping+0x44>)
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	60d3      	str	r3, [r2, #12]
}
 8001068:	bf00      	nop
 800106a:	3714      	adds	r7, #20
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	e000ed00 	.word	0xe000ed00

08001078 <__NVIC_GetPriorityGrouping>:
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800107c:	4b04      	ldr	r3, [pc, #16]	; (8001090 <__NVIC_GetPriorityGrouping+0x18>)
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	0a1b      	lsrs	r3, r3, #8
 8001082:	f003 0307 	and.w	r3, r3, #7
}
 8001086:	4618      	mov	r0, r3
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	e000ed00 	.word	0xe000ed00

08001094 <__NVIC_DisableIRQ>:
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800109e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	db12      	blt.n	80010cc <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	f003 021f 	and.w	r2, r3, #31
 80010ac:	490a      	ldr	r1, [pc, #40]	; (80010d8 <__NVIC_DisableIRQ+0x44>)
 80010ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b2:	095b      	lsrs	r3, r3, #5
 80010b4:	2001      	movs	r0, #1
 80010b6:	fa00 f202 	lsl.w	r2, r0, r2
 80010ba:	3320      	adds	r3, #32
 80010bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80010c0:	f3bf 8f4f 	dsb	sy
}
 80010c4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80010c6:	f3bf 8f6f 	isb	sy
}
 80010ca:	bf00      	nop
}
 80010cc:	bf00      	nop
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	e000e100 	.word	0xe000e100

080010dc <__NVIC_SetPriority>:
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	6039      	str	r1, [r7, #0]
 80010e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	db0a      	blt.n	8001106 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	b2da      	uxtb	r2, r3
 80010f4:	490c      	ldr	r1, [pc, #48]	; (8001128 <__NVIC_SetPriority+0x4c>)
 80010f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fa:	0112      	lsls	r2, r2, #4
 80010fc:	b2d2      	uxtb	r2, r2
 80010fe:	440b      	add	r3, r1
 8001100:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001104:	e00a      	b.n	800111c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	b2da      	uxtb	r2, r3
 800110a:	4908      	ldr	r1, [pc, #32]	; (800112c <__NVIC_SetPriority+0x50>)
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	f003 030f 	and.w	r3, r3, #15
 8001112:	3b04      	subs	r3, #4
 8001114:	0112      	lsls	r2, r2, #4
 8001116:	b2d2      	uxtb	r2, r2
 8001118:	440b      	add	r3, r1
 800111a:	761a      	strb	r2, [r3, #24]
}
 800111c:	bf00      	nop
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	e000e100 	.word	0xe000e100
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <NVIC_EncodePriority>:
{
 8001130:	b480      	push	{r7}
 8001132:	b089      	sub	sp, #36	; 0x24
 8001134:	af00      	add	r7, sp, #0
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	60b9      	str	r1, [r7, #8]
 800113a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	f003 0307 	and.w	r3, r3, #7
 8001142:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	f1c3 0307 	rsb	r3, r3, #7
 800114a:	2b04      	cmp	r3, #4
 800114c:	bf28      	it	cs
 800114e:	2304      	movcs	r3, #4
 8001150:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	3304      	adds	r3, #4
 8001156:	2b06      	cmp	r3, #6
 8001158:	d902      	bls.n	8001160 <NVIC_EncodePriority+0x30>
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	3b03      	subs	r3, #3
 800115e:	e000      	b.n	8001162 <NVIC_EncodePriority+0x32>
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001164:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	43da      	mvns	r2, r3
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	401a      	ands	r2, r3
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001178:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	fa01 f303 	lsl.w	r3, r1, r3
 8001182:	43d9      	mvns	r1, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001188:	4313      	orrs	r3, r2
}
 800118a:	4618      	mov	r0, r3
 800118c:	3724      	adds	r7, #36	; 0x24
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
	...

08001198 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800119c:	4b05      	ldr	r3, [pc, #20]	; (80011b4 <LL_RCC_HSI_Enable+0x1c>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a04      	ldr	r2, [pc, #16]	; (80011b4 <LL_RCC_HSI_Enable+0x1c>)
 80011a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011a6:	6013      	str	r3, [r2, #0]
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	40021000 	.word	0x40021000

080011b8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 80011bc:	4b07      	ldr	r3, [pc, #28]	; (80011dc <LL_RCC_HSI_IsReady+0x24>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011c8:	d101      	bne.n	80011ce <LL_RCC_HSI_IsReady+0x16>
 80011ca:	2301      	movs	r3, #1
 80011cc:	e000      	b.n	80011d0 <LL_RCC_HSI_IsReady+0x18>
 80011ce:	2300      	movs	r3, #0
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	40021000 	.word	0x40021000

080011e0 <LL_RCC_HSI_SetCalibTrimming>:
  * @param  Value Between Min_Data = 0 and Max_Data = 31 on STM32L43x/STM32L44x/STM32L47x/STM32L48x or
  *               between Min_Data = 0 and Max_Data = 127 on other devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80011e8:	4b07      	ldr	r3, [pc, #28]	; (8001208 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	061b      	lsls	r3, r3, #24
 80011f4:	4904      	ldr	r1, [pc, #16]	; (8001208 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80011f6:	4313      	orrs	r3, r2
 80011f8:	604b      	str	r3, [r1, #4]
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	40021000 	.word	0x40021000

0800120c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001214:	4b06      	ldr	r3, [pc, #24]	; (8001230 <LL_RCC_SetSysClkSource+0x24>)
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	f023 0203 	bic.w	r2, r3, #3
 800121c:	4904      	ldr	r1, [pc, #16]	; (8001230 <LL_RCC_SetSysClkSource+0x24>)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4313      	orrs	r3, r2
 8001222:	608b      	str	r3, [r1, #8]
}
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	40021000 	.word	0x40021000

08001234 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001238:	4b04      	ldr	r3, [pc, #16]	; (800124c <LL_RCC_GetSysClkSource+0x18>)
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	f003 030c 	and.w	r3, r3, #12
}
 8001240:	4618      	mov	r0, r3
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	40021000 	.word	0x40021000

08001250 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001258:	4b06      	ldr	r3, [pc, #24]	; (8001274 <LL_RCC_SetAHBPrescaler+0x24>)
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001260:	4904      	ldr	r1, [pc, #16]	; (8001274 <LL_RCC_SetAHBPrescaler+0x24>)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4313      	orrs	r3, r2
 8001266:	608b      	str	r3, [r1, #8]
}
 8001268:	bf00      	nop
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr
 8001274:	40021000 	.word	0x40021000

08001278 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001280:	4b06      	ldr	r3, [pc, #24]	; (800129c <LL_RCC_SetAPB1Prescaler+0x24>)
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001288:	4904      	ldr	r1, [pc, #16]	; (800129c <LL_RCC_SetAPB1Prescaler+0x24>)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4313      	orrs	r3, r2
 800128e:	608b      	str	r3, [r1, #8]
}
 8001290:	bf00      	nop
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	40021000 	.word	0x40021000

080012a0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80012a8:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <LL_RCC_SetAPB2Prescaler+0x24>)
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80012b0:	4904      	ldr	r1, [pc, #16]	; (80012c4 <LL_RCC_SetAPB2Prescaler+0x24>)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	608b      	str	r3, [r1, #8]
}
 80012b8:	bf00      	nop
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	40021000 	.word	0x40021000

080012c8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80012d0:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80012d2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80012d4:	4907      	ldr	r1, [pc, #28]	; (80012f4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4313      	orrs	r3, r2
 80012da:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80012dc:	4b05      	ldr	r3, [pc, #20]	; (80012f4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80012de:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4013      	ands	r3, r2
 80012e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012e6:	68fb      	ldr	r3, [r7, #12]
}
 80012e8:	bf00      	nop
 80012ea:	3714      	adds	r7, #20
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	40021000 	.word	0x40021000

080012f8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001300:	4b08      	ldr	r3, [pc, #32]	; (8001324 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001302:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001304:	4907      	ldr	r1, [pc, #28]	; (8001324 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4313      	orrs	r3, r2
 800130a:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800130c:	4b05      	ldr	r3, [pc, #20]	; (8001324 <LL_APB2_GRP1_EnableClock+0x2c>)
 800130e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	4013      	ands	r3, r2
 8001314:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001316:	68fb      	ldr	r3, [r7, #12]
}
 8001318:	bf00      	nop
 800131a:	3714      	adds	r7, #20
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	40021000 	.word	0x40021000

08001328 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001330:	4b06      	ldr	r3, [pc, #24]	; (800134c <LL_FLASH_SetLatency+0x24>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f023 0207 	bic.w	r2, r3, #7
 8001338:	4904      	ldr	r1, [pc, #16]	; (800134c <LL_FLASH_SetLatency+0x24>)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4313      	orrs	r3, r2
 800133e:	600b      	str	r3, [r1, #0]
}
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	40022000 	.word	0x40022000

08001350 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001354:	4b04      	ldr	r3, [pc, #16]	; (8001368 <LL_FLASH_GetLatency+0x18>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 0307 	and.w	r3, r3, #7
}
 800135c:	4618      	mov	r0, r3
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	40022000 	.word	0x40022000

0800136c <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001374:	4b06      	ldr	r3, [pc, #24]	; (8001390 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800137c:	4904      	ldr	r1, [pc, #16]	; (8001390 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4313      	orrs	r3, r2
 8001382:	600b      	str	r3, [r1, #0]
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	40007000 	.word	0x40007000

08001394 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  NVIC_DisableIRQ(ADC_DRDY_IRQn);
 800139a:	200a      	movs	r0, #10
 800139c:	f7ff fe7a 	bl	8001094 <__NVIC_DisableIRQ>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80013a0:	2001      	movs	r0, #1
 80013a2:	f7ff ffa9 	bl	80012f8 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80013a6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80013aa:	f7ff ff8d 	bl	80012c8 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013ae:	2003      	movs	r0, #3
 80013b0:	f7ff fe3e 	bl	8001030 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 80013b4:	f7ff fe60 	bl	8001078 <__NVIC_GetPriorityGrouping>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2200      	movs	r2, #0
 80013bc:	210f      	movs	r1, #15
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff feb6 	bl	8001130 <NVIC_EncodePriority>
 80013c4:	4603      	mov	r3, r0
 80013c6:	4619      	mov	r1, r3
 80013c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013cc:	f7ff fe86 	bl	80010dc <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013d0:	f000 f814 	bl	80013fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013d4:	f7ff fdb0 	bl	8000f38 <MX_GPIO_Init>
  MX_TIM2_Init();
 80013d8:	f000 fe06 	bl	8001fe8 <MX_TIM2_Init>
  MX_DMA_Init();
 80013dc:	f7ff fb86 	bl	8000aec <MX_DMA_Init>
  MX_SPI3_Init();
 80013e0:	f000 fbae 	bl	8001b40 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  Sensor_Board sb;
  SB_Init(&sb);
 80013e4:	463b      	mov	r3, r7
 80013e6:	4618      	mov	r0, r3
 80013e8:	f000 f83e 	bl	8001468 <SB_Init>
  SB_Start_ADC_Sampling();
 80013ec:	f000 f856 	bl	800149c <SB_Start_ADC_Sampling>
  SB_Align_Samples();
 80013f0:	f000 f868 	bl	80014c4 <SB_Align_Samples>
  SB_Get_Temperature_Readings();
 80013f4:	f000 f8ce 	bl	8001594 <SB_Get_Temperature_Readings>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013f8:	e7fe      	b.n	80013f8 <main+0x64>
	...

080013fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8001400:	2000      	movs	r0, #0
 8001402:	f7ff ff91 	bl	8001328 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8001406:	bf00      	nop
 8001408:	f7ff ffa2 	bl	8001350 <LL_FLASH_GetLatency>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d1fa      	bne.n	8001408 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8001412:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001416:	f7ff ffa9 	bl	800136c <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_Enable();
 800141a:	f7ff febd 	bl	8001198 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 800141e:	bf00      	nop
 8001420:	f7ff feca 	bl	80011b8 <LL_RCC_HSI_IsReady>
 8001424:	4603      	mov	r3, r0
 8001426:	2b01      	cmp	r3, #1
 8001428:	d1fa      	bne.n	8001420 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 800142a:	2010      	movs	r0, #16
 800142c:	f7ff fed8 	bl	80011e0 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8001430:	2001      	movs	r0, #1
 8001432:	f7ff feeb 	bl	800120c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8001436:	bf00      	nop
 8001438:	f7ff fefc 	bl	8001234 <LL_RCC_GetSysClkSource>
 800143c:	4603      	mov	r3, r0
 800143e:	2b04      	cmp	r3, #4
 8001440:	d1fa      	bne.n	8001438 <SystemClock_Config+0x3c>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001442:	2000      	movs	r0, #0
 8001444:	f7ff ff04 	bl	8001250 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001448:	2000      	movs	r0, #0
 800144a:	f7ff ff15 	bl	8001278 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 800144e:	2000      	movs	r0, #0
 8001450:	f7ff ff26 	bl	80012a0 <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick(16000000);
 8001454:	4803      	ldr	r0, [pc, #12]	; (8001464 <SystemClock_Config+0x68>)
 8001456:	f001 fb79 	bl	8002b4c <LL_Init1msTick>

  LL_SetSystemCoreClock(16000000);
 800145a:	4802      	ldr	r0, [pc, #8]	; (8001464 <SystemClock_Config+0x68>)
 800145c:	f001 fb84 	bl	8002b68 <LL_SetSystemCoreClock>
}
 8001460:	bf00      	nop
 8001462:	bd80      	pop	{r7, pc}
 8001464:	00f42400 	.word	0x00f42400

08001468 <SB_Init>:
Sensor_Board *sensor_board;
float aligned_samples[NUM_SAMPLES * 8 * 2];
float *temperature;

// Initializes the required memory structures for sensor board operations.
void SB_Init(Sensor_Board *sb) {
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
	static ADS131M08 adc;
	sb->adc = &adc;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	4a07      	ldr	r2, [pc, #28]	; (8001490 <SB_Init+0x28>)
 8001474:	601a      	str	r2, [r3, #0]
	static ADT7301 ts;
	sb->tmp_sensor = &ts;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a06      	ldr	r2, [pc, #24]	; (8001494 <SB_Init+0x2c>)
 800147a:	605a      	str	r2, [r3, #4]
	sensor_board = sb;
 800147c:	4a06      	ldr	r2, [pc, #24]	; (8001498 <SB_Init+0x30>)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6013      	str	r3, [r2, #0]
}
 8001482:	bf00      	nop
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	2000bc5c 	.word	0x2000bc5c
 8001494:	2000bc70 	.word	0x2000bc70
 8001498:	20003c54 	.word	0x20003c54

0800149c <SB_Start_ADC_Sampling>:

// Starts ADC sampling procedure. This function is non-blocking, since
// sampling is handled by DMA.
void SB_Start_ADC_Sampling() {
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
	ADC_Init(sensor_board->adc, SB_SPIx, SB_DMAx);
 80014a0:	4b05      	ldr	r3, [pc, #20]	; (80014b8 <SB_Start_ADC_Sampling+0x1c>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a05      	ldr	r2, [pc, #20]	; (80014bc <SB_Start_ADC_Sampling+0x20>)
 80014a8:	4905      	ldr	r1, [pc, #20]	; (80014c0 <SB_Start_ADC_Sampling+0x24>)
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7fe fef6 	bl	800029c <ADC_Init>
	ADC_Start_Sampling();
 80014b0:	f7fe ff2c 	bl	800030c <ADC_Start_Sampling>
}
 80014b4:	bf00      	nop
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	20003c54 	.word	0x20003c54
 80014bc:	40020400 	.word	0x40020400
 80014c0:	40003c00 	.word	0x40003c00

080014c4 <SB_Align_Samples>:

// Fetches 24-bit ADC samples from memory buffer and stores them into
// an array of complex floating-point numbers intended to be used as
// the source buffer for CMSIS FFT implementation.
void SB_Align_Samples() {
 80014c4:	b480      	push	{r7}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
	while (!sensor_board->adc->sampling_complete_flag);
 80014ca:	bf00      	nop
 80014cc:	4b2d      	ldr	r3, [pc, #180]	; (8001584 <SB_Align_Samples+0xc0>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	7c1b      	ldrb	r3, [r3, #16]
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d0f8      	beq.n	80014cc <SB_Align_Samples+0x8>

	uint32_t aligned_index = 0;
 80014da:	2300      	movs	r3, #0
 80014dc:	60fb      	str	r3, [r7, #12]
	for (uint16_t i = 0; i < NUM_SAMPLES; i++) {
 80014de:	2300      	movs	r3, #0
 80014e0:	817b      	strh	r3, [r7, #10]
 80014e2:	e044      	b.n	800156e <SB_Align_Samples+0xaa>
		uint32_t base_index = i * BYTES_PER_SAMPLE;
 80014e4:	897a      	ldrh	r2, [r7, #10]
 80014e6:	4613      	mov	r3, r2
 80014e8:	011b      	lsls	r3, r3, #4
 80014ea:	1a9b      	subs	r3, r3, r2
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	607b      	str	r3, [r7, #4]

		// A sample is made of 10 24-bit words. The first
		// and last word should be ignored, and others
		// truncated to 16 bits.

		for(uint8_t j = 3; j < 27; j += 3) {
 80014f0:	2303      	movs	r3, #3
 80014f2:	727b      	strb	r3, [r7, #9]
 80014f4:	e035      	b.n	8001562 <SB_Align_Samples+0x9e>
			uint8_t first_byte = sensor_board->adc->samples[base_index + j];
 80014f6:	4b23      	ldr	r3, [pc, #140]	; (8001584 <SB_Align_Samples+0xc0>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	68da      	ldr	r2, [r3, #12]
 80014fe:	7a79      	ldrb	r1, [r7, #9]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	440b      	add	r3, r1
 8001504:	4413      	add	r3, r2
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	70fb      	strb	r3, [r7, #3]
			uint8_t second_byte = sensor_board->adc->samples[base_index + j + 1];
 800150a:	4b1e      	ldr	r3, [pc, #120]	; (8001584 <SB_Align_Samples+0xc0>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	68da      	ldr	r2, [r3, #12]
 8001512:	7a79      	ldrb	r1, [r7, #9]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	440b      	add	r3, r1
 8001518:	3301      	adds	r3, #1
 800151a:	4413      	add	r3, r2
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	70bb      	strb	r3, [r7, #2]
			// third byte is ignored, we only want 16 bits

			int16_t adc_value = ((int16_t) first_byte << 8) | ((int16_t) second_byte);
 8001520:	78fb      	ldrb	r3, [r7, #3]
 8001522:	021b      	lsls	r3, r3, #8
 8001524:	b21a      	sxth	r2, r3
 8001526:	78bb      	ldrb	r3, [r7, #2]
 8001528:	b21b      	sxth	r3, r3
 800152a:	4313      	orrs	r3, r2
 800152c:	803b      	strh	r3, [r7, #0]

			aligned_samples[aligned_index] = ((float) adc_value / SB_ADC_MAX_VALUE_16) * SB_ADC_VREF;
 800152e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001532:	ee07 3a90 	vmov	s15, r3
 8001536:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800153a:	eddf 6a13 	vldr	s13, [pc, #76]	; 8001588 <SB_Align_Samples+0xc4>
 800153e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001542:	ed9f 7a12 	vldr	s14, [pc, #72]	; 800158c <SB_Align_Samples+0xc8>
 8001546:	ee67 7a87 	vmul.f32	s15, s15, s14
 800154a:	4a11      	ldr	r2, [pc, #68]	; (8001590 <SB_Align_Samples+0xcc>)
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	4413      	add	r3, r2
 8001552:	edc3 7a00 	vstr	s15, [r3]
			aligned_index += 2;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	3302      	adds	r3, #2
 800155a:	60fb      	str	r3, [r7, #12]
		for(uint8_t j = 3; j < 27; j += 3) {
 800155c:	7a7b      	ldrb	r3, [r7, #9]
 800155e:	3303      	adds	r3, #3
 8001560:	727b      	strb	r3, [r7, #9]
 8001562:	7a7b      	ldrb	r3, [r7, #9]
 8001564:	2b1a      	cmp	r3, #26
 8001566:	d9c6      	bls.n	80014f6 <SB_Align_Samples+0x32>
	for (uint16_t i = 0; i < NUM_SAMPLES; i++) {
 8001568:	897b      	ldrh	r3, [r7, #10]
 800156a:	3301      	adds	r3, #1
 800156c:	817b      	strh	r3, [r7, #10]
 800156e:	897b      	ldrh	r3, [r7, #10]
 8001570:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001574:	d3b6      	bcc.n	80014e4 <SB_Align_Samples+0x20>
		}
	}
}
 8001576:	bf00      	nop
 8001578:	bf00      	nop
 800157a:	3714      	adds	r7, #20
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	20003c54 	.word	0x20003c54
 8001588:	47000000 	.word	0x47000000
 800158c:	40533333 	.word	0x40533333
 8001590:	20003c58 	.word	0x20003c58

08001594 <SB_Get_Temperature_Readings>:

// Collects samples from sensor board temperature sensors.
void SB_Get_Temperature_Readings() {
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
	ADT7301_Init(sensor_board->tmp_sensor, SB_SPIx);
 8001598:	4b10      	ldr	r3, [pc, #64]	; (80015dc <SB_Get_Temperature_Readings+0x48>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	4910      	ldr	r1, [pc, #64]	; (80015e0 <SB_Get_Temperature_Readings+0x4c>)
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7fe ffc5 	bl	8000530 <ADT7301_Init>

	ADT7301_Wakeup(TEMP1);
 80015a6:	2000      	movs	r0, #0
 80015a8:	f7ff f8be 	bl	8000728 <ADT7301_Wakeup>
	ADT7301_Collect_Sample(TEMP1);
 80015ac:	2000      	movs	r0, #0
 80015ae:	f7fe ffd5 	bl	800055c <ADT7301_Collect_Sample>
	ADT7301_Shutdown(TEMP1);
 80015b2:	2000      	movs	r0, #0
 80015b4:	f7ff f860 	bl	8000678 <ADT7301_Shutdown>

	ADT7301_Wakeup(TEMP2);
 80015b8:	2001      	movs	r0, #1
 80015ba:	f7ff f8b5 	bl	8000728 <ADT7301_Wakeup>
	ADT7301_Collect_Sample(TEMP2);
 80015be:	2001      	movs	r0, #1
 80015c0:	f7fe ffcc 	bl	800055c <ADT7301_Collect_Sample>
	ADT7301_Shutdown(TEMP2);
 80015c4:	2001      	movs	r0, #1
 80015c6:	f7ff f857 	bl	8000678 <ADT7301_Shutdown>

//	ADT7301_Wakeup(TEMP3);
//	ADT7301_Collect_Sample(TEMP3);
//	ADT7301_Shutdown(TEMP3);

	temperature = sensor_board->tmp_sensor->samples;
 80015ca:	4b04      	ldr	r3, [pc, #16]	; (80015dc <SB_Get_Temperature_Readings+0x48>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	3304      	adds	r3, #4
 80015d2:	4a04      	ldr	r2, [pc, #16]	; (80015e4 <SB_Get_Temperature_Readings+0x50>)
 80015d4:	6013      	str	r3, [r2, #0]
}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	20003c54 	.word	0x20003c54
 80015e0:	40003c00 	.word	0x40003c00
 80015e4:	2000bc58 	.word	0x2000bc58

080015e8 <LL_DMA_SetDataTransferDirection>:
{
 80015e8:	b480      	push	{r7}
 80015ea:	b087      	sub	sp, #28
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 80015f8:	4a0e      	ldr	r2, [pc, #56]	; (8001634 <LL_DMA_SetDataTransferDirection+0x4c>)
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	4413      	add	r3, r2
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	461a      	mov	r2, r3
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	4413      	add	r3, r2
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800160c:	f023 0310 	bic.w	r3, r3, #16
 8001610:	4908      	ldr	r1, [pc, #32]	; (8001634 <LL_DMA_SetDataTransferDirection+0x4c>)
 8001612:	68ba      	ldr	r2, [r7, #8]
 8001614:	440a      	add	r2, r1
 8001616:	7812      	ldrb	r2, [r2, #0]
 8001618:	4611      	mov	r1, r2
 800161a:	697a      	ldr	r2, [r7, #20]
 800161c:	440a      	add	r2, r1
 800161e:	4611      	mov	r1, r2
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	4313      	orrs	r3, r2
 8001624:	600b      	str	r3, [r1, #0]
}
 8001626:	bf00      	nop
 8001628:	371c      	adds	r7, #28
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	08002c00 	.word	0x08002c00

08001638 <LL_DMA_SetMode>:
{
 8001638:	b480      	push	{r7}
 800163a:	b087      	sub	sp, #28
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 8001648:	4a0d      	ldr	r2, [pc, #52]	; (8001680 <LL_DMA_SetMode+0x48>)
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	4413      	add	r3, r2
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	461a      	mov	r2, r3
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	4413      	add	r3, r2
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f023 0220 	bic.w	r2, r3, #32
 800165c:	4908      	ldr	r1, [pc, #32]	; (8001680 <LL_DMA_SetMode+0x48>)
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	440b      	add	r3, r1
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	4619      	mov	r1, r3
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	440b      	add	r3, r1
 800166a:	4619      	mov	r1, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	4313      	orrs	r3, r2
 8001670:	600b      	str	r3, [r1, #0]
}
 8001672:	bf00      	nop
 8001674:	371c      	adds	r7, #28
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	08002c00 	.word	0x08002c00

08001684 <LL_DMA_SetPeriphIncMode>:
{
 8001684:	b480      	push	{r7}
 8001686:	b087      	sub	sp, #28
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	607a      	str	r2, [r7, #4]
    uint32_t dma_base_addr = (uint32_t)DMAx;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	617b      	str	r3, [r7, #20]
    MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 8001694:	4a0d      	ldr	r2, [pc, #52]	; (80016cc <LL_DMA_SetPeriphIncMode+0x48>)
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	4413      	add	r3, r2
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	461a      	mov	r2, r3
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	4413      	add	r3, r2
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80016a8:	4908      	ldr	r1, [pc, #32]	; (80016cc <LL_DMA_SetPeriphIncMode+0x48>)
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	440b      	add	r3, r1
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	4619      	mov	r1, r3
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	440b      	add	r3, r1
 80016b6:	4619      	mov	r1, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	600b      	str	r3, [r1, #0]
}
 80016be:	bf00      	nop
 80016c0:	371c      	adds	r7, #28
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	08002c00 	.word	0x08002c00

080016d0 <LL_DMA_SetMemoryIncMode>:
{
 80016d0:	b480      	push	{r7}
 80016d2:	b087      	sub	sp, #28
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 80016e0:	4a0d      	ldr	r2, [pc, #52]	; (8001718 <LL_DMA_SetMemoryIncMode+0x48>)
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	4413      	add	r3, r2
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	461a      	mov	r2, r3
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	4413      	add	r3, r2
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80016f4:	4908      	ldr	r1, [pc, #32]	; (8001718 <LL_DMA_SetMemoryIncMode+0x48>)
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	440b      	add	r3, r1
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	4619      	mov	r1, r3
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	440b      	add	r3, r1
 8001702:	4619      	mov	r1, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	4313      	orrs	r3, r2
 8001708:	600b      	str	r3, [r1, #0]
}
 800170a:	bf00      	nop
 800170c:	371c      	adds	r7, #28
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	08002c00 	.word	0x08002c00

0800171c <LL_DMA_SetPeriphSize>:
{
 800171c:	b480      	push	{r7}
 800171e:	b087      	sub	sp, #28
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE, 
 800172c:	4a0d      	ldr	r2, [pc, #52]	; (8001764 <LL_DMA_SetPeriphSize+0x48>)
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	4413      	add	r3, r2
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	461a      	mov	r2, r3
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	4413      	add	r3, r2
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001740:	4908      	ldr	r1, [pc, #32]	; (8001764 <LL_DMA_SetPeriphSize+0x48>)
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	440b      	add	r3, r1
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	4619      	mov	r1, r3
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	440b      	add	r3, r1
 800174e:	4619      	mov	r1, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	4313      	orrs	r3, r2
 8001754:	600b      	str	r3, [r1, #0]
}
 8001756:	bf00      	nop
 8001758:	371c      	adds	r7, #28
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	08002c00 	.word	0x08002c00

08001768 <LL_DMA_SetMemorySize>:
{
 8001768:	b480      	push	{r7}
 800176a:	b087      	sub	sp, #28
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 8001778:	4a0d      	ldr	r2, [pc, #52]	; (80017b0 <LL_DMA_SetMemorySize+0x48>)
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	4413      	add	r3, r2
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	461a      	mov	r2, r3
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	4413      	add	r3, r2
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800178c:	4908      	ldr	r1, [pc, #32]	; (80017b0 <LL_DMA_SetMemorySize+0x48>)
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	440b      	add	r3, r1
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	4619      	mov	r1, r3
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	440b      	add	r3, r1
 800179a:	4619      	mov	r1, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	4313      	orrs	r3, r2
 80017a0:	600b      	str	r3, [r1, #0]
}
 80017a2:	bf00      	nop
 80017a4:	371c      	adds	r7, #28
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	08002c00 	.word	0x08002c00

080017b4 <LL_DMA_SetChannelPriorityLevel>:
{
 80017b4:	b480      	push	{r7}
 80017b6:	b087      	sub	sp, #28
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 80017c4:	4a0d      	ldr	r2, [pc, #52]	; (80017fc <LL_DMA_SetChannelPriorityLevel+0x48>)
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	4413      	add	r3, r2
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	461a      	mov	r2, r3
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	4413      	add	r3, r2
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80017d8:	4908      	ldr	r1, [pc, #32]	; (80017fc <LL_DMA_SetChannelPriorityLevel+0x48>)
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	440b      	add	r3, r1
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	4619      	mov	r1, r3
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	440b      	add	r3, r1
 80017e6:	4619      	mov	r1, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	600b      	str	r3, [r1, #0]
}
 80017ee:	bf00      	nop
 80017f0:	371c      	adds	r7, #28
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	08002c00 	.word	0x08002c00

08001800 <LL_DMA_SetPeriphRequest>:
{
 8001800:	b480      	push	{r7}
 8001802:	b089      	sub	sp, #36	; 0x24
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Request_TypeDef *)((uint32_t)((uint32_t)DMAx + DMA_CSELR_OFFSET)))->CSELR,
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	33a8      	adds	r3, #168	; 0xa8
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	210f      	movs	r1, #15
 8001818:	fa01 f303 	lsl.w	r3, r1, r3
 800181c:	43db      	mvns	r3, r3
 800181e:	401a      	ands	r2, r3
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	210f      	movs	r1, #15
 8001826:	fa01 f303 	lsl.w	r3, r1, r3
 800182a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	fa93 f3a3 	rbit	r3, r3
 8001832:	617b      	str	r3, [r7, #20]
  return result;
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d101      	bne.n	8001842 <LL_DMA_SetPeriphRequest+0x42>
    return 32U;
 800183e:	2320      	movs	r3, #32
 8001840:	e003      	b.n	800184a <LL_DMA_SetPeriphRequest+0x4a>
  return __builtin_clz(value);
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	fab3 f383 	clz	r3, r3
 8001848:	b2db      	uxtb	r3, r3
 800184a:	4619      	mov	r1, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	408b      	lsls	r3, r1
 8001850:	68f9      	ldr	r1, [r7, #12]
 8001852:	31a8      	adds	r1, #168	; 0xa8
 8001854:	4313      	orrs	r3, r2
 8001856:	600b      	str	r3, [r1, #0]
}
 8001858:	bf00      	nop
 800185a:	3724      	adds	r7, #36	; 0x24
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <LL_AHB2_GRP1_EnableClock>:
{
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800186c:	4b08      	ldr	r3, [pc, #32]	; (8001890 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800186e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001870:	4907      	ldr	r1, [pc, #28]	; (8001890 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4313      	orrs	r3, r2
 8001876:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001878:	4b05      	ldr	r3, [pc, #20]	; (8001890 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800187a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	4013      	ands	r3, r2
 8001880:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001882:	68fb      	ldr	r3, [r7, #12]
}
 8001884:	bf00      	nop
 8001886:	3714      	adds	r7, #20
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	40021000 	.word	0x40021000

08001894 <LL_APB1_GRP1_EnableClock>:
{
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800189c:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <LL_APB1_GRP1_EnableClock+0x2c>)
 800189e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80018a0:	4907      	ldr	r1, [pc, #28]	; (80018c0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80018a8:	4b05      	ldr	r3, [pc, #20]	; (80018c0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80018aa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	4013      	ands	r3, r2
 80018b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018b2:	68fb      	ldr	r3, [r7, #12]
}
 80018b4:	bf00      	nop
 80018b6:	3714      	adds	r7, #20
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	40021000 	.word	0x40021000

080018c4 <LL_SPI_Enable>:
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	601a      	str	r2, [r3, #0]
}
 80018d8:	bf00      	nop
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <LL_SPI_Disable>:
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	601a      	str	r2, [r3, #0]
}
 80018f8:	bf00      	nop
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <LL_SPI_SetStandard>:
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f023 0210 	bic.w	r2, r3, #16
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	431a      	orrs	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	605a      	str	r2, [r3, #4]
}
 800191e:	bf00      	nop
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr

0800192a <LL_SPI_SetClockPhase>:
{
 800192a:	b480      	push	{r7}
 800192c:	b083      	sub	sp, #12
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
 8001932:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPHA, ClockPhase);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f023 0201 	bic.w	r2, r3, #1
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	431a      	orrs	r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	601a      	str	r2, [r3, #0]
}
 8001944:	bf00      	nop
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <LL_SPI_SetClockPolarity>:
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f023 0202 	bic.w	r2, r3, #2
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	431a      	orrs	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	601a      	str	r2, [r3, #0]
}
 800196a:	bf00      	nop
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <LL_SPI_DisableNSSPulseMgt>:
{
 8001976:	b480      	push	{r7}
 8001978:	b083      	sub	sp, #12
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f023 0208 	bic.w	r2, r3, #8
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	605a      	str	r2, [r3, #4]
}
 800198a:	bf00      	nop
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr

08001996 <LL_SPI_IsActiveFlag_RXNE>:
{
 8001996:	b480      	push	{r7}
 8001998:	b083      	sub	sp, #12
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d101      	bne.n	80019ae <LL_SPI_IsActiveFlag_RXNE+0x18>
 80019aa:	2301      	movs	r3, #1
 80019ac:	e000      	b.n	80019b0 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 80019ae:	2300      	movs	r3, #0
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <LL_SPI_IsActiveFlag_TXE>:
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f003 0302 	and.w	r3, r3, #2
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d101      	bne.n	80019d4 <LL_SPI_IsActiveFlag_TXE+0x18>
 80019d0:	2301      	movs	r3, #1
 80019d2:	e000      	b.n	80019d6 <LL_SPI_IsActiveFlag_TXE+0x1a>
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr

080019e2 <LL_SPI_IsActiveFlag_BSY>:
{
 80019e2:	b480      	push	{r7}
 80019e4:	b083      	sub	sp, #12
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019f2:	2b80      	cmp	r3, #128	; 0x80
 80019f4:	d101      	bne.n	80019fa <LL_SPI_IsActiveFlag_BSY+0x18>
 80019f6:	2301      	movs	r3, #1
 80019f8:	e000      	b.n	80019fc <LL_SPI_IsActiveFlag_BSY+0x1a>
 80019fa:	2300      	movs	r3, #0
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <LL_SPI_GetTxFIFOLevel>:
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(SPIx->SR, SPI_SR_FTLVL));
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <LL_SPI_EnableIT_RXNE>:
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_RXNEIE);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	605a      	str	r2, [r3, #4]
}
 8001a38:	bf00      	nop
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <LL_SPI_EnableIT_TXE>:
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	605a      	str	r2, [r3, #4]
}
 8001a58:	bf00      	nop
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <LL_SPI_EnableDMAReq_RX>:
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_RXDMAEN);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f043 0201 	orr.w	r2, r3, #1
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	605a      	str	r2, [r3, #4]
}
 8001a78:	bf00      	nop
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <LL_SPI_DisableDMAReq_RX>:
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_RXDMAEN);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f023 0201 	bic.w	r2, r3, #1
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	605a      	str	r2, [r3, #4]
}
 8001a98:	bf00      	nop
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <LL_SPI_EnableDMAReq_TX>:
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_TXDMAEN);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f043 0202 	orr.w	r2, r3, #2
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	605a      	str	r2, [r3, #4]
}
 8001ab8:	bf00      	nop
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <LL_SPI_DisableDMAReq_TX>:
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXDMAEN);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f023 0202 	bic.w	r2, r3, #2
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	605a      	str	r2, [r3, #4]
}
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	330c      	adds	r3, #12
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	b2db      	uxtb	r3, r3
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	460b      	mov	r3, r1
 8001b0a:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	330c      	adds	r3, #12
 8001b10:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	78fa      	ldrb	r2, [r7, #3]
 8001b16:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8001b18:	bf00      	nop
 8001b1a:	3714      	adds	r7, #20
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <LL_GPIO_ResetOutputPin>:
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	683a      	ldr	r2, [r7, #0]
 8001b32:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b34:	bf00      	nop
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <MX_SPI3_Init>:

/* USER CODE END 0 */

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b090      	sub	sp, #64	; 0x40
 8001b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001b46:	f107 0318 	add.w	r3, r7, #24
 8001b4a:	2228      	movs	r2, #40	; 0x28
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f001 f83e 	bl	8002bd0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b54:	463b      	mov	r3, r7
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	605a      	str	r2, [r3, #4]
 8001b5c:	609a      	str	r2, [r3, #8]
 8001b5e:	60da      	str	r2, [r3, #12]
 8001b60:	611a      	str	r2, [r3, #16]
 8001b62:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8001b64:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001b68:	f7ff fe94 	bl	8001894 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8001b6c:	2004      	movs	r0, #4
 8001b6e:	f7ff fe79 	bl	8001864 <LL_AHB2_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PC10   ------> SPI3_SCK
  PC11   ------> SPI3_MISO
  PC12   ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 8001b72:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001b76:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b84:	2300      	movs	r3, #0
 8001b86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8001b88:	2306      	movs	r3, #6
 8001b8a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b8c:	463b      	mov	r3, r7
 8001b8e:	4619      	mov	r1, r3
 8001b90:	483d      	ldr	r0, [pc, #244]	; (8001c88 <MX_SPI3_Init+0x148>)
 8001b92:	f000 fdf7 	bl	8002784 <LL_GPIO_Init>

  /* SPI3 DMA Init */

  /* SPI3_RX Init */
  LL_DMA_SetPeriphRequest(DMA2, LL_DMA_CHANNEL_1, LL_DMA_REQUEST_3);
 8001b96:	2203      	movs	r2, #3
 8001b98:	2100      	movs	r1, #0
 8001b9a:	483c      	ldr	r0, [pc, #240]	; (8001c8c <MX_SPI3_Init+0x14c>)
 8001b9c:	f7ff fe30 	bl	8001800 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	4839      	ldr	r0, [pc, #228]	; (8001c8c <MX_SPI3_Init+0x14c>)
 8001ba6:	f7ff fd1f 	bl	80015e8 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA2, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_LOW);
 8001baa:	2200      	movs	r2, #0
 8001bac:	2100      	movs	r1, #0
 8001bae:	4837      	ldr	r0, [pc, #220]	; (8001c8c <MX_SPI3_Init+0x14c>)
 8001bb0:	f7ff fe00 	bl	80017b4 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_CHANNEL_1, LL_DMA_MODE_NORMAL);
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	4834      	ldr	r0, [pc, #208]	; (8001c8c <MX_SPI3_Init+0x14c>)
 8001bba:	f7ff fd3d 	bl	8001638 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	4832      	ldr	r0, [pc, #200]	; (8001c8c <MX_SPI3_Init+0x14c>)
 8001bc4:	f7ff fd5e 	bl	8001684 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 8001bc8:	2280      	movs	r2, #128	; 0x80
 8001bca:	2100      	movs	r1, #0
 8001bcc:	482f      	ldr	r0, [pc, #188]	; (8001c8c <MX_SPI3_Init+0x14c>)
 8001bce:	f7ff fd7f 	bl	80016d0 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_BYTE);
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	482d      	ldr	r0, [pc, #180]	; (8001c8c <MX_SPI3_Init+0x14c>)
 8001bd8:	f7ff fda0 	bl	800171c <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_BYTE);
 8001bdc:	2200      	movs	r2, #0
 8001bde:	2100      	movs	r1, #0
 8001be0:	482a      	ldr	r0, [pc, #168]	; (8001c8c <MX_SPI3_Init+0x14c>)
 8001be2:	f7ff fdc1 	bl	8001768 <LL_DMA_SetMemorySize>

  /* SPI3_TX Init */
  LL_DMA_SetPeriphRequest(DMA2, LL_DMA_CHANNEL_2, LL_DMA_REQUEST_3);
 8001be6:	2203      	movs	r2, #3
 8001be8:	2101      	movs	r1, #1
 8001bea:	4828      	ldr	r0, [pc, #160]	; (8001c8c <MX_SPI3_Init+0x14c>)
 8001bec:	f7ff fe08 	bl	8001800 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_CHANNEL_2, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8001bf0:	2210      	movs	r2, #16
 8001bf2:	2101      	movs	r1, #1
 8001bf4:	4825      	ldr	r0, [pc, #148]	; (8001c8c <MX_SPI3_Init+0x14c>)
 8001bf6:	f7ff fcf7 	bl	80015e8 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA2, LL_DMA_CHANNEL_2, LL_DMA_PRIORITY_LOW);
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	2101      	movs	r1, #1
 8001bfe:	4823      	ldr	r0, [pc, #140]	; (8001c8c <MX_SPI3_Init+0x14c>)
 8001c00:	f7ff fdd8 	bl	80017b4 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_CHANNEL_2, LL_DMA_MODE_NORMAL);
 8001c04:	2200      	movs	r2, #0
 8001c06:	2101      	movs	r1, #1
 8001c08:	4820      	ldr	r0, [pc, #128]	; (8001c8c <MX_SPI3_Init+0x14c>)
 8001c0a:	f7ff fd15 	bl	8001638 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_CHANNEL_2, LL_DMA_PERIPH_NOINCREMENT);
 8001c0e:	2200      	movs	r2, #0
 8001c10:	2101      	movs	r1, #1
 8001c12:	481e      	ldr	r0, [pc, #120]	; (8001c8c <MX_SPI3_Init+0x14c>)
 8001c14:	f7ff fd36 	bl	8001684 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_CHANNEL_2, LL_DMA_MEMORY_INCREMENT);
 8001c18:	2280      	movs	r2, #128	; 0x80
 8001c1a:	2101      	movs	r1, #1
 8001c1c:	481b      	ldr	r0, [pc, #108]	; (8001c8c <MX_SPI3_Init+0x14c>)
 8001c1e:	f7ff fd57 	bl	80016d0 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_CHANNEL_2, LL_DMA_PDATAALIGN_BYTE);
 8001c22:	2200      	movs	r2, #0
 8001c24:	2101      	movs	r1, #1
 8001c26:	4819      	ldr	r0, [pc, #100]	; (8001c8c <MX_SPI3_Init+0x14c>)
 8001c28:	f7ff fd78 	bl	800171c <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_CHANNEL_2, LL_DMA_MDATAALIGN_BYTE);
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	2101      	movs	r1, #1
 8001c30:	4816      	ldr	r0, [pc, #88]	; (8001c8c <MX_SPI3_Init+0x14c>)
 8001c32:	f7ff fd99 	bl	8001768 <LL_DMA_SetMemorySize>

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001c36:	2300      	movs	r3, #0
 8001c38:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001c3a:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001c3e:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001c40:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001c44:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001c46:	2302      	movs	r3, #2
 8001c48:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001c4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c52:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV32;
 8001c54:	2320      	movs	r3, #32
 8001c56:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 8001c60:	2307      	movs	r3, #7
 8001c62:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 8001c64:	f107 0318 	add.w	r3, r7, #24
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4809      	ldr	r0, [pc, #36]	; (8001c90 <MX_SPI3_Init+0x150>)
 8001c6c:	f000 fe2e 	bl	80028cc <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 8001c70:	2100      	movs	r1, #0
 8001c72:	4807      	ldr	r0, [pc, #28]	; (8001c90 <MX_SPI3_Init+0x150>)
 8001c74:	f7ff fe46 	bl	8001904 <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI3);
 8001c78:	4805      	ldr	r0, [pc, #20]	; (8001c90 <MX_SPI3_Init+0x150>)
 8001c7a:	f7ff fe7c 	bl	8001976 <LL_SPI_DisableNSSPulseMgt>
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001c7e:	bf00      	nop
 8001c80:	3740      	adds	r7, #64	; 0x40
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	48000800 	.word	0x48000800
 8001c8c:	40020400 	.word	0x40020400
 8001c90:	40003c00 	.word	0x40003c00

08001c94 <SPI_Enable_DMA_Rx_Request>:

/* USER CODE BEGIN 1 */

void SPI_Enable_DMA_Rx_Request(SPI_TypeDef *SPIx) {
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
	LL_SPI_EnableDMAReq_RX(SPIx);
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f7ff fee1 	bl	8001a64 <LL_SPI_EnableDMAReq_RX>
}
 8001ca2:	bf00      	nop
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <SPI_Enable_DMA_Tx_Request>:

void SPI_Enable_DMA_Tx_Request(SPI_TypeDef *SPIx) {
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b082      	sub	sp, #8
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
	LL_SPI_EnableDMAReq_TX(SPIx);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f7ff fef6 	bl	8001aa4 <LL_SPI_EnableDMAReq_TX>
}
 8001cb8:	bf00      	nop
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <SPI_Disable_DMA_Requests>:

void SPI_Disable_DMA_Requests(SPI_TypeDef *SPIx) {
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
	LL_SPI_DisableDMAReq_RX(SPIx);
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f7ff fedb 	bl	8001a84 <LL_SPI_DisableDMAReq_RX>
	LL_SPI_DisableDMAReq_TX(SPIx);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f7ff fef8 	bl	8001ac4 <LL_SPI_DisableDMAReq_TX>
}
 8001cd4:	bf00      	nop
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <SPI_Enable_RXNE_TXE_Interrupts>:

void SPI_Enable_RXNE_TXE_Interrupts(SPI_TypeDef *SPIx) {
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
	LL_SPI_EnableIT_RXNE(SPIx);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f7ff fe9d 	bl	8001a24 <LL_SPI_EnableIT_RXNE>
	LL_SPI_EnableIT_TXE(SPIx);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7ff feaa 	bl	8001a44 <LL_SPI_EnableIT_TXE>
}
 8001cf0:	bf00      	nop
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <SPI_Start_Transfer>:

void SPI_Start_Transfer(SPI_TypeDef *SPIx) {
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
	LL_GPIO_ResetOutputPin(ADC_CS_GPIOx, ADC_CS_PIN);
 8001d00:	2102      	movs	r1, #2
 8001d02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d06:	f7ff ff0d 	bl	8001b24 <LL_GPIO_ResetOutputPin>
	LL_SPI_Enable(SPIx);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f7ff fdda 	bl	80018c4 <LL_SPI_Enable>
}
 8001d10:	bf00      	nop
 8001d12:	3708      	adds	r7, #8
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <SPI_TransmitReceive>:


void SPI_TransmitReceive(SPI_TypeDef *SPIx, uint8_t len, uint8_t *tx_buffer, uint8_t *rx_buffer) {
 8001d18:	b590      	push	{r4, r7, lr}
 8001d1a:	b087      	sub	sp, #28
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	607a      	str	r2, [r7, #4]
 8001d22:	603b      	str	r3, [r7, #0]
 8001d24:	460b      	mov	r3, r1
 8001d26:	72fb      	strb	r3, [r7, #11]
	LL_SPI_Enable(SPIx);
 8001d28:	68f8      	ldr	r0, [r7, #12]
 8001d2a:	f7ff fdcb 	bl	80018c4 <LL_SPI_Enable>

	LL_SPI_TransmitData8(SPIx, tx_buffer[0]);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	4619      	mov	r1, r3
 8001d34:	68f8      	ldr	r0, [r7, #12]
 8001d36:	f7ff fee3 	bl	8001b00 <LL_SPI_TransmitData8>

	for (int i = 0; i < len - 1; i++) {
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	617b      	str	r3, [r7, #20]
 8001d3e:	e021      	b.n	8001d84 <SPI_TransmitReceive+0x6c>
	  while ( !LL_SPI_IsActiveFlag_TXE(SPIx) ); // wait until TXE is set
 8001d40:	bf00      	nop
 8001d42:	68f8      	ldr	r0, [r7, #12]
 8001d44:	f7ff fe3a 	bl	80019bc <LL_SPI_IsActiveFlag_TXE>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d0f9      	beq.n	8001d42 <SPI_TransmitReceive+0x2a>
	  LL_SPI_TransmitData8(SPIx, tx_buffer[i + 1]);
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	3301      	adds	r3, #1
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	4413      	add	r3, r2
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	4619      	mov	r1, r3
 8001d5a:	68f8      	ldr	r0, [r7, #12]
 8001d5c:	f7ff fed0 	bl	8001b00 <LL_SPI_TransmitData8>
	  while ( !LL_SPI_IsActiveFlag_RXNE(SPIx) ); // wait until RXNE is set
 8001d60:	bf00      	nop
 8001d62:	68f8      	ldr	r0, [r7, #12]
 8001d64:	f7ff fe17 	bl	8001996 <LL_SPI_IsActiveFlag_RXNE>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d0f9      	beq.n	8001d62 <SPI_TransmitReceive+0x4a>
	  rx_buffer[i] = LL_SPI_ReceiveData8(SPIx); // read DR (clears RXNE)
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	683a      	ldr	r2, [r7, #0]
 8001d72:	18d4      	adds	r4, r2, r3
 8001d74:	68f8      	ldr	r0, [r7, #12]
 8001d76:	f7ff feb5 	bl	8001ae4 <LL_SPI_ReceiveData8>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	7023      	strb	r3, [r4, #0]
	for (int i = 0; i < len - 1; i++) {
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	3301      	adds	r3, #1
 8001d82:	617b      	str	r3, [r7, #20]
 8001d84:	7afb      	ldrb	r3, [r7, #11]
 8001d86:	3b01      	subs	r3, #1
 8001d88:	697a      	ldr	r2, [r7, #20]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	dbd8      	blt.n	8001d40 <SPI_TransmitReceive+0x28>
	}

	while ( !LL_SPI_IsActiveFlag_RXNE(SPIx) ); // wait until RXNE is set
 8001d8e:	bf00      	nop
 8001d90:	68f8      	ldr	r0, [r7, #12]
 8001d92:	f7ff fe00 	bl	8001996 <LL_SPI_IsActiveFlag_RXNE>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d0f9      	beq.n	8001d90 <SPI_TransmitReceive+0x78>
	rx_buffer[len - 1] = LL_SPI_ReceiveData8(SPIx); // read DR (clears RXNE)
 8001d9c:	7afb      	ldrb	r3, [r7, #11]
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	683a      	ldr	r2, [r7, #0]
 8001da2:	18d4      	adds	r4, r2, r3
 8001da4:	68f8      	ldr	r0, [r7, #12]
 8001da6:	f7ff fe9d 	bl	8001ae4 <LL_SPI_ReceiveData8>
 8001daa:	4603      	mov	r3, r0
 8001dac:	7023      	strb	r3, [r4, #0]
}
 8001dae:	bf00      	nop
 8001db0:	371c      	adds	r7, #28
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd90      	pop	{r4, r7, pc}

08001db6 <SPI_Disable>:

void SPI_Disable(SPI_TypeDef *SPIx) {
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b082      	sub	sp, #8
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
	while (LL_SPI_GetTxFIFOLevel(SPIx) != LL_SPI_TX_FIFO_EMPTY); // wait for TX FIFO to become empty
 8001dbe:	bf00      	nop
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f7ff fe21 	bl	8001a08 <LL_SPI_GetTxFIFOLevel>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d1f9      	bne.n	8001dc0 <SPI_Disable+0xa>
	while (LL_SPI_IsActiveFlag_BSY(SPIx)); // wait for BSY flag to go low
 8001dcc:	bf00      	nop
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f7ff fe07 	bl	80019e2 <LL_SPI_IsActiveFlag_BSY>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d1f9      	bne.n	8001dce <SPI_Disable+0x18>
	LL_SPI_Disable(SPIx);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f7ff fd82 	bl	80018e4 <LL_SPI_Disable>
}
 8001de0:	bf00      	nop
 8001de2:	3708      	adds	r7, #8
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <SPI_Set_Mode>:

void SPI_Set_Mode(SPI_mode mode, SPI_TypeDef *SPIx) {
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	4603      	mov	r3, r0
 8001df0:	6039      	str	r1, [r7, #0]
 8001df2:	71fb      	strb	r3, [r7, #7]
	if (mode == CPOL1_CPHA1) {
 8001df4:	79fb      	ldrb	r3, [r7, #7]
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d108      	bne.n	8001e0c <SPI_Set_Mode+0x24>
		LL_SPI_SetClockPolarity(SPIx, LL_SPI_POLARITY_HIGH);
 8001dfa:	2102      	movs	r1, #2
 8001dfc:	6838      	ldr	r0, [r7, #0]
 8001dfe:	f7ff fda7 	bl	8001950 <LL_SPI_SetClockPolarity>
		LL_SPI_SetClockPhase(SPIx, LL_SPI_PHASE_2EDGE);
 8001e02:	2101      	movs	r1, #1
 8001e04:	6838      	ldr	r0, [r7, #0]
 8001e06:	f7ff fd90 	bl	800192a <LL_SPI_SetClockPhase>
	} else if (mode == CPOL0_CPHA1) {
		LL_SPI_SetClockPolarity(SPIx, LL_SPI_POLARITY_LOW);
		LL_SPI_SetClockPhase(SPIx, LL_SPI_PHASE_2EDGE);
	}
}
 8001e0a:	e00a      	b.n	8001e22 <SPI_Set_Mode+0x3a>
	} else if (mode == CPOL0_CPHA1) {
 8001e0c:	79fb      	ldrb	r3, [r7, #7]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d107      	bne.n	8001e22 <SPI_Set_Mode+0x3a>
		LL_SPI_SetClockPolarity(SPIx, LL_SPI_POLARITY_LOW);
 8001e12:	2100      	movs	r1, #0
 8001e14:	6838      	ldr	r0, [r7, #0]
 8001e16:	f7ff fd9b 	bl	8001950 <LL_SPI_SetClockPolarity>
		LL_SPI_SetClockPhase(SPIx, LL_SPI_PHASE_2EDGE);
 8001e1a:	2101      	movs	r1, #1
 8001e1c:	6838      	ldr	r0, [r7, #0]
 8001e1e:	f7ff fd84 	bl	800192a <LL_SPI_SetClockPhase>
}
 8001e22:	bf00      	nop
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
	...

08001e2c <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8001e34:	4b07      	ldr	r3, [pc, #28]	; (8001e54 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8001e36:	695a      	ldr	r2, [r3, #20]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d101      	bne.n	8001e46 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8001e42:	2301      	movs	r3, #1
 8001e44:	e000      	b.n	8001e48 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr
 8001e54:	40010400 	.word	0x40010400

08001e58 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8001e60:	4a04      	ldr	r2, [pc, #16]	; (8001e74 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6153      	str	r3, [r2, #20]
}
 8001e66:	bf00      	nop
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	40010400 	.word	0x40010400

08001e78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e7c:	e7fe      	b.n	8001e7c <NMI_Handler+0x4>

08001e7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e82:	e7fe      	b.n	8001e82 <HardFault_Handler+0x4>

08001e84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e88:	e7fe      	b.n	8001e88 <MemManage_Handler+0x4>

08001e8a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e8e:	e7fe      	b.n	8001e8e <BusFault_Handler+0x4>

08001e90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e94:	e7fe      	b.n	8001e94 <UsageFault_Handler+0x4>

08001e96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e96:	b480      	push	{r7}
 8001e98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e9a:	bf00      	nop
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ea8:	bf00      	nop
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr

08001eb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eb6:	bf00      	nop
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ec4:	bf00      	nop
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr

08001ece <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_4) != RESET)
 8001ed2:	2010      	movs	r0, #16
 8001ed4:	f7ff ffaa 	bl	8001e2c <LL_EXTI_IsActiveFlag_0_31>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d004      	beq.n	8001ee8 <EXTI4_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_4);
 8001ede:	2010      	movs	r0, #16
 8001ee0:	f7ff ffba 	bl	8001e58 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_4 */
    ADC_DRDY_interrupt_handler();
 8001ee4:	f7fe fa5e 	bl	80003a4 <ADC_DRDY_interrupt_handler>
    /* USER CODE END LL_EXTI_LINE_4 */
  }
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001ee8:	bf00      	nop
 8001eea:	bd80      	pop	{r7, pc}

08001eec <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */
	DMA_Transfer_Complete_RX_interrupt_handler();
 8001ef0:	f7fe fe6c 	bl	8000bcc <DMA_Transfer_Complete_RX_interrupt_handler>
  /* USER CODE END DMA2_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8001ef4:	bf00      	nop
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */
	DMA_Transfer_Complete_TX_interrupt_handler();
 8001efc:	f7fe fe86 	bl	8000c0c <DMA_Transfer_Complete_TX_interrupt_handler>
  /* USER CODE END DMA2_Channel2_IRQn 0 */

  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8001f00:	bf00      	nop
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001f08:	4b06      	ldr	r3, [pc, #24]	; (8001f24 <SystemInit+0x20>)
 8001f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f0e:	4a05      	ldr	r2, [pc, #20]	; (8001f24 <SystemInit+0x20>)
 8001f10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001f18:	bf00      	nop
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	e000ed00 	.word	0xe000ed00

08001f28 <LL_APB1_GRP1_EnableClock>:
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001f30:	4b08      	ldr	r3, [pc, #32]	; (8001f54 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001f32:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001f34:	4907      	ldr	r1, [pc, #28]	; (8001f54 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001f3c:	4b05      	ldr	r3, [pc, #20]	; (8001f54 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001f3e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4013      	ands	r3, r2
 8001f44:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f46:	68fb      	ldr	r3, [r7, #12]
}
 8001f48:	bf00      	nop
 8001f4a:	3714      	adds	r7, #20
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr
 8001f54:	40021000 	.word	0x40021000

08001f58 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	601a      	str	r2, [r3, #0]
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8001f8a:	f023 0307 	bic.w	r3, r3, #7
 8001f8e:	683a      	ldr	r2, [r7, #0]
 8001f90:	431a      	orrs	r2, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	609a      	str	r2, [r3, #8]
}
 8001f96:	bf00      	nop
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr

08001fa2 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	b083      	sub	sp, #12
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
 8001faa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	431a      	orrs	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	605a      	str	r2, [r3, #4]
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	609a      	str	r2, [r3, #8]
}
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001fee:	1d3b      	adds	r3, r7, #4
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	605a      	str	r2, [r3, #4]
 8001ff6:	609a      	str	r2, [r3, #8]
 8001ff8:	60da      	str	r2, [r3, #12]
 8001ffa:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8001ffc:	2001      	movs	r0, #1
 8001ffe:	f7ff ff93 	bl	8001f28 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8002002:	2300      	movs	r3, #0
 8002004:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002006:	2300      	movs	r3, #0
 8002008:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 16;
 800200a:	2310      	movs	r3, #16
 800200c:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800200e:	2300      	movs	r3, #0
 8002010:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8002012:	1d3b      	adds	r3, r7, #4
 8002014:	4619      	mov	r1, r3
 8002016:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800201a:	f000 fce9 	bl	80029f0 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 800201e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002022:	f7ff ff99 	bl	8001f58 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002026:	2100      	movs	r1, #0
 8002028:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800202c:	f7ff ffa4 	bl	8001f78 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8002030:	2100      	movs	r1, #0
 8002032:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002036:	f7ff ffb4 	bl	8001fa2 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 800203a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800203e:	f7ff ffc3 	bl	8001fc8 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002042:	bf00      	nop
 8002044:	3718      	adds	r7, #24
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
	...

0800204c <Reset_Handler>:
 800204c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002084 <LoopForever+0x2>
 8002050:	f7ff ff58 	bl	8001f04 <SystemInit>
 8002054:	480c      	ldr	r0, [pc, #48]	; (8002088 <LoopForever+0x6>)
 8002056:	490d      	ldr	r1, [pc, #52]	; (800208c <LoopForever+0xa>)
 8002058:	4a0d      	ldr	r2, [pc, #52]	; (8002090 <LoopForever+0xe>)
 800205a:	2300      	movs	r3, #0
 800205c:	e002      	b.n	8002064 <LoopCopyDataInit>

0800205e <CopyDataInit>:
 800205e:	58d4      	ldr	r4, [r2, r3]
 8002060:	50c4      	str	r4, [r0, r3]
 8002062:	3304      	adds	r3, #4

08002064 <LoopCopyDataInit>:
 8002064:	18c4      	adds	r4, r0, r3
 8002066:	428c      	cmp	r4, r1
 8002068:	d3f9      	bcc.n	800205e <CopyDataInit>
 800206a:	4a0a      	ldr	r2, [pc, #40]	; (8002094 <LoopForever+0x12>)
 800206c:	4c0a      	ldr	r4, [pc, #40]	; (8002098 <LoopForever+0x16>)
 800206e:	2300      	movs	r3, #0
 8002070:	e001      	b.n	8002076 <LoopFillZerobss>

08002072 <FillZerobss>:
 8002072:	6013      	str	r3, [r2, #0]
 8002074:	3204      	adds	r2, #4

08002076 <LoopFillZerobss>:
 8002076:	42a2      	cmp	r2, r4
 8002078:	d3fb      	bcc.n	8002072 <FillZerobss>
 800207a:	f000 fd85 	bl	8002b88 <__libc_init_array>
 800207e:	f7ff f989 	bl	8001394 <main>

08002082 <LoopForever>:
 8002082:	e7fe      	b.n	8002082 <LoopForever>
 8002084:	20018000 	.word	0x20018000
 8002088:	20000000 	.word	0x20000000
 800208c:	20000004 	.word	0x20000004
 8002090:	08002c10 	.word	0x08002c10
 8002094:	20000004 	.word	0x20000004
 8002098:	2000bc80 	.word	0x2000bc80

0800209c <ADC1_2_IRQHandler>:
 800209c:	e7fe      	b.n	800209c <ADC1_2_IRQHandler>
	...

080020a0 <LL_EXTI_EnableIT_0_31>:
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80020a8:	4b05      	ldr	r3, [pc, #20]	; (80020c0 <LL_EXTI_EnableIT_0_31+0x20>)
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	4904      	ldr	r1, [pc, #16]	; (80020c0 <LL_EXTI_EnableIT_0_31+0x20>)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	600b      	str	r3, [r1, #0]
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr
 80020c0:	40010400 	.word	0x40010400

080020c4 <LL_EXTI_EnableIT_32_63>:
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80020cc:	4b05      	ldr	r3, [pc, #20]	; (80020e4 <LL_EXTI_EnableIT_32_63+0x20>)
 80020ce:	6a1a      	ldr	r2, [r3, #32]
 80020d0:	4904      	ldr	r1, [pc, #16]	; (80020e4 <LL_EXTI_EnableIT_32_63+0x20>)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	620b      	str	r3, [r1, #32]
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr
 80020e4:	40010400 	.word	0x40010400

080020e8 <LL_EXTI_DisableIT_0_31>:
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80020f0:	4b06      	ldr	r3, [pc, #24]	; (800210c <LL_EXTI_DisableIT_0_31+0x24>)
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	43db      	mvns	r3, r3
 80020f8:	4904      	ldr	r1, [pc, #16]	; (800210c <LL_EXTI_DisableIT_0_31+0x24>)
 80020fa:	4013      	ands	r3, r2
 80020fc:	600b      	str	r3, [r1, #0]
}
 80020fe:	bf00      	nop
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	40010400 	.word	0x40010400

08002110 <LL_EXTI_DisableIT_32_63>:
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8002118:	4b06      	ldr	r3, [pc, #24]	; (8002134 <LL_EXTI_DisableIT_32_63+0x24>)
 800211a:	6a1a      	ldr	r2, [r3, #32]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	43db      	mvns	r3, r3
 8002120:	4904      	ldr	r1, [pc, #16]	; (8002134 <LL_EXTI_DisableIT_32_63+0x24>)
 8002122:	4013      	ands	r3, r2
 8002124:	620b      	str	r3, [r1, #32]
}
 8002126:	bf00      	nop
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	40010400 	.word	0x40010400

08002138 <LL_EXTI_EnableEvent_0_31>:
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8002140:	4b05      	ldr	r3, [pc, #20]	; (8002158 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002142:	685a      	ldr	r2, [r3, #4]
 8002144:	4904      	ldr	r1, [pc, #16]	; (8002158 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4313      	orrs	r3, r2
 800214a:	604b      	str	r3, [r1, #4]
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	40010400 	.word	0x40010400

0800215c <LL_EXTI_EnableEvent_32_63>:
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8002164:	4b05      	ldr	r3, [pc, #20]	; (800217c <LL_EXTI_EnableEvent_32_63+0x20>)
 8002166:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002168:	4904      	ldr	r1, [pc, #16]	; (800217c <LL_EXTI_EnableEvent_32_63+0x20>)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4313      	orrs	r3, r2
 800216e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr
 800217c:	40010400 	.word	0x40010400

08002180 <LL_EXTI_DisableEvent_0_31>:
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8002188:	4b06      	ldr	r3, [pc, #24]	; (80021a4 <LL_EXTI_DisableEvent_0_31+0x24>)
 800218a:	685a      	ldr	r2, [r3, #4]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	43db      	mvns	r3, r3
 8002190:	4904      	ldr	r1, [pc, #16]	; (80021a4 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002192:	4013      	ands	r3, r2
 8002194:	604b      	str	r3, [r1, #4]
}
 8002196:	bf00      	nop
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	40010400 	.word	0x40010400

080021a8 <LL_EXTI_DisableEvent_32_63>:
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 80021b0:	4b06      	ldr	r3, [pc, #24]	; (80021cc <LL_EXTI_DisableEvent_32_63+0x24>)
 80021b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	43db      	mvns	r3, r3
 80021b8:	4904      	ldr	r1, [pc, #16]	; (80021cc <LL_EXTI_DisableEvent_32_63+0x24>)
 80021ba:	4013      	ands	r3, r2
 80021bc:	624b      	str	r3, [r1, #36]	; 0x24
}
 80021be:	bf00      	nop
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	40010400 	.word	0x40010400

080021d0 <LL_EXTI_EnableRisingTrig_0_31>:
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80021d8:	4b05      	ldr	r3, [pc, #20]	; (80021f0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80021da:	689a      	ldr	r2, [r3, #8]
 80021dc:	4904      	ldr	r1, [pc, #16]	; (80021f0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	608b      	str	r3, [r1, #8]
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr
 80021f0:	40010400 	.word	0x40010400

080021f4 <LL_EXTI_EnableRisingTrig_32_63>:
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80021fc:	4b05      	ldr	r3, [pc, #20]	; (8002214 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80021fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002200:	4904      	ldr	r1, [pc, #16]	; (8002214 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4313      	orrs	r3, r2
 8002206:	628b      	str	r3, [r1, #40]	; 0x28
}
 8002208:	bf00      	nop
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr
 8002214:	40010400 	.word	0x40010400

08002218 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8002220:	4b06      	ldr	r3, [pc, #24]	; (800223c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002222:	689a      	ldr	r2, [r3, #8]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	43db      	mvns	r3, r3
 8002228:	4904      	ldr	r1, [pc, #16]	; (800223c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800222a:	4013      	ands	r3, r2
 800222c:	608b      	str	r3, [r1, #8]
}
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	40010400 	.word	0x40010400

08002240 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8002248:	4b06      	ldr	r3, [pc, #24]	; (8002264 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800224a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	43db      	mvns	r3, r3
 8002250:	4904      	ldr	r1, [pc, #16]	; (8002264 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8002252:	4013      	ands	r3, r2
 8002254:	628b      	str	r3, [r1, #40]	; 0x28
}
 8002256:	bf00      	nop
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	40010400 	.word	0x40010400

08002268 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8002270:	4b05      	ldr	r3, [pc, #20]	; (8002288 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002272:	68da      	ldr	r2, [r3, #12]
 8002274:	4904      	ldr	r1, [pc, #16]	; (8002288 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4313      	orrs	r3, r2
 800227a:	60cb      	str	r3, [r1, #12]
}
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	40010400 	.word	0x40010400

0800228c <LL_EXTI_EnableFallingTrig_32_63>:
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8002294:	4b05      	ldr	r3, [pc, #20]	; (80022ac <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8002296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002298:	4904      	ldr	r1, [pc, #16]	; (80022ac <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4313      	orrs	r3, r2
 800229e:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr
 80022ac:	40010400 	.word	0x40010400

080022b0 <LL_EXTI_DisableFallingTrig_0_31>:
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80022b8:	4b06      	ldr	r3, [pc, #24]	; (80022d4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80022ba:	68da      	ldr	r2, [r3, #12]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	43db      	mvns	r3, r3
 80022c0:	4904      	ldr	r1, [pc, #16]	; (80022d4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80022c2:	4013      	ands	r3, r2
 80022c4:	60cb      	str	r3, [r1, #12]
}
 80022c6:	bf00      	nop
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	40010400 	.word	0x40010400

080022d8 <LL_EXTI_DisableFallingTrig_32_63>:
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 80022e0:	4b06      	ldr	r3, [pc, #24]	; (80022fc <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80022e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	43db      	mvns	r3, r3
 80022e8:	4904      	ldr	r1, [pc, #16]	; (80022fc <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80022ea:	4013      	ands	r3, r2
 80022ec:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80022ee:	bf00      	nop
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	40010400 	.word	0x40010400

08002300 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other value : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 8002308:	2300      	movs	r3, #0
 800230a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	7a1b      	ldrb	r3, [r3, #8]
 8002310:	2b00      	cmp	r3, #0
 8002312:	f000 80d1 	beq.w	80024b8 <LL_EXTI_Init+0x1b8>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d063      	beq.n	80023e6 <LL_EXTI_Init+0xe6>
    {
      switch (EXTI_InitStruct->Mode)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	7a5b      	ldrb	r3, [r3, #9]
 8002322:	2b02      	cmp	r3, #2
 8002324:	d01c      	beq.n	8002360 <LL_EXTI_Init+0x60>
 8002326:	2b02      	cmp	r3, #2
 8002328:	dc25      	bgt.n	8002376 <LL_EXTI_Init+0x76>
 800232a:	2b00      	cmp	r3, #0
 800232c:	d002      	beq.n	8002334 <LL_EXTI_Init+0x34>
 800232e:	2b01      	cmp	r3, #1
 8002330:	d00b      	beq.n	800234a <LL_EXTI_Init+0x4a>
 8002332:	e020      	b.n	8002376 <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4618      	mov	r0, r3
 800233a:	f7ff ff21 	bl	8002180 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4618      	mov	r0, r3
 8002344:	f7ff feac 	bl	80020a0 <LL_EXTI_EnableIT_0_31>
          break;
 8002348:	e018      	b.n	800237c <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4618      	mov	r0, r3
 8002350:	f7ff feca 	bl	80020e8 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff feed 	bl	8002138 <LL_EXTI_EnableEvent_0_31>
          break;
 800235e:	e00d      	b.n	800237c <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff fe9b 	bl	80020a0 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff fee2 	bl	8002138 <LL_EXTI_EnableEvent_0_31>
          break;
 8002374:	e002      	b.n	800237c <LL_EXTI_Init+0x7c>
        default:
          status = 0x01u;
 8002376:	2301      	movs	r3, #1
 8002378:	60fb      	str	r3, [r7, #12]
          break;
 800237a:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	7a9b      	ldrb	r3, [r3, #10]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d030      	beq.n	80023e6 <LL_EXTI_Init+0xe6>
      {
        switch (EXTI_InitStruct->Trigger)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	7a9b      	ldrb	r3, [r3, #10]
 8002388:	2b03      	cmp	r3, #3
 800238a:	d01c      	beq.n	80023c6 <LL_EXTI_Init+0xc6>
 800238c:	2b03      	cmp	r3, #3
 800238e:	dc25      	bgt.n	80023dc <LL_EXTI_Init+0xdc>
 8002390:	2b01      	cmp	r3, #1
 8002392:	d002      	beq.n	800239a <LL_EXTI_Init+0x9a>
 8002394:	2b02      	cmp	r3, #2
 8002396:	d00b      	beq.n	80023b0 <LL_EXTI_Init+0xb0>
 8002398:	e020      	b.n	80023dc <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff ff86 	bl	80022b0 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff ff11 	bl	80021d0 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80023ae:	e01b      	b.n	80023e8 <LL_EXTI_Init+0xe8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff ff2f 	bl	8002218 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff ff52 	bl	8002268 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80023c4:	e010      	b.n	80023e8 <LL_EXTI_Init+0xe8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7ff ff00 	bl	80021d0 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7ff ff47 	bl	8002268 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80023da:	e005      	b.n	80023e8 <LL_EXTI_Init+0xe8>
          default:
            status |= 0x02u;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f043 0302 	orr.w	r3, r3, #2
 80023e2:	60fb      	str	r3, [r7, #12]
            break;
 80023e4:	e000      	b.n	80023e8 <LL_EXTI_Init+0xe8>
        }
      }
 80023e6:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d078      	beq.n	80024e2 <LL_EXTI_Init+0x1e2>
    {
      switch (EXTI_InitStruct->Mode)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	7a5b      	ldrb	r3, [r3, #9]
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d01c      	beq.n	8002432 <LL_EXTI_Init+0x132>
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	dc25      	bgt.n	8002448 <LL_EXTI_Init+0x148>
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d002      	beq.n	8002406 <LL_EXTI_Init+0x106>
 8002400:	2b01      	cmp	r3, #1
 8002402:	d00b      	beq.n	800241c <LL_EXTI_Init+0x11c>
 8002404:	e020      	b.n	8002448 <LL_EXTI_Init+0x148>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	4618      	mov	r0, r3
 800240c:	f7ff fecc 	bl	80021a8 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff fe55 	bl	80020c4 <LL_EXTI_EnableIT_32_63>
          break;
 800241a:	e01a      	b.n	8002452 <LL_EXTI_Init+0x152>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	4618      	mov	r0, r3
 8002422:	f7ff fe75 	bl	8002110 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	4618      	mov	r0, r3
 800242c:	f7ff fe96 	bl	800215c <LL_EXTI_EnableEvent_32_63>
          break;
 8002430:	e00f      	b.n	8002452 <LL_EXTI_Init+0x152>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	4618      	mov	r0, r3
 8002438:	f7ff fe44 	bl	80020c4 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	4618      	mov	r0, r3
 8002442:	f7ff fe8b 	bl	800215c <LL_EXTI_EnableEvent_32_63>
          break;
 8002446:	e004      	b.n	8002452 <LL_EXTI_Init+0x152>
        default:
          status |= 0x04u;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f043 0304 	orr.w	r3, r3, #4
 800244e:	60fb      	str	r3, [r7, #12]
          break;
 8002450:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	7a9b      	ldrb	r3, [r3, #10]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d043      	beq.n	80024e2 <LL_EXTI_Init+0x1e2>
      {
        switch (EXTI_InitStruct->Trigger)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	7a9b      	ldrb	r3, [r3, #10]
 800245e:	2b03      	cmp	r3, #3
 8002460:	d01c      	beq.n	800249c <LL_EXTI_Init+0x19c>
 8002462:	2b03      	cmp	r3, #3
 8002464:	dc25      	bgt.n	80024b2 <LL_EXTI_Init+0x1b2>
 8002466:	2b01      	cmp	r3, #1
 8002468:	d002      	beq.n	8002470 <LL_EXTI_Init+0x170>
 800246a:	2b02      	cmp	r3, #2
 800246c:	d00b      	beq.n	8002486 <LL_EXTI_Init+0x186>
 800246e:	e020      	b.n	80024b2 <LL_EXTI_Init+0x1b2>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff ff2f 	bl	80022d8 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	4618      	mov	r0, r3
 8002480:	f7ff feb8 	bl	80021f4 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8002484:	e02e      	b.n	80024e4 <LL_EXTI_Init+0x1e4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	4618      	mov	r0, r3
 800248c:	f7ff fed8 	bl	8002240 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	4618      	mov	r0, r3
 8002496:	f7ff fef9 	bl	800228c <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800249a:	e023      	b.n	80024e4 <LL_EXTI_Init+0x1e4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7ff fea7 	bl	80021f4 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7ff feee 	bl	800228c <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80024b0:	e018      	b.n	80024e4 <LL_EXTI_Init+0x1e4>
          default:
            status = ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	60fb      	str	r3, [r7, #12]
            break;
 80024b6:	e015      	b.n	80024e4 <LL_EXTI_Init+0x1e4>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4618      	mov	r0, r3
 80024be:	f7ff fe13 	bl	80020e8 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff fe5a 	bl	8002180 <LL_EXTI_DisableEvent_0_31>
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff fe1d 	bl	8002110 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	4618      	mov	r0, r3
 80024dc:	f7ff fe64 	bl	80021a8 <LL_EXTI_DisableEvent_32_63>
 80024e0:	e000      	b.n	80024e4 <LL_EXTI_Init+0x1e4>
      }
 80024e2:	bf00      	nop
  }

  return status;
 80024e4:	68fb      	ldr	r3, [r7, #12]
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <LL_GPIO_SetPinMode>:
{
 80024ee:	b480      	push	{r7}
 80024f0:	b08b      	sub	sp, #44	; 0x2c
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	60f8      	str	r0, [r7, #12]
 80024f6:	60b9      	str	r1, [r7, #8]
 80024f8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	fa93 f3a3 	rbit	r3, r3
 8002508:	613b      	str	r3, [r7, #16]
  return result;
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d101      	bne.n	8002518 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8002514:	2320      	movs	r3, #32
 8002516:	e003      	b.n	8002520 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	fab3 f383 	clz	r3, r3
 800251e:	b2db      	uxtb	r3, r3
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	2103      	movs	r1, #3
 8002524:	fa01 f303 	lsl.w	r3, r1, r3
 8002528:	43db      	mvns	r3, r3
 800252a:	401a      	ands	r2, r3
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002530:	6a3b      	ldr	r3, [r7, #32]
 8002532:	fa93 f3a3 	rbit	r3, r3
 8002536:	61fb      	str	r3, [r7, #28]
  return result;
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800253c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253e:	2b00      	cmp	r3, #0
 8002540:	d101      	bne.n	8002546 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8002542:	2320      	movs	r3, #32
 8002544:	e003      	b.n	800254e <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8002546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002548:	fab3 f383 	clz	r3, r3
 800254c:	b2db      	uxtb	r3, r3
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	6879      	ldr	r1, [r7, #4]
 8002552:	fa01 f303 	lsl.w	r3, r1, r3
 8002556:	431a      	orrs	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	601a      	str	r2, [r3, #0]
}
 800255c:	bf00      	nop
 800255e:	372c      	adds	r7, #44	; 0x2c
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <LL_GPIO_SetPinOutputType>:
{
 8002568:	b480      	push	{r7}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	685a      	ldr	r2, [r3, #4]
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	43db      	mvns	r3, r3
 800257c:	401a      	ands	r2, r3
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	6879      	ldr	r1, [r7, #4]
 8002582:	fb01 f303 	mul.w	r3, r1, r3
 8002586:	431a      	orrs	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	605a      	str	r2, [r3, #4]
}
 800258c:	bf00      	nop
 800258e:	3714      	adds	r7, #20
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <LL_GPIO_SetPinSpeed>:
{
 8002598:	b480      	push	{r7}
 800259a:	b08b      	sub	sp, #44	; 0x2c
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	689a      	ldr	r2, [r3, #8]
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	fa93 f3a3 	rbit	r3, r3
 80025b2:	613b      	str	r3, [r7, #16]
  return result;
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80025be:	2320      	movs	r3, #32
 80025c0:	e003      	b.n	80025ca <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	fab3 f383 	clz	r3, r3
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	2103      	movs	r1, #3
 80025ce:	fa01 f303 	lsl.w	r3, r1, r3
 80025d2:	43db      	mvns	r3, r3
 80025d4:	401a      	ands	r2, r3
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025da:	6a3b      	ldr	r3, [r7, #32]
 80025dc:	fa93 f3a3 	rbit	r3, r3
 80025e0:	61fb      	str	r3, [r7, #28]
  return result;
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80025e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d101      	bne.n	80025f0 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80025ec:	2320      	movs	r3, #32
 80025ee:	e003      	b.n	80025f8 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80025f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f2:	fab3 f383 	clz	r3, r3
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	6879      	ldr	r1, [r7, #4]
 80025fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002600:	431a      	orrs	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	609a      	str	r2, [r3, #8]
}
 8002606:	bf00      	nop
 8002608:	372c      	adds	r7, #44	; 0x2c
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr

08002612 <LL_GPIO_SetPinPull>:
{
 8002612:	b480      	push	{r7}
 8002614:	b08b      	sub	sp, #44	; 0x2c
 8002616:	af00      	add	r7, sp, #0
 8002618:	60f8      	str	r0, [r7, #12]
 800261a:	60b9      	str	r1, [r7, #8]
 800261c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	68da      	ldr	r2, [r3, #12]
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	fa93 f3a3 	rbit	r3, r3
 800262c:	613b      	str	r3, [r7, #16]
  return result;
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d101      	bne.n	800263c <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8002638:	2320      	movs	r3, #32
 800263a:	e003      	b.n	8002644 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	fab3 f383 	clz	r3, r3
 8002642:	b2db      	uxtb	r3, r3
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	2103      	movs	r1, #3
 8002648:	fa01 f303 	lsl.w	r3, r1, r3
 800264c:	43db      	mvns	r3, r3
 800264e:	401a      	ands	r2, r3
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002654:	6a3b      	ldr	r3, [r7, #32]
 8002656:	fa93 f3a3 	rbit	r3, r3
 800265a:	61fb      	str	r3, [r7, #28]
  return result;
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8002666:	2320      	movs	r3, #32
 8002668:	e003      	b.n	8002672 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800266a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266c:	fab3 f383 	clz	r3, r3
 8002670:	b2db      	uxtb	r3, r3
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	6879      	ldr	r1, [r7, #4]
 8002676:	fa01 f303 	lsl.w	r3, r1, r3
 800267a:	431a      	orrs	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	60da      	str	r2, [r3, #12]
}
 8002680:	bf00      	nop
 8002682:	372c      	adds	r7, #44	; 0x2c
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <LL_GPIO_SetAFPin_0_7>:
{
 800268c:	b480      	push	{r7}
 800268e:	b08b      	sub	sp, #44	; 0x2c
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6a1a      	ldr	r2, [r3, #32]
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	fa93 f3a3 	rbit	r3, r3
 80026a6:	613b      	str	r3, [r7, #16]
  return result;
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d101      	bne.n	80026b6 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80026b2:	2320      	movs	r3, #32
 80026b4:	e003      	b.n	80026be <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	fab3 f383 	clz	r3, r3
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	210f      	movs	r1, #15
 80026c2:	fa01 f303 	lsl.w	r3, r1, r3
 80026c6:	43db      	mvns	r3, r3
 80026c8:	401a      	ands	r2, r3
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ce:	6a3b      	ldr	r3, [r7, #32]
 80026d0:	fa93 f3a3 	rbit	r3, r3
 80026d4:	61fb      	str	r3, [r7, #28]
  return result;
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80026da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d101      	bne.n	80026e4 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80026e0:	2320      	movs	r3, #32
 80026e2:	e003      	b.n	80026ec <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80026e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e6:	fab3 f383 	clz	r3, r3
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	6879      	ldr	r1, [r7, #4]
 80026f0:	fa01 f303 	lsl.w	r3, r1, r3
 80026f4:	431a      	orrs	r2, r3
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	621a      	str	r2, [r3, #32]
}
 80026fa:	bf00      	nop
 80026fc:	372c      	adds	r7, #44	; 0x2c
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr

08002706 <LL_GPIO_SetAFPin_8_15>:
{
 8002706:	b480      	push	{r7}
 8002708:	b08b      	sub	sp, #44	; 0x2c
 800270a:	af00      	add	r7, sp, #0
 800270c:	60f8      	str	r0, [r7, #12]
 800270e:	60b9      	str	r1, [r7, #8]
 8002710:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	0a1b      	lsrs	r3, r3, #8
 800271a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	fa93 f3a3 	rbit	r3, r3
 8002722:	613b      	str	r3, [r7, #16]
  return result;
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800272e:	2320      	movs	r3, #32
 8002730:	e003      	b.n	800273a <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	fab3 f383 	clz	r3, r3
 8002738:	b2db      	uxtb	r3, r3
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	210f      	movs	r1, #15
 800273e:	fa01 f303 	lsl.w	r3, r1, r3
 8002742:	43db      	mvns	r3, r3
 8002744:	401a      	ands	r2, r3
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	0a1b      	lsrs	r3, r3, #8
 800274a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274c:	6a3b      	ldr	r3, [r7, #32]
 800274e:	fa93 f3a3 	rbit	r3, r3
 8002752:	61fb      	str	r3, [r7, #28]
  return result;
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275a:	2b00      	cmp	r3, #0
 800275c:	d101      	bne.n	8002762 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800275e:	2320      	movs	r3, #32
 8002760:	e003      	b.n	800276a <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8002762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002764:	fab3 f383 	clz	r3, r3
 8002768:	b2db      	uxtb	r3, r3
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	6879      	ldr	r1, [r7, #4]
 800276e:	fa01 f303 	lsl.w	r3, r1, r3
 8002772:	431a      	orrs	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002778:	bf00      	nop
 800277a:	372c      	adds	r7, #44	; 0x2c
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b088      	sub	sp, #32
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	fa93 f3a3 	rbit	r3, r3
 800279a:	60fb      	str	r3, [r7, #12]
  return result;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d101      	bne.n	80027aa <LL_GPIO_Init+0x26>
    return 32U;
 80027a6:	2320      	movs	r3, #32
 80027a8:	e003      	b.n	80027b2 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	fab3 f383 	clz	r3, r3
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80027b4:	e048      	b.n	8002848 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	2101      	movs	r1, #1
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	fa01 f303 	lsl.w	r3, r1, r3
 80027c2:	4013      	ands	r3, r2
 80027c4:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d03a      	beq.n	8002842 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d003      	beq.n	80027dc <LL_GPIO_Init+0x58>
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d10e      	bne.n	80027fa <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	461a      	mov	r2, r3
 80027e2:	69b9      	ldr	r1, [r7, #24]
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f7ff fed7 	bl	8002598 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	6819      	ldr	r1, [r3, #0]
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	461a      	mov	r2, r3
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f7ff feb7 	bl	8002568 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	461a      	mov	r2, r3
 8002800:	69b9      	ldr	r1, [r7, #24]
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f7ff ff05 	bl	8002612 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	2b02      	cmp	r3, #2
 800280e:	d111      	bne.n	8002834 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	2bff      	cmp	r3, #255	; 0xff
 8002814:	d807      	bhi.n	8002826 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	461a      	mov	r2, r3
 800281c:	69b9      	ldr	r1, [r7, #24]
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f7ff ff34 	bl	800268c <LL_GPIO_SetAFPin_0_7>
 8002824:	e006      	b.n	8002834 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	695b      	ldr	r3, [r3, #20]
 800282a:	461a      	mov	r2, r3
 800282c:	69b9      	ldr	r1, [r7, #24]
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f7ff ff69 	bl	8002706 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	461a      	mov	r2, r3
 800283a:	69b9      	ldr	r1, [r7, #24]
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f7ff fe56 	bl	80024ee <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	3301      	adds	r3, #1
 8002846:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	fa22 f303 	lsr.w	r3, r2, r3
 8002852:	2b00      	cmp	r3, #0
 8002854:	d1af      	bne.n	80027b6 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3720      	adds	r7, #32
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <LL_SPI_IsEnabled>:
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002870:	2b40      	cmp	r3, #64	; 0x40
 8002872:	d101      	bne.n	8002878 <LL_SPI_IsEnabled+0x18>
 8002874:	2301      	movs	r3, #1
 8002876:	e000      	b.n	800287a <LL_SPI_IsEnabled+0x1a>
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr

08002886 <LL_SPI_SetRxFIFOThreshold>:
{
 8002886:	b480      	push	{r7}
 8002888:	b083      	sub	sp, #12
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
 800288e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	431a      	orrs	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	605a      	str	r2, [r3, #4]
}
 80028a0:	bf00      	nop
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <LL_SPI_SetCRCPolynomial>:
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	461a      	mov	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	611a      	str	r2, [r3, #16]
}
 80028c0:	bf00      	nop
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f7ff ffc0 	bl	8002860 <LL_SPI_IsEnabled>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d145      	bne.n	8002972 <LL_SPI_Init+0xa6>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028ee:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	6811      	ldr	r1, [r2, #0]
 80028f6:	683a      	ldr	r2, [r7, #0]
 80028f8:	6852      	ldr	r2, [r2, #4]
 80028fa:	4311      	orrs	r1, r2
 80028fc:	683a      	ldr	r2, [r7, #0]
 80028fe:	68d2      	ldr	r2, [r2, #12]
 8002900:	4311      	orrs	r1, r2
 8002902:	683a      	ldr	r2, [r7, #0]
 8002904:	6912      	ldr	r2, [r2, #16]
 8002906:	4311      	orrs	r1, r2
 8002908:	683a      	ldr	r2, [r7, #0]
 800290a:	6952      	ldr	r2, [r2, #20]
 800290c:	4311      	orrs	r1, r2
 800290e:	683a      	ldr	r2, [r7, #0]
 8002910:	6992      	ldr	r2, [r2, #24]
 8002912:	4311      	orrs	r1, r2
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	69d2      	ldr	r2, [r2, #28]
 8002918:	4311      	orrs	r1, r2
 800291a:	683a      	ldr	r2, [r7, #0]
 800291c:	6a12      	ldr	r2, [r2, #32]
 800291e:	430a      	orrs	r2, r1
 8002920:	431a      	orrs	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800292e:	f023 0304 	bic.w	r3, r3, #4
 8002932:	683a      	ldr	r2, [r7, #0]
 8002934:	6891      	ldr	r1, [r2, #8]
 8002936:	683a      	ldr	r2, [r7, #0]
 8002938:	6952      	ldr	r2, [r2, #20]
 800293a:	0c12      	lsrs	r2, r2, #16
 800293c:	430a      	orrs	r2, r1
 800293e:	431a      	orrs	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	605a      	str	r2, [r3, #4]
               SPI_CR2_DS | SPI_CR2_SSOE,
               SPI_InitStruct->DataWidth | (SPI_InitStruct->NSS >> 16U));

    /* Set Rx FIFO to Quarter (1 Byte) in case of 8 Bits mode. No DataPacking by default */
    if (SPI_InitStruct->DataWidth < LL_SPI_DATAWIDTH_9BIT)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800294c:	d204      	bcs.n	8002958 <LL_SPI_Init+0x8c>
    {
      LL_SPI_SetRxFIFOThreshold(SPIx, LL_SPI_RX_FIFO_TH_QUARTER);
 800294e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f7ff ff97 	bl	8002886 <LL_SPI_SetRxFIFOThreshold>

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	6a1b      	ldr	r3, [r3, #32]
 800295c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002960:	d105      	bne.n	800296e <LL_SPI_Init+0xa2>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002966:	4619      	mov	r1, r3
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f7ff ff9f 	bl	80028ac <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 800296e:	2300      	movs	r3, #0
 8002970:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8002972:	7bfb      	ldrb	r3, [r7, #15]
}
 8002974:	4618      	mov	r0, r3
 8002976:	3710      	adds	r7, #16
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <LL_TIM_SetPrescaler>:
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <LL_TIM_SetAutoReload>:
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	683a      	ldr	r2, [r7, #0]
 80029a6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80029a8:	bf00      	nop
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <LL_TIM_SetRepetitionCounter>:
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	683a      	ldr	r2, [r7, #0]
 80029c2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	695b      	ldr	r3, [r3, #20]
 80029dc:	f043 0201 	orr.w	r2, r3, #1
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	615a      	str	r2, [r3, #20]
}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4a3d      	ldr	r2, [pc, #244]	; (8002af8 <LL_TIM_Init+0x108>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d013      	beq.n	8002a30 <LL_TIM_Init+0x40>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a0e:	d00f      	beq.n	8002a30 <LL_TIM_Init+0x40>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4a3a      	ldr	r2, [pc, #232]	; (8002afc <LL_TIM_Init+0x10c>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d00b      	beq.n	8002a30 <LL_TIM_Init+0x40>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	4a39      	ldr	r2, [pc, #228]	; (8002b00 <LL_TIM_Init+0x110>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d007      	beq.n	8002a30 <LL_TIM_Init+0x40>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	4a38      	ldr	r2, [pc, #224]	; (8002b04 <LL_TIM_Init+0x114>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d003      	beq.n	8002a30 <LL_TIM_Init+0x40>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	4a37      	ldr	r2, [pc, #220]	; (8002b08 <LL_TIM_Init+0x118>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d106      	bne.n	8002a3e <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a2d      	ldr	r2, [pc, #180]	; (8002af8 <LL_TIM_Init+0x108>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d01f      	beq.n	8002a86 <LL_TIM_Init+0x96>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a4c:	d01b      	beq.n	8002a86 <LL_TIM_Init+0x96>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a2a      	ldr	r2, [pc, #168]	; (8002afc <LL_TIM_Init+0x10c>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d017      	beq.n	8002a86 <LL_TIM_Init+0x96>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a29      	ldr	r2, [pc, #164]	; (8002b00 <LL_TIM_Init+0x110>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d013      	beq.n	8002a86 <LL_TIM_Init+0x96>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a28      	ldr	r2, [pc, #160]	; (8002b04 <LL_TIM_Init+0x114>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d00f      	beq.n	8002a86 <LL_TIM_Init+0x96>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a27      	ldr	r2, [pc, #156]	; (8002b08 <LL_TIM_Init+0x118>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d00b      	beq.n	8002a86 <LL_TIM_Init+0x96>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a26      	ldr	r2, [pc, #152]	; (8002b0c <LL_TIM_Init+0x11c>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d007      	beq.n	8002a86 <LL_TIM_Init+0x96>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a25      	ldr	r2, [pc, #148]	; (8002b10 <LL_TIM_Init+0x120>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d003      	beq.n	8002a86 <LL_TIM_Init+0x96>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a24      	ldr	r2, [pc, #144]	; (8002b14 <LL_TIM_Init+0x124>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d106      	bne.n	8002a94 <LL_TIM_Init+0xa4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	68fa      	ldr	r2, [r7, #12]
 8002a98:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f7ff ff79 	bl	8002998 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	881b      	ldrh	r3, [r3, #0]
 8002aaa:	4619      	mov	r1, r3
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f7ff ff65 	bl	800297c <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a10      	ldr	r2, [pc, #64]	; (8002af8 <LL_TIM_Init+0x108>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d00f      	beq.n	8002ada <LL_TIM_Init+0xea>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a12      	ldr	r2, [pc, #72]	; (8002b08 <LL_TIM_Init+0x118>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d00b      	beq.n	8002ada <LL_TIM_Init+0xea>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a11      	ldr	r2, [pc, #68]	; (8002b0c <LL_TIM_Init+0x11c>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d007      	beq.n	8002ada <LL_TIM_Init+0xea>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a10      	ldr	r2, [pc, #64]	; (8002b10 <LL_TIM_Init+0x120>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d003      	beq.n	8002ada <LL_TIM_Init+0xea>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a0f      	ldr	r2, [pc, #60]	; (8002b14 <LL_TIM_Init+0x124>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d105      	bne.n	8002ae6 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	4619      	mov	r1, r3
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f7ff ff67 	bl	80029b4 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f7ff ff72 	bl	80029d0 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3710      	adds	r7, #16
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	40012c00 	.word	0x40012c00
 8002afc:	40000400 	.word	0x40000400
 8002b00:	40000800 	.word	0x40000800
 8002b04:	40000c00 	.word	0x40000c00
 8002b08:	40013400 	.word	0x40013400
 8002b0c:	40014000 	.word	0x40014000
 8002b10:	40014400 	.word	0x40014400
 8002b14:	40014800 	.word	0x40014800

08002b18 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b2a:	4a07      	ldr	r2, [pc, #28]	; (8002b48 <LL_InitTick+0x30>)
 8002b2c:	3b01      	subs	r3, #1
 8002b2e:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002b30:	4b05      	ldr	r3, [pc, #20]	; (8002b48 <LL_InitTick+0x30>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b36:	4b04      	ldr	r3, [pc, #16]	; (8002b48 <LL_InitTick+0x30>)
 8002b38:	2205      	movs	r2, #5
 8002b3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002b3c:	bf00      	nop
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr
 8002b48:	e000e010 	.word	0xe000e010

08002b4c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002b54:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f7ff ffdd 	bl	8002b18 <LL_InitTick>
}
 8002b5e:	bf00      	nop
 8002b60:	3708      	adds	r7, #8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
	...

08002b68 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002b70:	4a04      	ldr	r2, [pc, #16]	; (8002b84 <LL_SetSystemCoreClock+0x1c>)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6013      	str	r3, [r2, #0]
}
 8002b76:	bf00      	nop
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	20000000 	.word	0x20000000

08002b88 <__libc_init_array>:
 8002b88:	b570      	push	{r4, r5, r6, lr}
 8002b8a:	4d0d      	ldr	r5, [pc, #52]	; (8002bc0 <__libc_init_array+0x38>)
 8002b8c:	4c0d      	ldr	r4, [pc, #52]	; (8002bc4 <__libc_init_array+0x3c>)
 8002b8e:	1b64      	subs	r4, r4, r5
 8002b90:	10a4      	asrs	r4, r4, #2
 8002b92:	2600      	movs	r6, #0
 8002b94:	42a6      	cmp	r6, r4
 8002b96:	d109      	bne.n	8002bac <__libc_init_array+0x24>
 8002b98:	4d0b      	ldr	r5, [pc, #44]	; (8002bc8 <__libc_init_array+0x40>)
 8002b9a:	4c0c      	ldr	r4, [pc, #48]	; (8002bcc <__libc_init_array+0x44>)
 8002b9c:	f000 f820 	bl	8002be0 <_init>
 8002ba0:	1b64      	subs	r4, r4, r5
 8002ba2:	10a4      	asrs	r4, r4, #2
 8002ba4:	2600      	movs	r6, #0
 8002ba6:	42a6      	cmp	r6, r4
 8002ba8:	d105      	bne.n	8002bb6 <__libc_init_array+0x2e>
 8002baa:	bd70      	pop	{r4, r5, r6, pc}
 8002bac:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bb0:	4798      	blx	r3
 8002bb2:	3601      	adds	r6, #1
 8002bb4:	e7ee      	b.n	8002b94 <__libc_init_array+0xc>
 8002bb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bba:	4798      	blx	r3
 8002bbc:	3601      	adds	r6, #1
 8002bbe:	e7f2      	b.n	8002ba6 <__libc_init_array+0x1e>
 8002bc0:	08002c08 	.word	0x08002c08
 8002bc4:	08002c08 	.word	0x08002c08
 8002bc8:	08002c08 	.word	0x08002c08
 8002bcc:	08002c0c 	.word	0x08002c0c

08002bd0 <memset>:
 8002bd0:	4402      	add	r2, r0
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d100      	bne.n	8002bda <memset+0xa>
 8002bd8:	4770      	bx	lr
 8002bda:	f803 1b01 	strb.w	r1, [r3], #1
 8002bde:	e7f9      	b.n	8002bd4 <memset+0x4>

08002be0 <_init>:
 8002be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002be2:	bf00      	nop
 8002be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002be6:	bc08      	pop	{r3}
 8002be8:	469e      	mov	lr, r3
 8002bea:	4770      	bx	lr

08002bec <_fini>:
 8002bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bee:	bf00      	nop
 8002bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bf2:	bc08      	pop	{r3}
 8002bf4:	469e      	mov	lr, r3
 8002bf6:	4770      	bx	lr
