
fersat_pdh.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002504  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800268c  0800268c  0001268c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800269c  0800269c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  0800269c  0800269c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800269c  0800269c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800269c  0800269c  0001269c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026a0  080026a0  000126a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080026a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003c4c  20000004  080026a8  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003c50  080026a8  00023c50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008e45  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001970  00000000  00000000  00028e79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000900  00000000  00000000  0002a7f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000828  00000000  00000000  0002b0f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dad6  00000000  00000000  0002b918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000699c  00000000  00000000  000493ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a319c  00000000  00000000  0004fd8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f2f26  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002498  00000000  00000000  000f2f78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002674 	.word	0x08002674

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08002674 	.word	0x08002674

080001c8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	db12      	blt.n	8000200 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001da:	79fb      	ldrb	r3, [r7, #7]
 80001dc:	f003 021f 	and.w	r2, r3, #31
 80001e0:	490a      	ldr	r1, [pc, #40]	; (800020c <__NVIC_DisableIRQ+0x44>)
 80001e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e6:	095b      	lsrs	r3, r3, #5
 80001e8:	2001      	movs	r0, #1
 80001ea:	fa00 f202 	lsl.w	r2, r0, r2
 80001ee:	3320      	adds	r3, #32
 80001f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80001f4:	f3bf 8f4f 	dsb	sy
}
 80001f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80001fa:	f3bf 8f6f 	isb	sy
}
 80001fe:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000200:	bf00      	nop
 8000202:	370c      	adds	r7, #12
 8000204:	46bd      	mov	sp, r7
 8000206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020a:	4770      	bx	lr
 800020c:	e000e100 	.word	0xe000e100

08000210 <LL_SPI_DMA_GetRegAddr>:
  * @rmtoll DR           DR            LL_SPI_DMA_GetRegAddr
  * @param  SPIx SPI Instance
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_SPI_DMA_GetRegAddr(SPI_TypeDef *SPIx)
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  return (uint32_t) &(SPIx->DR);
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	330c      	adds	r3, #12
}
 800021c:	4618      	mov	r0, r3
 800021e:	370c      	adds	r7, #12
 8000220:	46bd      	mov	sp, r7
 8000222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000226:	4770      	bx	lr

08000228 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000228:	b480      	push	{r7}
 800022a:	b083      	sub	sp, #12
 800022c:	af00      	add	r7, sp, #0
 800022e:	6078      	str	r0, [r7, #4]
 8000230:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	683a      	ldr	r2, [r7, #0]
 8000236:	619a      	str	r2, [r3, #24]
}
 8000238:	bf00      	nop
 800023a:	370c      	adds	r7, #12
 800023c:	46bd      	mov	sp, r7
 800023e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000242:	4770      	bx	lr

08000244 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000244:	b480      	push	{r7}
 8000246:	b083      	sub	sp, #12
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
 800024c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	683a      	ldr	r2, [r7, #0]
 8000252:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000254:	bf00      	nop
 8000256:	370c      	adds	r7, #12
 8000258:	46bd      	mov	sp, r7
 800025a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025e:	4770      	bx	lr

08000260 <ADC_Init>:
ADS131M08 *ads131m08;

// Function used to perform ADC initialization. Performs two SPI read operations
// that are necessary to synchronize DRDY pin and allocates memory for the samples.
// This function can also be used to perform initial ADC configuration if necessary.
void ADC_Init(ADS131M08 *adc_struct, SPI_TypeDef *SPIx, DMA_TypeDef *DMAx) {
 8000260:	b580      	push	{r7, lr}
 8000262:	b084      	sub	sp, #16
 8000264:	af00      	add	r7, sp, #0
 8000266:	60f8      	str	r0, [r7, #12]
 8000268:	60b9      	str	r1, [r7, #8]
 800026a:	607a      	str	r2, [r7, #4]
	// insert memory allocation here
	static uint8_t samples_array[NUM_SAMPLES * BYTES_PER_SAMPLE];
	samples = samples_array;
 800026c:	4b0d      	ldr	r3, [pc, #52]	; (80002a4 <ADC_Init+0x44>)
 800026e:	4a0e      	ldr	r2, [pc, #56]	; (80002a8 <ADC_Init+0x48>)
 8000270:	601a      	str	r2, [r3, #0]

	adc_struct->SPIx = SPIx;
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	68ba      	ldr	r2, [r7, #8]
 8000276:	601a      	str	r2, [r3, #0]
	adc_struct->DMAx = DMAx;
 8000278:	68fb      	ldr	r3, [r7, #12]
 800027a:	687a      	ldr	r2, [r7, #4]
 800027c:	605a      	str	r2, [r3, #4]
	adc_struct->num_samples = NUM_SAMPLES;
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000284:	811a      	strh	r2, [r3, #8]

	ads131m08 = adc_struct;
 8000286:	4a09      	ldr	r2, [pc, #36]	; (80002ac <ADC_Init+0x4c>)
 8000288:	68fb      	ldr	r3, [r7, #12]
 800028a:	6013      	str	r3, [r2, #0]
	ADC_first_read(SPIx);
 800028c:	68b8      	ldr	r0, [r7, #8]
 800028e:	f000 f811 	bl	80002b4 <ADC_first_read>
	ADC_DMA_init();
 8000292:	f000 f881 	bl	8000398 <ADC_DMA_init>
	drdy_it_initialized = 1;
 8000296:	4b06      	ldr	r3, [pc, #24]	; (80002b0 <ADC_Init+0x50>)
 8000298:	2201      	movs	r2, #1
 800029a:	701a      	strb	r2, [r3, #0]
}
 800029c:	bf00      	nop
 800029e:	3710      	adds	r7, #16
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	20000024 	.word	0x20000024
 80002a8:	2000004c 	.word	0x2000004c
 80002ac:	20000048 	.word	0x20000048
 80002b0:	20000022 	.word	0x20000022

080002b4 <ADC_first_read>:

// Perform two sample reads to clear ADC's 2-deep FIFO buffer and ensure predictable
// DRDY pin behavior.
void ADC_first_read(SPI_TypeDef *SPIx) {
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b08c      	sub	sp, #48	; 0x30
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
	uint8_t rx_buffer[30];

	LL_GPIO_ResetOutputPin(ADC_CS_GPIOx, ADC_CS_PIN); // \CS low
 80002bc:	2102      	movs	r1, #2
 80002be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002c2:	f7ff ffbf 	bl	8000244 <LL_GPIO_ResetOutputPin>
	SPI_TransmitReceive(SPIx, 30, dummy_bytes, rx_buffer);
 80002c6:	f107 030c 	add.w	r3, r7, #12
 80002ca:	4a15      	ldr	r2, [pc, #84]	; (8000320 <ADC_first_read+0x6c>)
 80002cc:	211e      	movs	r1, #30
 80002ce:	6878      	ldr	r0, [r7, #4]
 80002d0:	f001 fa8e 	bl	80017f0 <SPI_TransmitReceive>
	LL_GPIO_SetOutputPin(ADC_CS_GPIOx, ADC_CS_PIN); // \CS high
 80002d4:	2102      	movs	r1, #2
 80002d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002da:	f7ff ffa5 	bl	8000228 <LL_GPIO_SetOutputPin>

	for(int i = 0; i < 100; i++); // TODO: write a delay function to replace this
 80002de:	2300      	movs	r3, #0
 80002e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80002e2:	e002      	b.n	80002ea <ADC_first_read+0x36>
 80002e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80002e6:	3301      	adds	r3, #1
 80002e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80002ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80002ec:	2b63      	cmp	r3, #99	; 0x63
 80002ee:	ddf9      	ble.n	80002e4 <ADC_first_read+0x30>

	LL_GPIO_ResetOutputPin(ADC_CS_GPIOx, ADC_CS_PIN); // \CS low
 80002f0:	2102      	movs	r1, #2
 80002f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002f6:	f7ff ffa5 	bl	8000244 <LL_GPIO_ResetOutputPin>
	SPI_TransmitReceive(SPIx, 30, dummy_bytes, rx_buffer);
 80002fa:	f107 030c 	add.w	r3, r7, #12
 80002fe:	4a08      	ldr	r2, [pc, #32]	; (8000320 <ADC_first_read+0x6c>)
 8000300:	211e      	movs	r1, #30
 8000302:	6878      	ldr	r0, [r7, #4]
 8000304:	f001 fa74 	bl	80017f0 <SPI_TransmitReceive>
	LL_GPIO_SetOutputPin(ADC_CS_GPIOx, ADC_CS_PIN); // \CS high
 8000308:	2102      	movs	r1, #2
 800030a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800030e:	f7ff ff8b 	bl	8000228 <LL_GPIO_SetOutputPin>

	SPI_Disable(SPIx);
 8000312:	6878      	ldr	r0, [r7, #4]
 8000314:	f001 fabb 	bl	800188e <SPI_Disable>
}
 8000318:	bf00      	nop
 800031a:	3730      	adds	r7, #48	; 0x30
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}
 8000320:	20000028 	.word	0x20000028

08000324 <ADC_DRDY_interrupt_handler>:

// Called by DRDY interrupt routine, starts SPI DMA transfer.
void ADC_DRDY_interrupt_handler() {
 8000324:	b598      	push	{r3, r4, r7, lr}
 8000326:	af00      	add	r7, sp, #0
	if (drdy_it_initialized && current_sample_count < NUM_SAMPLES) {
 8000328:	4b17      	ldr	r3, [pc, #92]	; (8000388 <ADC_DRDY_interrupt_handler+0x64>)
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	b2db      	uxtb	r3, r3
 800032e:	2b00      	cmp	r3, #0
 8000330:	d028      	beq.n	8000384 <ADC_DRDY_interrupt_handler+0x60>
 8000332:	4b16      	ldr	r3, [pc, #88]	; (800038c <ADC_DRDY_interrupt_handler+0x68>)
 8000334:	881b      	ldrh	r3, [r3, #0]
 8000336:	b29b      	uxth	r3, r3
 8000338:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800033c:	d222      	bcs.n	8000384 <ADC_DRDY_interrupt_handler+0x60>
		ADC_Set_DMA_Data_Length();
 800033e:	f000 f855 	bl	80003ec <ADC_Set_DMA_Data_Length>
		DMA_Reload_Memory_Address(ads131m08->DMAx, LL_DMA_CHANNEL_1, samples + current_sample_count++ * BYTES_PER_SAMPLE);
 8000342:	4b13      	ldr	r3, [pc, #76]	; (8000390 <ADC_DRDY_interrupt_handler+0x6c>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	6858      	ldr	r0, [r3, #4]
 8000348:	4b12      	ldr	r3, [pc, #72]	; (8000394 <ADC_DRDY_interrupt_handler+0x70>)
 800034a:	681a      	ldr	r2, [r3, #0]
 800034c:	4b0f      	ldr	r3, [pc, #60]	; (800038c <ADC_DRDY_interrupt_handler+0x68>)
 800034e:	881b      	ldrh	r3, [r3, #0]
 8000350:	b29b      	uxth	r3, r3
 8000352:	1c59      	adds	r1, r3, #1
 8000354:	b28c      	uxth	r4, r1
 8000356:	490d      	ldr	r1, [pc, #52]	; (800038c <ADC_DRDY_interrupt_handler+0x68>)
 8000358:	800c      	strh	r4, [r1, #0]
 800035a:	4619      	mov	r1, r3
 800035c:	460b      	mov	r3, r1
 800035e:	011b      	lsls	r3, r3, #4
 8000360:	1a5b      	subs	r3, r3, r1
 8000362:	005b      	lsls	r3, r3, #1
 8000364:	4413      	add	r3, r2
 8000366:	461a      	mov	r2, r3
 8000368:	2100      	movs	r1, #0
 800036a:	f000 fa6d 	bl	8000848 <DMA_Reload_Memory_Address>
		ADC_Enable_SPI_DMA_transfer();
 800036e:	f000 f853 	bl	8000418 <ADC_Enable_SPI_DMA_transfer>

		NVIC_DisableIRQ(ADC_DRDY_IRQn); // Interrupt is re-enabled in DMA transfer complete routine
 8000372:	200a      	movs	r0, #10
 8000374:	f7ff ff28 	bl	80001c8 <__NVIC_DisableIRQ>

		SPI_Start_Transfer(ads131m08->SPIx);
 8000378:	4b05      	ldr	r3, [pc, #20]	; (8000390 <ADC_DRDY_interrupt_handler+0x6c>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	4618      	mov	r0, r3
 8000380:	f001 fa26 	bl	80017d0 <SPI_Start_Transfer>
	}
}
 8000384:	bf00      	nop
 8000386:	bd98      	pop	{r3, r4, r7, pc}
 8000388:	20000022 	.word	0x20000022
 800038c:	20000020 	.word	0x20000020
 8000390:	20000048 	.word	0x20000048
 8000394:	20000024 	.word	0x20000024

08000398 <ADC_DMA_init>:

void ADC_DMA_init() {
 8000398:	b598      	push	{r3, r4, r7, lr}
 800039a:	af00      	add	r7, sp, #0
	DMA_Channel_Init(ads131m08->DMAx, LL_DMA_CHANNEL_1, LL_SPI_DMA_GetRegAddr(ads131m08->SPIx), samples);
 800039c:	4b10      	ldr	r3, [pc, #64]	; (80003e0 <ADC_DMA_init+0x48>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	685c      	ldr	r4, [r3, #4]
 80003a2:	4b0f      	ldr	r3, [pc, #60]	; (80003e0 <ADC_DMA_init+0x48>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	4618      	mov	r0, r3
 80003aa:	f7ff ff31 	bl	8000210 <LL_SPI_DMA_GetRegAddr>
 80003ae:	4602      	mov	r2, r0
 80003b0:	4b0c      	ldr	r3, [pc, #48]	; (80003e4 <ADC_DMA_init+0x4c>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	2100      	movs	r1, #0
 80003b6:	4620      	mov	r0, r4
 80003b8:	f000 fa1d 	bl	80007f6 <DMA_Channel_Init>
	DMA_Channel_Init(ads131m08->DMAx, LL_DMA_CHANNEL_2, LL_SPI_DMA_GetRegAddr(ads131m08->SPIx), dummy_bytes);
 80003bc:	4b08      	ldr	r3, [pc, #32]	; (80003e0 <ADC_DMA_init+0x48>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	685c      	ldr	r4, [r3, #4]
 80003c2:	4b07      	ldr	r3, [pc, #28]	; (80003e0 <ADC_DMA_init+0x48>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	4618      	mov	r0, r3
 80003ca:	f7ff ff21 	bl	8000210 <LL_SPI_DMA_GetRegAddr>
 80003ce:	4602      	mov	r2, r0
 80003d0:	4b05      	ldr	r3, [pc, #20]	; (80003e8 <ADC_DMA_init+0x50>)
 80003d2:	2101      	movs	r1, #1
 80003d4:	4620      	mov	r0, r4
 80003d6:	f000 fa0e 	bl	80007f6 <DMA_Channel_Init>
}
 80003da:	bf00      	nop
 80003dc:	bd98      	pop	{r3, r4, r7, pc}
 80003de:	bf00      	nop
 80003e0:	20000048 	.word	0x20000048
 80003e4:	20000024 	.word	0x20000024
 80003e8:	20000028 	.word	0x20000028

080003ec <ADC_Set_DMA_Data_Length>:

void ADC_Set_DMA_Data_Length() {
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
	DMA_Set_Channel_Data_Length(ads131m08->DMAx, LL_DMA_CHANNEL_1, BYTES_PER_SAMPLE);
 80003f0:	4b08      	ldr	r3, [pc, #32]	; (8000414 <ADC_Set_DMA_Data_Length+0x28>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	685b      	ldr	r3, [r3, #4]
 80003f6:	221e      	movs	r2, #30
 80003f8:	2100      	movs	r1, #0
 80003fa:	4618      	mov	r0, r3
 80003fc:	f000 fa15 	bl	800082a <DMA_Set_Channel_Data_Length>
	DMA_Set_Channel_Data_Length(ads131m08->DMAx, LL_DMA_CHANNEL_2, BYTES_PER_SAMPLE);
 8000400:	4b04      	ldr	r3, [pc, #16]	; (8000414 <ADC_Set_DMA_Data_Length+0x28>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	685b      	ldr	r3, [r3, #4]
 8000406:	221e      	movs	r2, #30
 8000408:	2101      	movs	r1, #1
 800040a:	4618      	mov	r0, r3
 800040c:	f000 fa0d 	bl	800082a <DMA_Set_Channel_Data_Length>
}
 8000410:	bf00      	nop
 8000412:	bd80      	pop	{r7, pc}
 8000414:	20000048 	.word	0x20000048

08000418 <ADC_Enable_SPI_DMA_transfer>:

void ADC_Enable_SPI_DMA_transfer() {
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0
	SPI_Enable_DMA_Rx_Request(ads131m08->SPIx);
 800041c:	4b0c      	ldr	r3, [pc, #48]	; (8000450 <ADC_Enable_SPI_DMA_transfer+0x38>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	4618      	mov	r0, r3
 8000424:	f001 f9b0 	bl	8001788 <SPI_Enable_DMA_Rx_Request>
	DMA_Enable_CH1_CH2(ads131m08->DMAx);
 8000428:	4b09      	ldr	r3, [pc, #36]	; (8000450 <ADC_Enable_SPI_DMA_transfer+0x38>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	685b      	ldr	r3, [r3, #4]
 800042e:	4618      	mov	r0, r3
 8000430:	f000 fa1a 	bl	8000868 <DMA_Enable_CH1_CH2>
	SPI_Enable_DMA_Tx_Request(ads131m08->SPIx);
 8000434:	4b06      	ldr	r3, [pc, #24]	; (8000450 <ADC_Enable_SPI_DMA_transfer+0x38>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	4618      	mov	r0, r3
 800043c:	f001 f9af 	bl	800179e <SPI_Enable_DMA_Tx_Request>
	SPI_Enable_RXNE_TXE_Interrupts(ads131m08->SPIx);
 8000440:	4b03      	ldr	r3, [pc, #12]	; (8000450 <ADC_Enable_SPI_DMA_transfer+0x38>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	4618      	mov	r0, r3
 8000448:	f001 f9b4 	bl	80017b4 <SPI_Enable_RXNE_TXE_Interrupts>
}
 800044c:	bf00      	nop
 800044e:	bd80      	pop	{r7, pc}
 8000450:	20000048 	.word	0x20000048

08000454 <__NVIC_GetPriorityGrouping>:
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000458:	4b04      	ldr	r3, [pc, #16]	; (800046c <__NVIC_GetPriorityGrouping+0x18>)
 800045a:	68db      	ldr	r3, [r3, #12]
 800045c:	0a1b      	lsrs	r3, r3, #8
 800045e:	f003 0307 	and.w	r3, r3, #7
}
 8000462:	4618      	mov	r0, r3
 8000464:	46bd      	mov	sp, r7
 8000466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046a:	4770      	bx	lr
 800046c:	e000ed00 	.word	0xe000ed00

08000470 <__NVIC_EnableIRQ>:
{
 8000470:	b480      	push	{r7}
 8000472:	b083      	sub	sp, #12
 8000474:	af00      	add	r7, sp, #0
 8000476:	4603      	mov	r3, r0
 8000478:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800047a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800047e:	2b00      	cmp	r3, #0
 8000480:	db0b      	blt.n	800049a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000482:	79fb      	ldrb	r3, [r7, #7]
 8000484:	f003 021f 	and.w	r2, r3, #31
 8000488:	4907      	ldr	r1, [pc, #28]	; (80004a8 <__NVIC_EnableIRQ+0x38>)
 800048a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800048e:	095b      	lsrs	r3, r3, #5
 8000490:	2001      	movs	r0, #1
 8000492:	fa00 f202 	lsl.w	r2, r0, r2
 8000496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800049a:	bf00      	nop
 800049c:	370c      	adds	r7, #12
 800049e:	46bd      	mov	sp, r7
 80004a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a4:	4770      	bx	lr
 80004a6:	bf00      	nop
 80004a8:	e000e100 	.word	0xe000e100

080004ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b083      	sub	sp, #12
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	4603      	mov	r3, r0
 80004b4:	6039      	str	r1, [r7, #0]
 80004b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004bc:	2b00      	cmp	r3, #0
 80004be:	db0a      	blt.n	80004d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004c0:	683b      	ldr	r3, [r7, #0]
 80004c2:	b2da      	uxtb	r2, r3
 80004c4:	490c      	ldr	r1, [pc, #48]	; (80004f8 <__NVIC_SetPriority+0x4c>)
 80004c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004ca:	0112      	lsls	r2, r2, #4
 80004cc:	b2d2      	uxtb	r2, r2
 80004ce:	440b      	add	r3, r1
 80004d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80004d4:	e00a      	b.n	80004ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	b2da      	uxtb	r2, r3
 80004da:	4908      	ldr	r1, [pc, #32]	; (80004fc <__NVIC_SetPriority+0x50>)
 80004dc:	79fb      	ldrb	r3, [r7, #7]
 80004de:	f003 030f 	and.w	r3, r3, #15
 80004e2:	3b04      	subs	r3, #4
 80004e4:	0112      	lsls	r2, r2, #4
 80004e6:	b2d2      	uxtb	r2, r2
 80004e8:	440b      	add	r3, r1
 80004ea:	761a      	strb	r2, [r3, #24]
}
 80004ec:	bf00      	nop
 80004ee:	370c      	adds	r7, #12
 80004f0:	46bd      	mov	sp, r7
 80004f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f6:	4770      	bx	lr
 80004f8:	e000e100 	.word	0xe000e100
 80004fc:	e000ed00 	.word	0xe000ed00

08000500 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000500:	b480      	push	{r7}
 8000502:	b089      	sub	sp, #36	; 0x24
 8000504:	af00      	add	r7, sp, #0
 8000506:	60f8      	str	r0, [r7, #12]
 8000508:	60b9      	str	r1, [r7, #8]
 800050a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	f003 0307 	and.w	r3, r3, #7
 8000512:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000514:	69fb      	ldr	r3, [r7, #28]
 8000516:	f1c3 0307 	rsb	r3, r3, #7
 800051a:	2b04      	cmp	r3, #4
 800051c:	bf28      	it	cs
 800051e:	2304      	movcs	r3, #4
 8000520:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000522:	69fb      	ldr	r3, [r7, #28]
 8000524:	3304      	adds	r3, #4
 8000526:	2b06      	cmp	r3, #6
 8000528:	d902      	bls.n	8000530 <NVIC_EncodePriority+0x30>
 800052a:	69fb      	ldr	r3, [r7, #28]
 800052c:	3b03      	subs	r3, #3
 800052e:	e000      	b.n	8000532 <NVIC_EncodePriority+0x32>
 8000530:	2300      	movs	r3, #0
 8000532:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000534:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000538:	69bb      	ldr	r3, [r7, #24]
 800053a:	fa02 f303 	lsl.w	r3, r2, r3
 800053e:	43da      	mvns	r2, r3
 8000540:	68bb      	ldr	r3, [r7, #8]
 8000542:	401a      	ands	r2, r3
 8000544:	697b      	ldr	r3, [r7, #20]
 8000546:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000548:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800054c:	697b      	ldr	r3, [r7, #20]
 800054e:	fa01 f303 	lsl.w	r3, r1, r3
 8000552:	43d9      	mvns	r1, r3
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000558:	4313      	orrs	r3, r2
         );
}
 800055a:	4618      	mov	r0, r3
 800055c:	3724      	adds	r7, #36	; 0x24
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
	...

08000568 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000568:	b480      	push	{r7}
 800056a:	b085      	sub	sp, #20
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
 8000570:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8000576:	4a0c      	ldr	r2, [pc, #48]	; (80005a8 <LL_DMA_EnableChannel+0x40>)
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	4413      	add	r3, r2
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	461a      	mov	r2, r3
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	4413      	add	r3, r2
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4908      	ldr	r1, [pc, #32]	; (80005a8 <LL_DMA_EnableChannel+0x40>)
 8000588:	683a      	ldr	r2, [r7, #0]
 800058a:	440a      	add	r2, r1
 800058c:	7812      	ldrb	r2, [r2, #0]
 800058e:	4611      	mov	r1, r2
 8000590:	68fa      	ldr	r2, [r7, #12]
 8000592:	440a      	add	r2, r1
 8000594:	f043 0301 	orr.w	r3, r3, #1
 8000598:	6013      	str	r3, [r2, #0]
}
 800059a:	bf00      	nop
 800059c:	3714      	adds	r7, #20
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	0800268c 	.word	0x0800268c

080005ac <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	60fb      	str	r3, [r7, #12]
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 80005ba:	4a0c      	ldr	r2, [pc, #48]	; (80005ec <LL_DMA_DisableChannel+0x40>)
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	4413      	add	r3, r2
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	461a      	mov	r2, r3
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	4413      	add	r3, r2
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4908      	ldr	r1, [pc, #32]	; (80005ec <LL_DMA_DisableChannel+0x40>)
 80005cc:	683a      	ldr	r2, [r7, #0]
 80005ce:	440a      	add	r2, r1
 80005d0:	7812      	ldrb	r2, [r2, #0]
 80005d2:	4611      	mov	r1, r2
 80005d4:	68fa      	ldr	r2, [r7, #12]
 80005d6:	440a      	add	r2, r1
 80005d8:	f023 0301 	bic.w	r3, r3, #1
 80005dc:	6013      	str	r3, [r2, #0]
}
 80005de:	bf00      	nop
 80005e0:	3714      	adds	r7, #20
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	0800268c 	.word	0x0800268c

080005f0 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b087      	sub	sp, #28
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	60f8      	str	r0, [r7, #12]
 80005f8:	60b9      	str	r1, [r7, #8]
 80005fa:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8000600:	4a0d      	ldr	r2, [pc, #52]	; (8000638 <LL_DMA_SetDataLength+0x48>)
 8000602:	68bb      	ldr	r3, [r7, #8]
 8000604:	4413      	add	r3, r2
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	461a      	mov	r2, r3
 800060a:	697b      	ldr	r3, [r7, #20]
 800060c:	4413      	add	r3, r2
 800060e:	685b      	ldr	r3, [r3, #4]
 8000610:	0c1b      	lsrs	r3, r3, #16
 8000612:	041b      	lsls	r3, r3, #16
 8000614:	4908      	ldr	r1, [pc, #32]	; (8000638 <LL_DMA_SetDataLength+0x48>)
 8000616:	68ba      	ldr	r2, [r7, #8]
 8000618:	440a      	add	r2, r1
 800061a:	7812      	ldrb	r2, [r2, #0]
 800061c:	4611      	mov	r1, r2
 800061e:	697a      	ldr	r2, [r7, #20]
 8000620:	440a      	add	r2, r1
 8000622:	4611      	mov	r1, r2
 8000624:	687a      	ldr	r2, [r7, #4]
 8000626:	4313      	orrs	r3, r2
 8000628:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 800062a:	bf00      	nop
 800062c:	371c      	adds	r7, #28
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	0800268c 	.word	0x0800268c

0800063c <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  MemoryAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAddress)
{
 800063c:	b480      	push	{r7}
 800063e:	b087      	sub	sp, #28
 8000640:	af00      	add	r7, sp, #0
 8000642:	60f8      	str	r0, [r7, #12]
 8000644:	60b9      	str	r1, [r7, #8]
 8000646:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 800064c:	4a07      	ldr	r2, [pc, #28]	; (800066c <LL_DMA_SetMemoryAddress+0x30>)
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	4413      	add	r3, r2
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	461a      	mov	r2, r3
 8000656:	697b      	ldr	r3, [r7, #20]
 8000658:	4413      	add	r3, r2
 800065a:	461a      	mov	r2, r3
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	60d3      	str	r3, [r2, #12]
}
 8000660:	bf00      	nop
 8000662:	371c      	adds	r7, #28
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr
 800066c:	0800268c 	.word	0x0800268c

08000670 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  PeriphAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
 8000670:	b480      	push	{r7}
 8000672:	b087      	sub	sp, #28
 8000674:	af00      	add	r7, sp, #0
 8000676:	60f8      	str	r0, [r7, #12]
 8000678:	60b9      	str	r1, [r7, #8]
 800067a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 8000680:	4a07      	ldr	r2, [pc, #28]	; (80006a0 <LL_DMA_SetPeriphAddress+0x30>)
 8000682:	68bb      	ldr	r3, [r7, #8]
 8000684:	4413      	add	r3, r2
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	461a      	mov	r2, r3
 800068a:	697b      	ldr	r3, [r7, #20]
 800068c:	4413      	add	r3, r2
 800068e:	461a      	mov	r2, r3
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	6093      	str	r3, [r2, #8]
}
 8000694:	bf00      	nop
 8000696:	371c      	adds	r7, #28
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr
 80006a0:	0800268c 	.word	0x0800268c

080006a4 <LL_DMA_ClearFlag_TC1>:
  * @rmtoll IFCR         CTCIF1        LL_DMA_ClearFlag_TC1
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC1(DMA_TypeDef *DMAx)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	2202      	movs	r2, #2
 80006b0:	605a      	str	r2, [r3, #4]
}
 80006b2:	bf00      	nop
 80006b4:	370c      	adds	r7, #12
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr

080006be <LL_DMA_ClearFlag_TC2>:
  * @rmtoll IFCR         CTCIF2        LL_DMA_ClearFlag_TC2
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC2(DMA_TypeDef *DMAx)
{
 80006be:	b480      	push	{r7}
 80006c0:	b083      	sub	sp, #12
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF2);
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	2220      	movs	r2, #32
 80006ca:	605a      	str	r2, [r3, #4]
}
 80006cc:	bf00      	nop
 80006ce:	370c      	adds	r7, #12
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr

080006d8 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80006d8:	b480      	push	{r7}
 80006da:	b085      	sub	sp, #20
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
 80006e0:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;    
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 80006e6:	4a0c      	ldr	r2, [pc, #48]	; (8000718 <LL_DMA_EnableIT_TC+0x40>)
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	4413      	add	r3, r2
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	461a      	mov	r2, r3
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	4413      	add	r3, r2
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4908      	ldr	r1, [pc, #32]	; (8000718 <LL_DMA_EnableIT_TC+0x40>)
 80006f8:	683a      	ldr	r2, [r7, #0]
 80006fa:	440a      	add	r2, r1
 80006fc:	7812      	ldrb	r2, [r2, #0]
 80006fe:	4611      	mov	r1, r2
 8000700:	68fa      	ldr	r2, [r7, #12]
 8000702:	440a      	add	r2, r1
 8000704:	f043 0302 	orr.w	r3, r3, #2
 8000708:	6013      	str	r3, [r2, #0]
}
 800070a:	bf00      	nop
 800070c:	3714      	adds	r7, #20
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	0800268c 	.word	0x0800268c

0800071c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800071c:	b480      	push	{r7}
 800071e:	b085      	sub	sp, #20
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000724:	4b08      	ldr	r3, [pc, #32]	; (8000748 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000726:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000728:	4907      	ldr	r1, [pc, #28]	; (8000748 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	4313      	orrs	r3, r2
 800072e:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000730:	4b05      	ldr	r3, [pc, #20]	; (8000748 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000732:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	4013      	ands	r3, r2
 8000738:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800073a:	68fb      	ldr	r3, [r7, #12]
}
 800073c:	bf00      	nop
 800073e:	3714      	adds	r7, #20
 8000740:	46bd      	mov	sp, r7
 8000742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000746:	4770      	bx	lr
 8000748:	40021000 	.word	0x40021000

0800074c <LL_SPI_DisableDMAReq_RX>:
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_RXDMAEN);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	685b      	ldr	r3, [r3, #4]
 8000758:	f023 0201 	bic.w	r2, r3, #1
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	605a      	str	r2, [r3, #4]
}
 8000760:	bf00      	nop
 8000762:	370c      	adds	r7, #12
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr

0800076c <LL_SPI_DisableDMAReq_TX>:
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXDMAEN);
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	685b      	ldr	r3, [r3, #4]
 8000778:	f023 0202 	bic.w	r2, r3, #2
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	605a      	str	r2, [r3, #4]
}
 8000780:	bf00      	nop
 8000782:	370c      	adds	r7, #12
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr

0800078c <LL_GPIO_SetOutputPin>:
{
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
 8000794:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	683a      	ldr	r2, [r7, #0]
 800079a:	619a      	str	r2, [r3, #24]
}
 800079c:	bf00      	nop
 800079e:	370c      	adds	r7, #12
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr

080007a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 80007ac:	2002      	movs	r0, #2
 80007ae:	f7ff ffb5 	bl	800071c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA2_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80007b2:	f7ff fe4f 	bl	8000454 <__NVIC_GetPriorityGrouping>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2200      	movs	r2, #0
 80007ba:	2100      	movs	r1, #0
 80007bc:	4618      	mov	r0, r3
 80007be:	f7ff fe9f 	bl	8000500 <NVIC_EncodePriority>
 80007c2:	4603      	mov	r3, r0
 80007c4:	4619      	mov	r1, r3
 80007c6:	2038      	movs	r0, #56	; 0x38
 80007c8:	f7ff fe70 	bl	80004ac <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 80007cc:	2038      	movs	r0, #56	; 0x38
 80007ce:	f7ff fe4f 	bl	8000470 <__NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Channel2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80007d2:	f7ff fe3f 	bl	8000454 <__NVIC_GetPriorityGrouping>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2200      	movs	r2, #0
 80007da:	2100      	movs	r1, #0
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff fe8f 	bl	8000500 <NVIC_EncodePriority>
 80007e2:	4603      	mov	r3, r0
 80007e4:	4619      	mov	r1, r3
 80007e6:	2039      	movs	r0, #57	; 0x39
 80007e8:	f7ff fe60 	bl	80004ac <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 80007ec:	2039      	movs	r0, #57	; 0x39
 80007ee:	f7ff fe3f 	bl	8000470 <__NVIC_EnableIRQ>

}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}

080007f6 <DMA_Channel_Init>:

/* USER CODE BEGIN 2 */
void DMA_Channel_Init(DMA_TypeDef *DMAx, uint32_t channel, uint32_t periph_addr, uint8_t *mem_addr) {
 80007f6:	b580      	push	{r7, lr}
 80007f8:	b084      	sub	sp, #16
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	60f8      	str	r0, [r7, #12]
 80007fe:	60b9      	str	r1, [r7, #8]
 8000800:	607a      	str	r2, [r7, #4]
 8000802:	603b      	str	r3, [r7, #0]
	LL_DMA_SetPeriphAddress(DMAx, channel, periph_addr);
 8000804:	687a      	ldr	r2, [r7, #4]
 8000806:	68b9      	ldr	r1, [r7, #8]
 8000808:	68f8      	ldr	r0, [r7, #12]
 800080a:	f7ff ff31 	bl	8000670 <LL_DMA_SetPeriphAddress>
	LL_DMA_SetMemoryAddress(DMAx, channel, (uint32_t) mem_addr);
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	461a      	mov	r2, r3
 8000812:	68b9      	ldr	r1, [r7, #8]
 8000814:	68f8      	ldr	r0, [r7, #12]
 8000816:	f7ff ff11 	bl	800063c <LL_DMA_SetMemoryAddress>
	LL_DMA_EnableIT_TC(DMAx, channel);
 800081a:	68b9      	ldr	r1, [r7, #8]
 800081c:	68f8      	ldr	r0, [r7, #12]
 800081e:	f7ff ff5b 	bl	80006d8 <LL_DMA_EnableIT_TC>
}
 8000822:	bf00      	nop
 8000824:	3710      	adds	r7, #16
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <DMA_Set_Channel_Data_Length>:

void DMA_Set_Channel_Data_Length(DMA_TypeDef *DMAx, uint32_t channel, uint32_t length) {
 800082a:	b580      	push	{r7, lr}
 800082c:	b084      	sub	sp, #16
 800082e:	af00      	add	r7, sp, #0
 8000830:	60f8      	str	r0, [r7, #12]
 8000832:	60b9      	str	r1, [r7, #8]
 8000834:	607a      	str	r2, [r7, #4]
	LL_DMA_SetDataLength(DMAx, channel, length);
 8000836:	687a      	ldr	r2, [r7, #4]
 8000838:	68b9      	ldr	r1, [r7, #8]
 800083a:	68f8      	ldr	r0, [r7, #12]
 800083c:	f7ff fed8 	bl	80005f0 <LL_DMA_SetDataLength>
}
 8000840:	bf00      	nop
 8000842:	3710      	adds	r7, #16
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}

08000848 <DMA_Reload_Memory_Address>:

void DMA_Reload_Memory_Address(DMA_TypeDef *DMAx, uint32_t channel, uint8_t *mem_addr) {
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	60f8      	str	r0, [r7, #12]
 8000850:	60b9      	str	r1, [r7, #8]
 8000852:	607a      	str	r2, [r7, #4]
	LL_DMA_SetMemoryAddress(DMAx, channel, (uint32_t) mem_addr);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	461a      	mov	r2, r3
 8000858:	68b9      	ldr	r1, [r7, #8]
 800085a:	68f8      	ldr	r0, [r7, #12]
 800085c:	f7ff feee 	bl	800063c <LL_DMA_SetMemoryAddress>
}
 8000860:	bf00      	nop
 8000862:	3710      	adds	r7, #16
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}

08000868 <DMA_Enable_CH1_CH2>:

void DMA_Enable_CH1_CH2(DMA_TypeDef *DMAx) {
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
	LL_DMA_EnableChannel(DMAx, LL_DMA_CHANNEL_1);
 8000870:	2100      	movs	r1, #0
 8000872:	6878      	ldr	r0, [r7, #4]
 8000874:	f7ff fe78 	bl	8000568 <LL_DMA_EnableChannel>
	LL_DMA_EnableChannel(DMAx, LL_DMA_CHANNEL_2);
 8000878:	2101      	movs	r1, #1
 800087a:	6878      	ldr	r0, [r7, #4]
 800087c:	f7ff fe74 	bl	8000568 <LL_DMA_EnableChannel>
}
 8000880:	bf00      	nop
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}

08000888 <DMA_Transfer_Complete_RX_interrupt_handler>:

void DMA_Transfer_Complete_RX_interrupt_handler() {
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
	LL_DMA_ClearFlag_TC1(DMA2);
 800088c:	480b      	ldr	r0, [pc, #44]	; (80008bc <DMA_Transfer_Complete_RX_interrupt_handler+0x34>)
 800088e:	f7ff ff09 	bl	80006a4 <LL_DMA_ClearFlag_TC1>
	LL_DMA_DisableChannel(DMA2, LL_DMA_CHANNEL_1);
 8000892:	2100      	movs	r1, #0
 8000894:	4809      	ldr	r0, [pc, #36]	; (80008bc <DMA_Transfer_Complete_RX_interrupt_handler+0x34>)
 8000896:	f7ff fe89 	bl	80005ac <LL_DMA_DisableChannel>

	if (tc == 1) {
 800089a:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <DMA_Transfer_Complete_RX_interrupt_handler+0x38>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	2b01      	cmp	r3, #1
 80008a2:	d106      	bne.n	80008b2 <DMA_Transfer_Complete_RX_interrupt_handler+0x2a>
		DMA_Disable(SB_SPIx);
 80008a4:	4807      	ldr	r0, [pc, #28]	; (80008c4 <DMA_Transfer_Complete_RX_interrupt_handler+0x3c>)
 80008a6:	f000 f82f 	bl	8000908 <DMA_Disable>
		tc = 0;
 80008aa:	4b05      	ldr	r3, [pc, #20]	; (80008c0 <DMA_Transfer_Complete_RX_interrupt_handler+0x38>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	701a      	strb	r2, [r3, #0]
	} else {
		tc = 1;
	}
}
 80008b0:	e002      	b.n	80008b8 <DMA_Transfer_Complete_RX_interrupt_handler+0x30>
		tc = 1;
 80008b2:	4b03      	ldr	r3, [pc, #12]	; (80008c0 <DMA_Transfer_Complete_RX_interrupt_handler+0x38>)
 80008b4:	2201      	movs	r2, #1
 80008b6:	701a      	strb	r2, [r3, #0]
}
 80008b8:	bf00      	nop
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	40020400 	.word	0x40020400
 80008c0:	20003c4c 	.word	0x20003c4c
 80008c4:	40003c00 	.word	0x40003c00

080008c8 <DMA_Transfer_Complete_TX_interrupt_handler>:

void DMA_Transfer_Complete_TX_interrupt_handler() {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
	LL_DMA_ClearFlag_TC2(DMA2);
 80008cc:	480b      	ldr	r0, [pc, #44]	; (80008fc <DMA_Transfer_Complete_TX_interrupt_handler+0x34>)
 80008ce:	f7ff fef6 	bl	80006be <LL_DMA_ClearFlag_TC2>
	LL_DMA_DisableChannel(DMA2, LL_DMA_CHANNEL_2);
 80008d2:	2101      	movs	r1, #1
 80008d4:	4809      	ldr	r0, [pc, #36]	; (80008fc <DMA_Transfer_Complete_TX_interrupt_handler+0x34>)
 80008d6:	f7ff fe69 	bl	80005ac <LL_DMA_DisableChannel>

	if (tc == 1) {
 80008da:	4b09      	ldr	r3, [pc, #36]	; (8000900 <DMA_Transfer_Complete_TX_interrupt_handler+0x38>)
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	d106      	bne.n	80008f2 <DMA_Transfer_Complete_TX_interrupt_handler+0x2a>
		DMA_Disable(SB_SPIx);
 80008e4:	4807      	ldr	r0, [pc, #28]	; (8000904 <DMA_Transfer_Complete_TX_interrupt_handler+0x3c>)
 80008e6:	f000 f80f 	bl	8000908 <DMA_Disable>
		tc = 0;
 80008ea:	4b05      	ldr	r3, [pc, #20]	; (8000900 <DMA_Transfer_Complete_TX_interrupt_handler+0x38>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	701a      	strb	r2, [r3, #0]
	} else {
		tc = 1;
	}
}
 80008f0:	e002      	b.n	80008f8 <DMA_Transfer_Complete_TX_interrupt_handler+0x30>
		tc = 1;
 80008f2:	4b03      	ldr	r3, [pc, #12]	; (8000900 <DMA_Transfer_Complete_TX_interrupt_handler+0x38>)
 80008f4:	2201      	movs	r2, #1
 80008f6:	701a      	strb	r2, [r3, #0]
}
 80008f8:	bf00      	nop
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	40020400 	.word	0x40020400
 8000900:	20003c4c 	.word	0x20003c4c
 8000904:	40003c00 	.word	0x40003c00

08000908 <DMA_Disable>:


void DMA_Disable(SPI_TypeDef *SPIx) {
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
	// SPI Disable procedure
	SPI_Disable(SPIx);
 8000910:	6878      	ldr	r0, [r7, #4]
 8000912:	f000 ffbc 	bl	800188e <SPI_Disable>

	LL_SPI_DisableDMAReq_RX(SPIx);
 8000916:	6878      	ldr	r0, [r7, #4]
 8000918:	f7ff ff18 	bl	800074c <LL_SPI_DisableDMAReq_RX>
	LL_SPI_DisableDMAReq_TX(SPIx);
 800091c:	6878      	ldr	r0, [r7, #4]
 800091e:	f7ff ff25 	bl	800076c <LL_SPI_DisableDMAReq_TX>

	LL_GPIO_SetOutputPin(ADC_CS_GPIOx, ADC_CS_PIN);
 8000922:	2102      	movs	r1, #2
 8000924:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000928:	f7ff ff30 	bl	800078c <LL_GPIO_SetOutputPin>
	NVIC_EnableIRQ(EXTI4_IRQn);
 800092c:	200a      	movs	r0, #10
 800092e:	f7ff fd9f 	bl	8000470 <__NVIC_EnableIRQ>
}
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
	...

0800093c <__NVIC_GetPriorityGrouping>:
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000940:	4b04      	ldr	r3, [pc, #16]	; (8000954 <__NVIC_GetPriorityGrouping+0x18>)
 8000942:	68db      	ldr	r3, [r3, #12]
 8000944:	0a1b      	lsrs	r3, r3, #8
 8000946:	f003 0307 	and.w	r3, r3, #7
}
 800094a:	4618      	mov	r0, r3
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr
 8000954:	e000ed00 	.word	0xe000ed00

08000958 <__NVIC_EnableIRQ>:
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000966:	2b00      	cmp	r3, #0
 8000968:	db0b      	blt.n	8000982 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800096a:	79fb      	ldrb	r3, [r7, #7]
 800096c:	f003 021f 	and.w	r2, r3, #31
 8000970:	4907      	ldr	r1, [pc, #28]	; (8000990 <__NVIC_EnableIRQ+0x38>)
 8000972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000976:	095b      	lsrs	r3, r3, #5
 8000978:	2001      	movs	r0, #1
 800097a:	fa00 f202 	lsl.w	r2, r0, r2
 800097e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000982:	bf00      	nop
 8000984:	370c      	adds	r7, #12
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	e000e100 	.word	0xe000e100

08000994 <__NVIC_SetPriority>:
{
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	4603      	mov	r3, r0
 800099c:	6039      	str	r1, [r7, #0]
 800099e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	db0a      	blt.n	80009be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	b2da      	uxtb	r2, r3
 80009ac:	490c      	ldr	r1, [pc, #48]	; (80009e0 <__NVIC_SetPriority+0x4c>)
 80009ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b2:	0112      	lsls	r2, r2, #4
 80009b4:	b2d2      	uxtb	r2, r2
 80009b6:	440b      	add	r3, r1
 80009b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80009bc:	e00a      	b.n	80009d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	b2da      	uxtb	r2, r3
 80009c2:	4908      	ldr	r1, [pc, #32]	; (80009e4 <__NVIC_SetPriority+0x50>)
 80009c4:	79fb      	ldrb	r3, [r7, #7]
 80009c6:	f003 030f 	and.w	r3, r3, #15
 80009ca:	3b04      	subs	r3, #4
 80009cc:	0112      	lsls	r2, r2, #4
 80009ce:	b2d2      	uxtb	r2, r2
 80009d0:	440b      	add	r3, r1
 80009d2:	761a      	strb	r2, [r3, #24]
}
 80009d4:	bf00      	nop
 80009d6:	370c      	adds	r7, #12
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr
 80009e0:	e000e100 	.word	0xe000e100
 80009e4:	e000ed00 	.word	0xe000ed00

080009e8 <NVIC_EncodePriority>:
{
 80009e8:	b480      	push	{r7}
 80009ea:	b089      	sub	sp, #36	; 0x24
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	60f8      	str	r0, [r7, #12]
 80009f0:	60b9      	str	r1, [r7, #8]
 80009f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	f003 0307 	and.w	r3, r3, #7
 80009fa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009fc:	69fb      	ldr	r3, [r7, #28]
 80009fe:	f1c3 0307 	rsb	r3, r3, #7
 8000a02:	2b04      	cmp	r3, #4
 8000a04:	bf28      	it	cs
 8000a06:	2304      	movcs	r3, #4
 8000a08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a0a:	69fb      	ldr	r3, [r7, #28]
 8000a0c:	3304      	adds	r3, #4
 8000a0e:	2b06      	cmp	r3, #6
 8000a10:	d902      	bls.n	8000a18 <NVIC_EncodePriority+0x30>
 8000a12:	69fb      	ldr	r3, [r7, #28]
 8000a14:	3b03      	subs	r3, #3
 8000a16:	e000      	b.n	8000a1a <NVIC_EncodePriority+0x32>
 8000a18:	2300      	movs	r3, #0
 8000a1a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a20:	69bb      	ldr	r3, [r7, #24]
 8000a22:	fa02 f303 	lsl.w	r3, r2, r3
 8000a26:	43da      	mvns	r2, r3
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	401a      	ands	r2, r3
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	fa01 f303 	lsl.w	r3, r1, r3
 8000a3a:	43d9      	mvns	r1, r3
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a40:	4313      	orrs	r3, r2
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3724      	adds	r7, #36	; 0x24
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
	...

08000a50 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b085      	sub	sp, #20
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000a58:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000a5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a5c:	4907      	ldr	r1, [pc, #28]	; (8000a7c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4313      	orrs	r3, r2
 8000a62:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000a64:	4b05      	ldr	r3, [pc, #20]	; (8000a7c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000a66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	4013      	ands	r3, r2
 8000a6c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a6e:	68fb      	ldr	r3, [r7, #12]
}
 8000a70:	bf00      	nop
 8000a72:	3714      	adds	r7, #20
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr
 8000a7c:	40021000 	.word	0x40021000

08000a80 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b087      	sub	sp, #28
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8000a8a:	4a17      	ldr	r2, [pc, #92]	; (8000ae8 <LL_SYSCFG_SetEXTISource+0x68>)
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	3302      	adds	r3, #2
 8000a92:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	0c1b      	lsrs	r3, r3, #16
 8000a9a:	43db      	mvns	r3, r3
 8000a9c:	ea02 0103 	and.w	r1, r2, r3
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	0c1b      	lsrs	r3, r3, #16
 8000aa4:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000aa6:	693b      	ldr	r3, [r7, #16]
 8000aa8:	fa93 f3a3 	rbit	r3, r3
 8000aac:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d101      	bne.n	8000abc <LL_SYSCFG_SetEXTISource+0x3c>
  {
    return 32U;
 8000ab8:	2320      	movs	r3, #32
 8000aba:	e003      	b.n	8000ac4 <LL_SYSCFG_SetEXTISource+0x44>
  }
  return __builtin_clz(value);
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	fab3 f383 	clz	r3, r3
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	fa03 f202 	lsl.w	r2, r3, r2
 8000acc:	4806      	ldr	r0, [pc, #24]	; (8000ae8 <LL_SYSCFG_SetEXTISource+0x68>)
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	430a      	orrs	r2, r1
 8000ad4:	3302      	adds	r3, #2
 8000ad6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000ada:	bf00      	nop
 8000adc:	371c      	adds	r7, #28
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	40010000 	.word	0x40010000

08000aec <LL_GPIO_SetPinMode>:
{
 8000aec:	b480      	push	{r7}
 8000aee:	b08b      	sub	sp, #44	; 0x2c
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	60b9      	str	r1, [r7, #8]
 8000af6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	fa93 f3a3 	rbit	r3, r3
 8000b06:	613b      	str	r3, [r7, #16]
  return result;
 8000b08:	693b      	ldr	r3, [r7, #16]
 8000b0a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000b0c:	69bb      	ldr	r3, [r7, #24]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d101      	bne.n	8000b16 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8000b12:	2320      	movs	r3, #32
 8000b14:	e003      	b.n	8000b1e <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8000b16:	69bb      	ldr	r3, [r7, #24]
 8000b18:	fab3 f383 	clz	r3, r3
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	005b      	lsls	r3, r3, #1
 8000b20:	2103      	movs	r1, #3
 8000b22:	fa01 f303 	lsl.w	r3, r1, r3
 8000b26:	43db      	mvns	r3, r3
 8000b28:	401a      	ands	r2, r3
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b2e:	6a3b      	ldr	r3, [r7, #32]
 8000b30:	fa93 f3a3 	rbit	r3, r3
 8000b34:	61fb      	str	r3, [r7, #28]
  return result;
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d101      	bne.n	8000b44 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8000b40:	2320      	movs	r3, #32
 8000b42:	e003      	b.n	8000b4c <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b46:	fab3 f383 	clz	r3, r3
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	005b      	lsls	r3, r3, #1
 8000b4e:	6879      	ldr	r1, [r7, #4]
 8000b50:	fa01 f303 	lsl.w	r3, r1, r3
 8000b54:	431a      	orrs	r2, r3
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	601a      	str	r2, [r3, #0]
}
 8000b5a:	bf00      	nop
 8000b5c:	372c      	adds	r7, #44	; 0x2c
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr

08000b66 <LL_GPIO_SetPinPull>:
{
 8000b66:	b480      	push	{r7}
 8000b68:	b08b      	sub	sp, #44	; 0x2c
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	60f8      	str	r0, [r7, #12]
 8000b6e:	60b9      	str	r1, [r7, #8]
 8000b70:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	68da      	ldr	r2, [r3, #12]
 8000b76:	68bb      	ldr	r3, [r7, #8]
 8000b78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	fa93 f3a3 	rbit	r3, r3
 8000b80:	613b      	str	r3, [r7, #16]
  return result;
 8000b82:	693b      	ldr	r3, [r7, #16]
 8000b84:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000b86:	69bb      	ldr	r3, [r7, #24]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d101      	bne.n	8000b90 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8000b8c:	2320      	movs	r3, #32
 8000b8e:	e003      	b.n	8000b98 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8000b90:	69bb      	ldr	r3, [r7, #24]
 8000b92:	fab3 f383 	clz	r3, r3
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	005b      	lsls	r3, r3, #1
 8000b9a:	2103      	movs	r1, #3
 8000b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba0:	43db      	mvns	r3, r3
 8000ba2:	401a      	ands	r2, r3
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ba8:	6a3b      	ldr	r3, [r7, #32]
 8000baa:	fa93 f3a3 	rbit	r3, r3
 8000bae:	61fb      	str	r3, [r7, #28]
  return result;
 8000bb0:	69fb      	ldr	r3, [r7, #28]
 8000bb2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d101      	bne.n	8000bbe <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8000bba:	2320      	movs	r3, #32
 8000bbc:	e003      	b.n	8000bc6 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8000bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc0:	fab3 f383 	clz	r3, r3
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	005b      	lsls	r3, r3, #1
 8000bc8:	6879      	ldr	r1, [r7, #4]
 8000bca:	fa01 f303 	lsl.w	r3, r1, r3
 8000bce:	431a      	orrs	r2, r3
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	60da      	str	r2, [r3, #12]
}
 8000bd4:	bf00      	nop
 8000bd6:	372c      	adds	r7, #44	; 0x2c
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <LL_GPIO_SetOutputPin>:
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	683a      	ldr	r2, [r7, #0]
 8000bee:	619a      	str	r2, [r3, #24]
}
 8000bf0:	bf00      	nop
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08a      	sub	sp, #40	; 0x28
 8000c00:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000c02:	f107 031c 	add.w	r3, r7, #28
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	605a      	str	r2, [r3, #4]
 8000c0c:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0e:	1d3b      	adds	r3, r7, #4
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	611a      	str	r2, [r3, #16]
 8000c1c:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000c1e:	2001      	movs	r0, #1
 8000c20:	f7ff ff16 	bl	8000a50 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000c24:	2004      	movs	r0, #4
 8000c26:	f7ff ff13 	bl	8000a50 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3);
 8000c2a:	210e      	movs	r1, #14
 8000c2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c30:	f7ff ffd6 	bl	8000be0 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_9);
 8000c34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c38:	482b      	ldr	r0, [pc, #172]	; (8000ce8 <MX_GPIO_Init+0xec>)
 8000c3a:	f7ff ffd1 	bl	8000be0 <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8000c3e:	230e      	movs	r3, #14
 8000c40:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000c42:	2301      	movs	r3, #1
 8000c44:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000c46:	2300      	movs	r3, #0
 8000c48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c52:	1d3b      	adds	r3, r7, #4
 8000c54:	4619      	mov	r1, r3
 8000c56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c5a:	f001 fadd 	bl	8002218 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8000c5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c62:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000c64:	2301      	movs	r3, #1
 8000c66:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c70:	2300      	movs	r3, #0
 8000c72:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c74:	1d3b      	adds	r3, r7, #4
 8000c76:	4619      	mov	r1, r3
 8000c78:	481b      	ldr	r0, [pc, #108]	; (8000ce8 <MX_GPIO_Init+0xec>)
 8000c7a:	f001 facd 	bl	8002218 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE4);
 8000c7e:	491b      	ldr	r1, [pc, #108]	; (8000cec <MX_GPIO_Init+0xf0>)
 8000c80:	2002      	movs	r0, #2
 8000c82:	f7ff fefd 	bl	8000a80 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_4;
 8000c86:	2310      	movs	r3, #16
 8000c88:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000c94:	2300      	movs	r3, #0
 8000c96:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000ca0:	f107 031c 	add.w	r3, r7, #28
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f001 f875 	bl	8001d94 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(GPIOC, LL_GPIO_PIN_4, LL_GPIO_PULL_NO);
 8000caa:	2200      	movs	r2, #0
 8000cac:	2110      	movs	r1, #16
 8000cae:	480e      	ldr	r0, [pc, #56]	; (8000ce8 <MX_GPIO_Init+0xec>)
 8000cb0:	f7ff ff59 	bl	8000b66 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_4, LL_GPIO_MODE_INPUT);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	2110      	movs	r1, #16
 8000cb8:	480b      	ldr	r0, [pc, #44]	; (8000ce8 <MX_GPIO_Init+0xec>)
 8000cba:	f7ff ff17 	bl	8000aec <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000cbe:	f7ff fe3d 	bl	800093c <__NVIC_GetPriorityGrouping>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff fe8d 	bl	80009e8 <NVIC_EncodePriority>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	200a      	movs	r0, #10
 8000cd4:	f7ff fe5e 	bl	8000994 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI4_IRQn);
 8000cd8:	200a      	movs	r0, #10
 8000cda:	f7ff fe3d 	bl	8000958 <__NVIC_EnableIRQ>

}
 8000cde:	bf00      	nop
 8000ce0:	3728      	adds	r7, #40	; 0x28
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	48000800 	.word	0x48000800
 8000cec:	000f0001 	.word	0x000f0001

08000cf0 <__NVIC_SetPriorityGrouping>:
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b085      	sub	sp, #20
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	f003 0307 	and.w	r3, r3, #7
 8000cfe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d00:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <__NVIC_SetPriorityGrouping+0x44>)
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d06:	68ba      	ldr	r2, [r7, #8]
 8000d08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d22:	4a04      	ldr	r2, [pc, #16]	; (8000d34 <__NVIC_SetPriorityGrouping+0x44>)
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	60d3      	str	r3, [r2, #12]
}
 8000d28:	bf00      	nop
 8000d2a:	3714      	adds	r7, #20
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <__NVIC_GetPriorityGrouping>:
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d3c:	4b04      	ldr	r3, [pc, #16]	; (8000d50 <__NVIC_GetPriorityGrouping+0x18>)
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	0a1b      	lsrs	r3, r3, #8
 8000d42:	f003 0307 	and.w	r3, r3, #7
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <__NVIC_EnableIRQ>:
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	db0b      	blt.n	8000d7e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d66:	79fb      	ldrb	r3, [r7, #7]
 8000d68:	f003 021f 	and.w	r2, r3, #31
 8000d6c:	4907      	ldr	r1, [pc, #28]	; (8000d8c <__NVIC_EnableIRQ+0x38>)
 8000d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d72:	095b      	lsrs	r3, r3, #5
 8000d74:	2001      	movs	r0, #1
 8000d76:	fa00 f202 	lsl.w	r2, r0, r2
 8000d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000d7e:	bf00      	nop
 8000d80:	370c      	adds	r7, #12
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	e000e100 	.word	0xe000e100

08000d90 <__NVIC_DisableIRQ>:
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	db12      	blt.n	8000dc8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	f003 021f 	and.w	r2, r3, #31
 8000da8:	490a      	ldr	r1, [pc, #40]	; (8000dd4 <__NVIC_DisableIRQ+0x44>)
 8000daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dae:	095b      	lsrs	r3, r3, #5
 8000db0:	2001      	movs	r0, #1
 8000db2:	fa00 f202 	lsl.w	r2, r0, r2
 8000db6:	3320      	adds	r3, #32
 8000db8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8000dbc:	f3bf 8f4f 	dsb	sy
}
 8000dc0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000dc2:	f3bf 8f6f 	isb	sy
}
 8000dc6:	bf00      	nop
}
 8000dc8:	bf00      	nop
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	e000e100 	.word	0xe000e100

08000dd8 <__NVIC_SetPriority>:
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	6039      	str	r1, [r7, #0]
 8000de2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	db0a      	blt.n	8000e02 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	b2da      	uxtb	r2, r3
 8000df0:	490c      	ldr	r1, [pc, #48]	; (8000e24 <__NVIC_SetPriority+0x4c>)
 8000df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df6:	0112      	lsls	r2, r2, #4
 8000df8:	b2d2      	uxtb	r2, r2
 8000dfa:	440b      	add	r3, r1
 8000dfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000e00:	e00a      	b.n	8000e18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	b2da      	uxtb	r2, r3
 8000e06:	4908      	ldr	r1, [pc, #32]	; (8000e28 <__NVIC_SetPriority+0x50>)
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	f003 030f 	and.w	r3, r3, #15
 8000e0e:	3b04      	subs	r3, #4
 8000e10:	0112      	lsls	r2, r2, #4
 8000e12:	b2d2      	uxtb	r2, r2
 8000e14:	440b      	add	r3, r1
 8000e16:	761a      	strb	r2, [r3, #24]
}
 8000e18:	bf00      	nop
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	e000e100 	.word	0xe000e100
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <NVIC_EncodePriority>:
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b089      	sub	sp, #36	; 0x24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	60b9      	str	r1, [r7, #8]
 8000e36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	f003 0307 	and.w	r3, r3, #7
 8000e3e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	f1c3 0307 	rsb	r3, r3, #7
 8000e46:	2b04      	cmp	r3, #4
 8000e48:	bf28      	it	cs
 8000e4a:	2304      	movcs	r3, #4
 8000e4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	3304      	adds	r3, #4
 8000e52:	2b06      	cmp	r3, #6
 8000e54:	d902      	bls.n	8000e5c <NVIC_EncodePriority+0x30>
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	3b03      	subs	r3, #3
 8000e5a:	e000      	b.n	8000e5e <NVIC_EncodePriority+0x32>
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e64:	69bb      	ldr	r3, [r7, #24]
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	43da      	mvns	r2, r3
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	401a      	ands	r2, r3
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7e:	43d9      	mvns	r1, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e84:	4313      	orrs	r3, r2
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3724      	adds	r7, #36	; 0x24
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
	...

08000e94 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000e98:	4b05      	ldr	r3, [pc, #20]	; (8000eb0 <LL_RCC_HSI_Enable+0x1c>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a04      	ldr	r2, [pc, #16]	; (8000eb0 <LL_RCC_HSI_Enable+0x1c>)
 8000e9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ea2:	6013      	str	r3, [r2, #0]
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	40021000 	.word	0x40021000

08000eb4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8000eb8:	4b07      	ldr	r3, [pc, #28]	; (8000ed8 <LL_RCC_HSI_IsReady+0x24>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ec0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ec4:	d101      	bne.n	8000eca <LL_RCC_HSI_IsReady+0x16>
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e000      	b.n	8000ecc <LL_RCC_HSI_IsReady+0x18>
 8000eca:	2300      	movs	r3, #0
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	40021000 	.word	0x40021000

08000edc <LL_RCC_HSI_SetCalibTrimming>:
  * @param  Value Between Min_Data = 0 and Max_Data = 31 on STM32L43x/STM32L44x/STM32L47x/STM32L48x or
  *               between Min_Data = 0 and Max_Data = 127 on other devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000ee4:	4b07      	ldr	r3, [pc, #28]	; (8000f04 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	061b      	lsls	r3, r3, #24
 8000ef0:	4904      	ldr	r1, [pc, #16]	; (8000f04 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	604b      	str	r3, [r1, #4]
}
 8000ef6:	bf00      	nop
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	40021000 	.word	0x40021000

08000f08 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000f10:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <LL_RCC_SetSysClkSource+0x24>)
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	f023 0203 	bic.w	r2, r3, #3
 8000f18:	4904      	ldr	r1, [pc, #16]	; (8000f2c <LL_RCC_SetSysClkSource+0x24>)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	608b      	str	r3, [r1, #8]
}
 8000f20:	bf00      	nop
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	40021000 	.word	0x40021000

08000f30 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000f34:	4b04      	ldr	r3, [pc, #16]	; (8000f48 <LL_RCC_GetSysClkSource+0x18>)
 8000f36:	689b      	ldr	r3, [r3, #8]
 8000f38:	f003 030c 	and.w	r3, r3, #12
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	40021000 	.word	0x40021000

08000f4c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000f54:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <LL_RCC_SetAHBPrescaler+0x24>)
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f5c:	4904      	ldr	r1, [pc, #16]	; (8000f70 <LL_RCC_SetAHBPrescaler+0x24>)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	608b      	str	r3, [r1, #8]
}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	40021000 	.word	0x40021000

08000f74 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000f7c:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000f84:	4904      	ldr	r1, [pc, #16]	; (8000f98 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	608b      	str	r3, [r1, #8]
}
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	40021000 	.word	0x40021000

08000f9c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000fa4:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000fa6:	689b      	ldr	r3, [r3, #8]
 8000fa8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000fac:	4904      	ldr	r1, [pc, #16]	; (8000fc0 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	608b      	str	r3, [r1, #8]
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	40021000 	.word	0x40021000

08000fc4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000fcc:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000fce:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000fd0:	4907      	ldr	r1, [pc, #28]	; (8000ff0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000fd8:	4b05      	ldr	r3, [pc, #20]	; (8000ff0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000fda:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
}
 8000fe4:	bf00      	nop
 8000fe6:	3714      	adds	r7, #20
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	40021000 	.word	0x40021000

08000ff4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000ffc:	4b08      	ldr	r3, [pc, #32]	; (8001020 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000ffe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001000:	4907      	ldr	r1, [pc, #28]	; (8001020 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4313      	orrs	r3, r2
 8001006:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001008:	4b05      	ldr	r3, [pc, #20]	; (8001020 <LL_APB2_GRP1_EnableClock+0x2c>)
 800100a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	4013      	ands	r3, r2
 8001010:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001012:	68fb      	ldr	r3, [r7, #12]
}
 8001014:	bf00      	nop
 8001016:	3714      	adds	r7, #20
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	40021000 	.word	0x40021000

08001024 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800102c:	4b06      	ldr	r3, [pc, #24]	; (8001048 <LL_FLASH_SetLatency+0x24>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f023 0207 	bic.w	r2, r3, #7
 8001034:	4904      	ldr	r1, [pc, #16]	; (8001048 <LL_FLASH_SetLatency+0x24>)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4313      	orrs	r3, r2
 800103a:	600b      	str	r3, [r1, #0]
}
 800103c:	bf00      	nop
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	40022000 	.word	0x40022000

0800104c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001050:	4b04      	ldr	r3, [pc, #16]	; (8001064 <LL_FLASH_GetLatency+0x18>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f003 0307 	and.w	r3, r3, #7
}
 8001058:	4618      	mov	r0, r3
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	40022000 	.word	0x40022000

08001068 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001070:	4b06      	ldr	r3, [pc, #24]	; (800108c <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8001078:	4904      	ldr	r1, [pc, #16]	; (800108c <LL_PWR_SetRegulVoltageScaling+0x24>)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4313      	orrs	r3, r2
 800107e:	600b      	str	r3, [r1, #0]
}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	40007000 	.word	0x40007000

08001090 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  NVIC_DisableIRQ(EXTI4_IRQn); // disable DRDY interrupts until setup is completed
 8001096:	200a      	movs	r0, #10
 8001098:	f7ff fe7a 	bl	8000d90 <__NVIC_DisableIRQ>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800109c:	2001      	movs	r0, #1
 800109e:	f7ff ffa9 	bl	8000ff4 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80010a2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80010a6:	f7ff ff8d 	bl	8000fc4 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010aa:	2003      	movs	r0, #3
 80010ac:	f7ff fe20 	bl	8000cf0 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 80010b0:	f7ff fe42 	bl	8000d38 <__NVIC_GetPriorityGrouping>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2200      	movs	r2, #0
 80010b8:	210f      	movs	r1, #15
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff feb6 	bl	8000e2c <NVIC_EncodePriority>
 80010c0:	4603      	mov	r3, r0
 80010c2:	4619      	mov	r1, r3
 80010c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010c8:	f7ff fe86 	bl	8000dd8 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010cc:	f000 f816 	bl	80010fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010d0:	f7ff fd94 	bl	8000bfc <MX_GPIO_Init>
  MX_TIM2_Init();
 80010d4:	f000 fcd2 	bl	8001a7c <MX_TIM2_Init>
  MX_DMA_Init();
 80010d8:	f7ff fb66 	bl	80007a8 <MX_DMA_Init>
  MX_SPI3_Init();
 80010dc:	f000 faaa 	bl	8001634 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  ADS131M08 adc;
  ADC_Init(&adc, SB_SPIx, SB_DMAx);
 80010e0:	463b      	mov	r3, r7
 80010e2:	4a04      	ldr	r2, [pc, #16]	; (80010f4 <main+0x64>)
 80010e4:	4904      	ldr	r1, [pc, #16]	; (80010f8 <main+0x68>)
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff f8ba 	bl	8000260 <ADC_Init>
  NVIC_EnableIRQ(EXTI4_IRQn);
 80010ec:	200a      	movs	r0, #10
 80010ee:	f7ff fe31 	bl	8000d54 <__NVIC_EnableIRQ>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010f2:	e7fe      	b.n	80010f2 <main+0x62>
 80010f4:	40020400 	.word	0x40020400
 80010f8:	40003c00 	.word	0x40003c00

080010fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8001100:	2000      	movs	r0, #0
 8001102:	f7ff ff8f 	bl	8001024 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8001106:	bf00      	nop
 8001108:	f7ff ffa0 	bl	800104c <LL_FLASH_GetLatency>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d1fa      	bne.n	8001108 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8001112:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001116:	f7ff ffa7 	bl	8001068 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_Enable();
 800111a:	f7ff febb 	bl	8000e94 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 800111e:	bf00      	nop
 8001120:	f7ff fec8 	bl	8000eb4 <LL_RCC_HSI_IsReady>
 8001124:	4603      	mov	r3, r0
 8001126:	2b01      	cmp	r3, #1
 8001128:	d1fa      	bne.n	8001120 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 800112a:	2010      	movs	r0, #16
 800112c:	f7ff fed6 	bl	8000edc <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8001130:	2001      	movs	r0, #1
 8001132:	f7ff fee9 	bl	8000f08 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8001136:	bf00      	nop
 8001138:	f7ff fefa 	bl	8000f30 <LL_RCC_GetSysClkSource>
 800113c:	4603      	mov	r3, r0
 800113e:	2b04      	cmp	r3, #4
 8001140:	d1fa      	bne.n	8001138 <SystemClock_Config+0x3c>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001142:	2000      	movs	r0, #0
 8001144:	f7ff ff02 	bl	8000f4c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001148:	2000      	movs	r0, #0
 800114a:	f7ff ff13 	bl	8000f74 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 800114e:	2000      	movs	r0, #0
 8001150:	f7ff ff24 	bl	8000f9c <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick(16000000);
 8001154:	4803      	ldr	r0, [pc, #12]	; (8001164 <SystemClock_Config+0x68>)
 8001156:	f001 fa43 	bl	80025e0 <LL_Init1msTick>

  LL_SetSystemCoreClock(16000000);
 800115a:	4802      	ldr	r0, [pc, #8]	; (8001164 <SystemClock_Config+0x68>)
 800115c:	f001 fa4e 	bl	80025fc <LL_SetSystemCoreClock>
}
 8001160:	bf00      	nop
 8001162:	bd80      	pop	{r7, pc}
 8001164:	00f42400 	.word	0x00f42400

08001168 <LL_DMA_SetDataTransferDirection>:
{
 8001168:	b480      	push	{r7}
 800116a:	b087      	sub	sp, #28
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8001178:	4a0e      	ldr	r2, [pc, #56]	; (80011b4 <LL_DMA_SetDataTransferDirection+0x4c>)
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	4413      	add	r3, r2
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	461a      	mov	r2, r3
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	4413      	add	r3, r2
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800118c:	f023 0310 	bic.w	r3, r3, #16
 8001190:	4908      	ldr	r1, [pc, #32]	; (80011b4 <LL_DMA_SetDataTransferDirection+0x4c>)
 8001192:	68ba      	ldr	r2, [r7, #8]
 8001194:	440a      	add	r2, r1
 8001196:	7812      	ldrb	r2, [r2, #0]
 8001198:	4611      	mov	r1, r2
 800119a:	697a      	ldr	r2, [r7, #20]
 800119c:	440a      	add	r2, r1
 800119e:	4611      	mov	r1, r2
 80011a0:	687a      	ldr	r2, [r7, #4]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	600b      	str	r3, [r1, #0]
}
 80011a6:	bf00      	nop
 80011a8:	371c      	adds	r7, #28
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	08002694 	.word	0x08002694

080011b8 <LL_DMA_SetMode>:
{
 80011b8:	b480      	push	{r7}
 80011ba:	b087      	sub	sp, #28
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 80011c8:	4a0d      	ldr	r2, [pc, #52]	; (8001200 <LL_DMA_SetMode+0x48>)
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	4413      	add	r3, r2
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	461a      	mov	r2, r3
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	4413      	add	r3, r2
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f023 0220 	bic.w	r2, r3, #32
 80011dc:	4908      	ldr	r1, [pc, #32]	; (8001200 <LL_DMA_SetMode+0x48>)
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	440b      	add	r3, r1
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	4619      	mov	r1, r3
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	440b      	add	r3, r1
 80011ea:	4619      	mov	r1, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	600b      	str	r3, [r1, #0]
}
 80011f2:	bf00      	nop
 80011f4:	371c      	adds	r7, #28
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	08002694 	.word	0x08002694

08001204 <LL_DMA_SetPeriphIncMode>:
{
 8001204:	b480      	push	{r7}
 8001206:	b087      	sub	sp, #28
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	607a      	str	r2, [r7, #4]
    uint32_t dma_base_addr = (uint32_t)DMAx;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	617b      	str	r3, [r7, #20]
    MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 8001214:	4a0d      	ldr	r2, [pc, #52]	; (800124c <LL_DMA_SetPeriphIncMode+0x48>)
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	4413      	add	r3, r2
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	461a      	mov	r2, r3
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	4413      	add	r3, r2
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001228:	4908      	ldr	r1, [pc, #32]	; (800124c <LL_DMA_SetPeriphIncMode+0x48>)
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	440b      	add	r3, r1
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	4619      	mov	r1, r3
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	440b      	add	r3, r1
 8001236:	4619      	mov	r1, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4313      	orrs	r3, r2
 800123c:	600b      	str	r3, [r1, #0]
}
 800123e:	bf00      	nop
 8001240:	371c      	adds	r7, #28
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	08002694 	.word	0x08002694

08001250 <LL_DMA_SetMemoryIncMode>:
{
 8001250:	b480      	push	{r7}
 8001252:	b087      	sub	sp, #28
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 8001260:	4a0d      	ldr	r2, [pc, #52]	; (8001298 <LL_DMA_SetMemoryIncMode+0x48>)
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	4413      	add	r3, r2
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	461a      	mov	r2, r3
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	4413      	add	r3, r2
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001274:	4908      	ldr	r1, [pc, #32]	; (8001298 <LL_DMA_SetMemoryIncMode+0x48>)
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	440b      	add	r3, r1
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	4619      	mov	r1, r3
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	440b      	add	r3, r1
 8001282:	4619      	mov	r1, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4313      	orrs	r3, r2
 8001288:	600b      	str	r3, [r1, #0]
}
 800128a:	bf00      	nop
 800128c:	371c      	adds	r7, #28
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	08002694 	.word	0x08002694

0800129c <LL_DMA_SetPeriphSize>:
{
 800129c:	b480      	push	{r7}
 800129e:	b087      	sub	sp, #28
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	60b9      	str	r1, [r7, #8]
 80012a6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE, 
 80012ac:	4a0d      	ldr	r2, [pc, #52]	; (80012e4 <LL_DMA_SetPeriphSize+0x48>)
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	4413      	add	r3, r2
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	461a      	mov	r2, r3
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	4413      	add	r3, r2
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80012c0:	4908      	ldr	r1, [pc, #32]	; (80012e4 <LL_DMA_SetPeriphSize+0x48>)
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	440b      	add	r3, r1
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	4619      	mov	r1, r3
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	440b      	add	r3, r1
 80012ce:	4619      	mov	r1, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	600b      	str	r3, [r1, #0]
}
 80012d6:	bf00      	nop
 80012d8:	371c      	adds	r7, #28
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	08002694 	.word	0x08002694

080012e8 <LL_DMA_SetMemorySize>:
{
 80012e8:	b480      	push	{r7}
 80012ea:	b087      	sub	sp, #28
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 80012f8:	4a0d      	ldr	r2, [pc, #52]	; (8001330 <LL_DMA_SetMemorySize+0x48>)
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	4413      	add	r3, r2
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	461a      	mov	r2, r3
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	4413      	add	r3, r2
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800130c:	4908      	ldr	r1, [pc, #32]	; (8001330 <LL_DMA_SetMemorySize+0x48>)
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	440b      	add	r3, r1
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	4619      	mov	r1, r3
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	440b      	add	r3, r1
 800131a:	4619      	mov	r1, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4313      	orrs	r3, r2
 8001320:	600b      	str	r3, [r1, #0]
}
 8001322:	bf00      	nop
 8001324:	371c      	adds	r7, #28
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	08002694 	.word	0x08002694

08001334 <LL_DMA_SetChannelPriorityLevel>:
{
 8001334:	b480      	push	{r7}
 8001336:	b087      	sub	sp, #28
 8001338:	af00      	add	r7, sp, #0
 800133a:	60f8      	str	r0, [r7, #12]
 800133c:	60b9      	str	r1, [r7, #8]
 800133e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 8001344:	4a0d      	ldr	r2, [pc, #52]	; (800137c <LL_DMA_SetChannelPriorityLevel+0x48>)
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	4413      	add	r3, r2
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	461a      	mov	r2, r3
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	4413      	add	r3, r2
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001358:	4908      	ldr	r1, [pc, #32]	; (800137c <LL_DMA_SetChannelPriorityLevel+0x48>)
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	440b      	add	r3, r1
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	4619      	mov	r1, r3
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	440b      	add	r3, r1
 8001366:	4619      	mov	r1, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	4313      	orrs	r3, r2
 800136c:	600b      	str	r3, [r1, #0]
}
 800136e:	bf00      	nop
 8001370:	371c      	adds	r7, #28
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	08002694 	.word	0x08002694

08001380 <LL_DMA_SetPeriphRequest>:
{
 8001380:	b480      	push	{r7}
 8001382:	b089      	sub	sp, #36	; 0x24
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Request_TypeDef *)((uint32_t)((uint32_t)DMAx + DMA_CSELR_OFFSET)))->CSELR,
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	33a8      	adds	r3, #168	; 0xa8
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	210f      	movs	r1, #15
 8001398:	fa01 f303 	lsl.w	r3, r1, r3
 800139c:	43db      	mvns	r3, r3
 800139e:	401a      	ands	r2, r3
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	210f      	movs	r1, #15
 80013a6:	fa01 f303 	lsl.w	r3, r1, r3
 80013aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	fa93 f3a3 	rbit	r3, r3
 80013b2:	617b      	str	r3, [r7, #20]
  return result;
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d101      	bne.n	80013c2 <LL_DMA_SetPeriphRequest+0x42>
    return 32U;
 80013be:	2320      	movs	r3, #32
 80013c0:	e003      	b.n	80013ca <LL_DMA_SetPeriphRequest+0x4a>
  return __builtin_clz(value);
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	fab3 f383 	clz	r3, r3
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	4619      	mov	r1, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	408b      	lsls	r3, r1
 80013d0:	68f9      	ldr	r1, [r7, #12]
 80013d2:	31a8      	adds	r1, #168	; 0xa8
 80013d4:	4313      	orrs	r3, r2
 80013d6:	600b      	str	r3, [r1, #0]
}
 80013d8:	bf00      	nop
 80013da:	3724      	adds	r7, #36	; 0x24
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <LL_AHB2_GRP1_EnableClock>:
{
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80013ec:	4b08      	ldr	r3, [pc, #32]	; (8001410 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80013ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013f0:	4907      	ldr	r1, [pc, #28]	; (8001410 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80013f8:	4b05      	ldr	r3, [pc, #20]	; (8001410 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80013fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	4013      	ands	r3, r2
 8001400:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001402:	68fb      	ldr	r3, [r7, #12]
}
 8001404:	bf00      	nop
 8001406:	3714      	adds	r7, #20
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	40021000 	.word	0x40021000

08001414 <LL_APB1_GRP1_EnableClock>:
{
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800141c:	4b08      	ldr	r3, [pc, #32]	; (8001440 <LL_APB1_GRP1_EnableClock+0x2c>)
 800141e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001420:	4907      	ldr	r1, [pc, #28]	; (8001440 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4313      	orrs	r3, r2
 8001426:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001428:	4b05      	ldr	r3, [pc, #20]	; (8001440 <LL_APB1_GRP1_EnableClock+0x2c>)
 800142a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	4013      	ands	r3, r2
 8001430:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001432:	68fb      	ldr	r3, [r7, #12]
}
 8001434:	bf00      	nop
 8001436:	3714      	adds	r7, #20
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	40021000 	.word	0x40021000

08001444 <LL_SPI_Enable>:
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	601a      	str	r2, [r3, #0]
}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <LL_SPI_Disable>:
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	601a      	str	r2, [r3, #0]
}
 8001478:	bf00      	nop
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <LL_SPI_SetStandard>:
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f023 0210 	bic.w	r2, r3, #16
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	431a      	orrs	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	605a      	str	r2, [r3, #4]
}
 800149e:	bf00      	nop
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr

080014aa <LL_SPI_DisableNSSPulseMgt>:
{
 80014aa:	b480      	push	{r7}
 80014ac:	b083      	sub	sp, #12
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f023 0208 	bic.w	r2, r3, #8
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	605a      	str	r2, [r3, #4]
}
 80014be:	bf00      	nop
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr

080014ca <LL_SPI_IsActiveFlag_RXNE>:
{
 80014ca:	b480      	push	{r7}
 80014cc:	b083      	sub	sp, #12
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d101      	bne.n	80014e2 <LL_SPI_IsActiveFlag_RXNE+0x18>
 80014de:	2301      	movs	r3, #1
 80014e0:	e000      	b.n	80014e4 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 80014e2:	2300      	movs	r3, #0
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <LL_SPI_IsActiveFlag_TXE>:
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	f003 0302 	and.w	r3, r3, #2
 8001500:	2b02      	cmp	r3, #2
 8001502:	d101      	bne.n	8001508 <LL_SPI_IsActiveFlag_TXE+0x18>
 8001504:	2301      	movs	r3, #1
 8001506:	e000      	b.n	800150a <LL_SPI_IsActiveFlag_TXE+0x1a>
 8001508:	2300      	movs	r3, #0
}
 800150a:	4618      	mov	r0, r3
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr

08001516 <LL_SPI_IsActiveFlag_BSY>:
{
 8001516:	b480      	push	{r7}
 8001518:	b083      	sub	sp, #12
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001526:	2b80      	cmp	r3, #128	; 0x80
 8001528:	d101      	bne.n	800152e <LL_SPI_IsActiveFlag_BSY+0x18>
 800152a:	2301      	movs	r3, #1
 800152c:	e000      	b.n	8001530 <LL_SPI_IsActiveFlag_BSY+0x1a>
 800152e:	2300      	movs	r3, #0
}
 8001530:	4618      	mov	r0, r3
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <LL_SPI_GetTxFIFOLevel>:
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(SPIx->SR, SPI_SR_FTLVL));
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
}
 800154c:	4618      	mov	r0, r3
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <LL_SPI_EnableIT_RXNE>:
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_RXNEIE);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	605a      	str	r2, [r3, #4]
}
 800156c:	bf00      	nop
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <LL_SPI_EnableIT_TXE>:
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	605a      	str	r2, [r3, #4]
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <LL_SPI_EnableDMAReq_RX>:
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_RXDMAEN);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f043 0201 	orr.w	r2, r3, #1
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	605a      	str	r2, [r3, #4]
}
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <LL_SPI_EnableDMAReq_TX>:
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_TXDMAEN);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f043 0202 	orr.w	r2, r3, #2
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	605a      	str	r2, [r3, #4]
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	330c      	adds	r3, #12
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	b2db      	uxtb	r3, r3
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	460b      	mov	r3, r1
 80015fe:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	330c      	adds	r3, #12
 8001604:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	78fa      	ldrb	r2, [r7, #3]
 800160a:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 800160c:	bf00      	nop
 800160e:	3714      	adds	r7, #20
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <LL_GPIO_ResetOutputPin>:
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	683a      	ldr	r2, [r7, #0]
 8001626:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <MX_SPI3_Init>:

/* USER CODE END 0 */

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b090      	sub	sp, #64	; 0x40
 8001638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800163a:	f107 0318 	add.w	r3, r7, #24
 800163e:	2228      	movs	r2, #40	; 0x28
 8001640:	2100      	movs	r1, #0
 8001642:	4618      	mov	r0, r3
 8001644:	f001 f80e 	bl	8002664 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001648:	463b      	mov	r3, r7
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	605a      	str	r2, [r3, #4]
 8001650:	609a      	str	r2, [r3, #8]
 8001652:	60da      	str	r2, [r3, #12]
 8001654:	611a      	str	r2, [r3, #16]
 8001656:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8001658:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800165c:	f7ff feda 	bl	8001414 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8001660:	2004      	movs	r0, #4
 8001662:	f7ff febf 	bl	80013e4 <LL_AHB2_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PC10   ------> SPI3_SCK
  PC11   ------> SPI3_MISO
  PC12   ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 8001666:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800166a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800166c:	2302      	movs	r3, #2
 800166e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001670:	2303      	movs	r3, #3
 8001672:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001674:	2300      	movs	r3, #0
 8001676:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001678:	2300      	movs	r3, #0
 800167a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 800167c:	2306      	movs	r3, #6
 800167e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001680:	463b      	mov	r3, r7
 8001682:	4619      	mov	r1, r3
 8001684:	483d      	ldr	r0, [pc, #244]	; (800177c <MX_SPI3_Init+0x148>)
 8001686:	f000 fdc7 	bl	8002218 <LL_GPIO_Init>

  /* SPI3 DMA Init */

  /* SPI3_RX Init */
  LL_DMA_SetPeriphRequest(DMA2, LL_DMA_CHANNEL_1, LL_DMA_REQUEST_3);
 800168a:	2203      	movs	r2, #3
 800168c:	2100      	movs	r1, #0
 800168e:	483c      	ldr	r0, [pc, #240]	; (8001780 <MX_SPI3_Init+0x14c>)
 8001690:	f7ff fe76 	bl	8001380 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8001694:	2200      	movs	r2, #0
 8001696:	2100      	movs	r1, #0
 8001698:	4839      	ldr	r0, [pc, #228]	; (8001780 <MX_SPI3_Init+0x14c>)
 800169a:	f7ff fd65 	bl	8001168 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA2, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_LOW);
 800169e:	2200      	movs	r2, #0
 80016a0:	2100      	movs	r1, #0
 80016a2:	4837      	ldr	r0, [pc, #220]	; (8001780 <MX_SPI3_Init+0x14c>)
 80016a4:	f7ff fe46 	bl	8001334 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_CHANNEL_1, LL_DMA_MODE_NORMAL);
 80016a8:	2200      	movs	r2, #0
 80016aa:	2100      	movs	r1, #0
 80016ac:	4834      	ldr	r0, [pc, #208]	; (8001780 <MX_SPI3_Init+0x14c>)
 80016ae:	f7ff fd83 	bl	80011b8 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 80016b2:	2200      	movs	r2, #0
 80016b4:	2100      	movs	r1, #0
 80016b6:	4832      	ldr	r0, [pc, #200]	; (8001780 <MX_SPI3_Init+0x14c>)
 80016b8:	f7ff fda4 	bl	8001204 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 80016bc:	2280      	movs	r2, #128	; 0x80
 80016be:	2100      	movs	r1, #0
 80016c0:	482f      	ldr	r0, [pc, #188]	; (8001780 <MX_SPI3_Init+0x14c>)
 80016c2:	f7ff fdc5 	bl	8001250 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_BYTE);
 80016c6:	2200      	movs	r2, #0
 80016c8:	2100      	movs	r1, #0
 80016ca:	482d      	ldr	r0, [pc, #180]	; (8001780 <MX_SPI3_Init+0x14c>)
 80016cc:	f7ff fde6 	bl	800129c <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_BYTE);
 80016d0:	2200      	movs	r2, #0
 80016d2:	2100      	movs	r1, #0
 80016d4:	482a      	ldr	r0, [pc, #168]	; (8001780 <MX_SPI3_Init+0x14c>)
 80016d6:	f7ff fe07 	bl	80012e8 <LL_DMA_SetMemorySize>

  /* SPI3_TX Init */
  LL_DMA_SetPeriphRequest(DMA2, LL_DMA_CHANNEL_2, LL_DMA_REQUEST_3);
 80016da:	2203      	movs	r2, #3
 80016dc:	2101      	movs	r1, #1
 80016de:	4828      	ldr	r0, [pc, #160]	; (8001780 <MX_SPI3_Init+0x14c>)
 80016e0:	f7ff fe4e 	bl	8001380 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_CHANNEL_2, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80016e4:	2210      	movs	r2, #16
 80016e6:	2101      	movs	r1, #1
 80016e8:	4825      	ldr	r0, [pc, #148]	; (8001780 <MX_SPI3_Init+0x14c>)
 80016ea:	f7ff fd3d 	bl	8001168 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA2, LL_DMA_CHANNEL_2, LL_DMA_PRIORITY_LOW);
 80016ee:	2200      	movs	r2, #0
 80016f0:	2101      	movs	r1, #1
 80016f2:	4823      	ldr	r0, [pc, #140]	; (8001780 <MX_SPI3_Init+0x14c>)
 80016f4:	f7ff fe1e 	bl	8001334 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_CHANNEL_2, LL_DMA_MODE_NORMAL);
 80016f8:	2200      	movs	r2, #0
 80016fa:	2101      	movs	r1, #1
 80016fc:	4820      	ldr	r0, [pc, #128]	; (8001780 <MX_SPI3_Init+0x14c>)
 80016fe:	f7ff fd5b 	bl	80011b8 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_CHANNEL_2, LL_DMA_PERIPH_NOINCREMENT);
 8001702:	2200      	movs	r2, #0
 8001704:	2101      	movs	r1, #1
 8001706:	481e      	ldr	r0, [pc, #120]	; (8001780 <MX_SPI3_Init+0x14c>)
 8001708:	f7ff fd7c 	bl	8001204 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_CHANNEL_2, LL_DMA_MEMORY_INCREMENT);
 800170c:	2280      	movs	r2, #128	; 0x80
 800170e:	2101      	movs	r1, #1
 8001710:	481b      	ldr	r0, [pc, #108]	; (8001780 <MX_SPI3_Init+0x14c>)
 8001712:	f7ff fd9d 	bl	8001250 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_CHANNEL_2, LL_DMA_PDATAALIGN_BYTE);
 8001716:	2200      	movs	r2, #0
 8001718:	2101      	movs	r1, #1
 800171a:	4819      	ldr	r0, [pc, #100]	; (8001780 <MX_SPI3_Init+0x14c>)
 800171c:	f7ff fdbe 	bl	800129c <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_CHANNEL_2, LL_DMA_MDATAALIGN_BYTE);
 8001720:	2200      	movs	r2, #0
 8001722:	2101      	movs	r1, #1
 8001724:	4816      	ldr	r0, [pc, #88]	; (8001780 <MX_SPI3_Init+0x14c>)
 8001726:	f7ff fddf 	bl	80012e8 <LL_DMA_SetMemorySize>

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800172a:	2300      	movs	r3, #0
 800172c:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800172e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001732:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001734:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001738:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800173a:	2302      	movs	r3, #2
 800173c:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 800173e:	2301      	movs	r3, #1
 8001740:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001742:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001746:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV32;
 8001748:	2320      	movs	r3, #32
 800174a:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800174c:	2300      	movs	r3, #0
 800174e:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001750:	2300      	movs	r3, #0
 8001752:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 8001754:	2307      	movs	r3, #7
 8001756:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 8001758:	f107 0318 	add.w	r3, r7, #24
 800175c:	4619      	mov	r1, r3
 800175e:	4809      	ldr	r0, [pc, #36]	; (8001784 <MX_SPI3_Init+0x150>)
 8001760:	f000 fdfe 	bl	8002360 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 8001764:	2100      	movs	r1, #0
 8001766:	4807      	ldr	r0, [pc, #28]	; (8001784 <MX_SPI3_Init+0x150>)
 8001768:	f7ff fe8c 	bl	8001484 <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI3);
 800176c:	4805      	ldr	r0, [pc, #20]	; (8001784 <MX_SPI3_Init+0x150>)
 800176e:	f7ff fe9c 	bl	80014aa <LL_SPI_DisableNSSPulseMgt>
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001772:	bf00      	nop
 8001774:	3740      	adds	r7, #64	; 0x40
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	48000800 	.word	0x48000800
 8001780:	40020400 	.word	0x40020400
 8001784:	40003c00 	.word	0x40003c00

08001788 <SPI_Enable_DMA_Rx_Request>:

/* USER CODE BEGIN 1 */

void SPI_Enable_DMA_Rx_Request(SPI_TypeDef *SPIx) {
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
	LL_SPI_EnableDMAReq_RX(SPIx);
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f7ff ff01 	bl	8001598 <LL_SPI_EnableDMAReq_RX>
}
 8001796:	bf00      	nop
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <SPI_Enable_DMA_Tx_Request>:

void SPI_Enable_DMA_Tx_Request(SPI_TypeDef *SPIx) {
 800179e:	b580      	push	{r7, lr}
 80017a0:	b082      	sub	sp, #8
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
	LL_SPI_EnableDMAReq_TX(SPIx);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f7ff ff06 	bl	80015b8 <LL_SPI_EnableDMAReq_TX>
}
 80017ac:	bf00      	nop
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <SPI_Enable_RXNE_TXE_Interrupts>:

void SPI_Enable_RXNE_TXE_Interrupts(SPI_TypeDef *SPIx) {
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
	LL_SPI_EnableIT_RXNE(SPIx);
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f7ff fecb 	bl	8001558 <LL_SPI_EnableIT_RXNE>
	LL_SPI_EnableIT_TXE(SPIx);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f7ff fed8 	bl	8001578 <LL_SPI_EnableIT_TXE>
}
 80017c8:	bf00      	nop
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <SPI_Start_Transfer>:

void SPI_Start_Transfer(SPI_TypeDef *SPIx) {
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
	LL_GPIO_ResetOutputPin(ADC_CS_GPIOx, ADC_CS_PIN);
 80017d8:	2102      	movs	r1, #2
 80017da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017de:	f7ff ff1b 	bl	8001618 <LL_GPIO_ResetOutputPin>
	LL_SPI_Enable(SPIx);
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f7ff fe2e 	bl	8001444 <LL_SPI_Enable>
}
 80017e8:	bf00      	nop
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <SPI_TransmitReceive>:


void SPI_TransmitReceive(SPI_TypeDef *SPIx, uint8_t len, uint8_t *tx_buffer, uint8_t *rx_buffer) {
 80017f0:	b590      	push	{r4, r7, lr}
 80017f2:	b087      	sub	sp, #28
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	607a      	str	r2, [r7, #4]
 80017fa:	603b      	str	r3, [r7, #0]
 80017fc:	460b      	mov	r3, r1
 80017fe:	72fb      	strb	r3, [r7, #11]
	LL_SPI_Enable(SPIx);
 8001800:	68f8      	ldr	r0, [r7, #12]
 8001802:	f7ff fe1f 	bl	8001444 <LL_SPI_Enable>

	LL_SPI_TransmitData8(SPIx, tx_buffer[0]);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	4619      	mov	r1, r3
 800180c:	68f8      	ldr	r0, [r7, #12]
 800180e:	f7ff fef1 	bl	80015f4 <LL_SPI_TransmitData8>

	for (int i = 0; i < len - 1; i++) {
 8001812:	2300      	movs	r3, #0
 8001814:	617b      	str	r3, [r7, #20]
 8001816:	e021      	b.n	800185c <SPI_TransmitReceive+0x6c>
	  while ( !LL_SPI_IsActiveFlag_TXE(SPIx) ); // wait until TXE is set
 8001818:	bf00      	nop
 800181a:	68f8      	ldr	r0, [r7, #12]
 800181c:	f7ff fe68 	bl	80014f0 <LL_SPI_IsActiveFlag_TXE>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d0f9      	beq.n	800181a <SPI_TransmitReceive+0x2a>
	  LL_SPI_TransmitData8(SPIx, tx_buffer[i + 1]);
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	3301      	adds	r3, #1
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	4413      	add	r3, r2
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	4619      	mov	r1, r3
 8001832:	68f8      	ldr	r0, [r7, #12]
 8001834:	f7ff fede 	bl	80015f4 <LL_SPI_TransmitData8>
	  while ( !LL_SPI_IsActiveFlag_RXNE(SPIx) ); // wait until RXNE is set
 8001838:	bf00      	nop
 800183a:	68f8      	ldr	r0, [r7, #12]
 800183c:	f7ff fe45 	bl	80014ca <LL_SPI_IsActiveFlag_RXNE>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d0f9      	beq.n	800183a <SPI_TransmitReceive+0x4a>
	  rx_buffer[i] = LL_SPI_ReceiveData8(SPIx); // read DR (clears RXNE)
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	683a      	ldr	r2, [r7, #0]
 800184a:	18d4      	adds	r4, r2, r3
 800184c:	68f8      	ldr	r0, [r7, #12]
 800184e:	f7ff fec3 	bl	80015d8 <LL_SPI_ReceiveData8>
 8001852:	4603      	mov	r3, r0
 8001854:	7023      	strb	r3, [r4, #0]
	for (int i = 0; i < len - 1; i++) {
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	3301      	adds	r3, #1
 800185a:	617b      	str	r3, [r7, #20]
 800185c:	7afb      	ldrb	r3, [r7, #11]
 800185e:	3b01      	subs	r3, #1
 8001860:	697a      	ldr	r2, [r7, #20]
 8001862:	429a      	cmp	r2, r3
 8001864:	dbd8      	blt.n	8001818 <SPI_TransmitReceive+0x28>
	}

	while ( !LL_SPI_IsActiveFlag_RXNE(SPIx) ); // wait until RXNE is set
 8001866:	bf00      	nop
 8001868:	68f8      	ldr	r0, [r7, #12]
 800186a:	f7ff fe2e 	bl	80014ca <LL_SPI_IsActiveFlag_RXNE>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d0f9      	beq.n	8001868 <SPI_TransmitReceive+0x78>
	rx_buffer[len - 1] = LL_SPI_ReceiveData8(SPIx); // read DR (clears RXNE)
 8001874:	7afb      	ldrb	r3, [r7, #11]
 8001876:	3b01      	subs	r3, #1
 8001878:	683a      	ldr	r2, [r7, #0]
 800187a:	18d4      	adds	r4, r2, r3
 800187c:	68f8      	ldr	r0, [r7, #12]
 800187e:	f7ff feab 	bl	80015d8 <LL_SPI_ReceiveData8>
 8001882:	4603      	mov	r3, r0
 8001884:	7023      	strb	r3, [r4, #0]
}
 8001886:	bf00      	nop
 8001888:	371c      	adds	r7, #28
 800188a:	46bd      	mov	sp, r7
 800188c:	bd90      	pop	{r4, r7, pc}

0800188e <SPI_Disable>:

void SPI_Disable(SPI_TypeDef *SPIx) {
 800188e:	b580      	push	{r7, lr}
 8001890:	b082      	sub	sp, #8
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
	while (LL_SPI_GetTxFIFOLevel(SPIx) != LL_SPI_TX_FIFO_EMPTY); // wait for TX FIFO to become empty
 8001896:	bf00      	nop
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f7ff fe4f 	bl	800153c <LL_SPI_GetTxFIFOLevel>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d1f9      	bne.n	8001898 <SPI_Disable+0xa>
	while (LL_SPI_IsActiveFlag_BSY(SPIx)); // wait for BSY flag to go low
 80018a4:	bf00      	nop
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f7ff fe35 	bl	8001516 <LL_SPI_IsActiveFlag_BSY>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d1f9      	bne.n	80018a6 <SPI_Disable+0x18>
	LL_SPI_Disable(SPIx);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f7ff fdd6 	bl	8001464 <LL_SPI_Disable>
}
 80018b8:	bf00      	nop
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 80018c8:	4b07      	ldr	r3, [pc, #28]	; (80018e8 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 80018ca:	695a      	ldr	r2, [r3, #20]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4013      	ands	r3, r2
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d101      	bne.n	80018da <LL_EXTI_IsActiveFlag_0_31+0x1a>
 80018d6:	2301      	movs	r3, #1
 80018d8:	e000      	b.n	80018dc <LL_EXTI_IsActiveFlag_0_31+0x1c>
 80018da:	2300      	movs	r3, #0
}
 80018dc:	4618      	mov	r0, r3
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr
 80018e8:	40010400 	.word	0x40010400

080018ec <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80018f4:	4a04      	ldr	r2, [pc, #16]	; (8001908 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6153      	str	r3, [r2, #20]
}
 80018fa:	bf00      	nop
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	40010400 	.word	0x40010400

0800190c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001910:	e7fe      	b.n	8001910 <NMI_Handler+0x4>

08001912 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001912:	b480      	push	{r7}
 8001914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001916:	e7fe      	b.n	8001916 <HardFault_Handler+0x4>

08001918 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800191c:	e7fe      	b.n	800191c <MemManage_Handler+0x4>

0800191e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800191e:	b480      	push	{r7}
 8001920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001922:	e7fe      	b.n	8001922 <BusFault_Handler+0x4>

08001924 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001928:	e7fe      	b.n	8001928 <UsageFault_Handler+0x4>

0800192a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800192a:	b480      	push	{r7}
 800192c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800192e:	bf00      	nop
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr

08001946 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001946:	b480      	push	{r7}
 8001948:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_4) != RESET)
 8001966:	2010      	movs	r0, #16
 8001968:	f7ff ffaa 	bl	80018c0 <LL_EXTI_IsActiveFlag_0_31>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d004      	beq.n	800197c <EXTI4_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_4);
 8001972:	2010      	movs	r0, #16
 8001974:	f7ff ffba 	bl	80018ec <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_4 */
    ADC_DRDY_interrupt_handler();
 8001978:	f7fe fcd4 	bl	8000324 <ADC_DRDY_interrupt_handler>
    /* USER CODE END LL_EXTI_LINE_4 */
  }
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800197c:	bf00      	nop
 800197e:	bd80      	pop	{r7, pc}

08001980 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */
	DMA_Transfer_Complete_RX_interrupt_handler();
 8001984:	f7fe ff80 	bl	8000888 <DMA_Transfer_Complete_RX_interrupt_handler>
  /* USER CODE END DMA2_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8001988:	bf00      	nop
 800198a:	bd80      	pop	{r7, pc}

0800198c <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */
	DMA_Transfer_Complete_TX_interrupt_handler();
 8001990:	f7fe ff9a 	bl	80008c8 <DMA_Transfer_Complete_TX_interrupt_handler>
  /* USER CODE END DMA2_Channel2_IRQn 0 */

  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8001994:	bf00      	nop
 8001996:	bd80      	pop	{r7, pc}

08001998 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800199c:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <SystemInit+0x20>)
 800199e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019a2:	4a05      	ldr	r2, [pc, #20]	; (80019b8 <SystemInit+0x20>)
 80019a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80019ac:	bf00      	nop
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	e000ed00 	.word	0xe000ed00

080019bc <LL_APB1_GRP1_EnableClock>:
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80019c4:	4b08      	ldr	r3, [pc, #32]	; (80019e8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80019c6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80019c8:	4907      	ldr	r1, [pc, #28]	; (80019e8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80019d0:	4b05      	ldr	r3, [pc, #20]	; (80019e8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80019d2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	4013      	ands	r3, r2
 80019d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019da:	68fb      	ldr	r3, [r7, #12]
}
 80019dc:	bf00      	nop
 80019de:	3714      	adds	r7, #20
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	40021000 	.word	0x40021000

080019ec <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	601a      	str	r2, [r3, #0]
}
 8001a00:	bf00      	nop
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8001a1e:	f023 0307 	bic.w	r3, r3, #7
 8001a22:	683a      	ldr	r2, [r7, #0]
 8001a24:	431a      	orrs	r2, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	609a      	str	r2, [r3, #8]
}
 8001a2a:	bf00      	nop
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr

08001a36 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8001a36:	b480      	push	{r7}
 8001a38:	b083      	sub	sp, #12
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
 8001a3e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	431a      	orrs	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	605a      	str	r2, [r3, #4]
}
 8001a50:	bf00      	nop
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	609a      	str	r2, [r3, #8]
}
 8001a70:	bf00      	nop
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001a82:	1d3b      	adds	r3, r7, #4
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	605a      	str	r2, [r3, #4]
 8001a8a:	609a      	str	r2, [r3, #8]
 8001a8c:	60da      	str	r2, [r3, #12]
 8001a8e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8001a90:	2001      	movs	r0, #1
 8001a92:	f7ff ff93 	bl	80019bc <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8001a96:	2300      	movs	r3, #0
 8001a98:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 16;
 8001a9e:	2310      	movs	r3, #16
 8001aa0:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8001aa6:	1d3b      	adds	r3, r7, #4
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001aae:	f000 fce9 	bl	8002484 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8001ab2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001ab6:	f7ff ff99 	bl	80019ec <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001aba:	2100      	movs	r1, #0
 8001abc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001ac0:	f7ff ffa4 	bl	8001a0c <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001aca:	f7ff ffb4 	bl	8001a36 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8001ace:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001ad2:	f7ff ffc3 	bl	8001a5c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ad6:	bf00      	nop
 8001ad8:	3718      	adds	r7, #24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
	...

08001ae0 <Reset_Handler>:
 8001ae0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b18 <LoopForever+0x2>
 8001ae4:	f7ff ff58 	bl	8001998 <SystemInit>
 8001ae8:	480c      	ldr	r0, [pc, #48]	; (8001b1c <LoopForever+0x6>)
 8001aea:	490d      	ldr	r1, [pc, #52]	; (8001b20 <LoopForever+0xa>)
 8001aec:	4a0d      	ldr	r2, [pc, #52]	; (8001b24 <LoopForever+0xe>)
 8001aee:	2300      	movs	r3, #0
 8001af0:	e002      	b.n	8001af8 <LoopCopyDataInit>

08001af2 <CopyDataInit>:
 8001af2:	58d4      	ldr	r4, [r2, r3]
 8001af4:	50c4      	str	r4, [r0, r3]
 8001af6:	3304      	adds	r3, #4

08001af8 <LoopCopyDataInit>:
 8001af8:	18c4      	adds	r4, r0, r3
 8001afa:	428c      	cmp	r4, r1
 8001afc:	d3f9      	bcc.n	8001af2 <CopyDataInit>
 8001afe:	4a0a      	ldr	r2, [pc, #40]	; (8001b28 <LoopForever+0x12>)
 8001b00:	4c0a      	ldr	r4, [pc, #40]	; (8001b2c <LoopForever+0x16>)
 8001b02:	2300      	movs	r3, #0
 8001b04:	e001      	b.n	8001b0a <LoopFillZerobss>

08001b06 <FillZerobss>:
 8001b06:	6013      	str	r3, [r2, #0]
 8001b08:	3204      	adds	r2, #4

08001b0a <LoopFillZerobss>:
 8001b0a:	42a2      	cmp	r2, r4
 8001b0c:	d3fb      	bcc.n	8001b06 <FillZerobss>
 8001b0e:	f000 fd85 	bl	800261c <__libc_init_array>
 8001b12:	f7ff fabd 	bl	8001090 <main>

08001b16 <LoopForever>:
 8001b16:	e7fe      	b.n	8001b16 <LoopForever>
 8001b18:	20018000 	.word	0x20018000
 8001b1c:	20000000 	.word	0x20000000
 8001b20:	20000004 	.word	0x20000004
 8001b24:	080026a4 	.word	0x080026a4
 8001b28:	20000004 	.word	0x20000004
 8001b2c:	20003c50 	.word	0x20003c50

08001b30 <ADC1_2_IRQHandler>:
 8001b30:	e7fe      	b.n	8001b30 <ADC1_2_IRQHandler>
	...

08001b34 <LL_EXTI_EnableIT_0_31>:
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001b3c:	4b05      	ldr	r3, [pc, #20]	; (8001b54 <LL_EXTI_EnableIT_0_31+0x20>)
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	4904      	ldr	r1, [pc, #16]	; (8001b54 <LL_EXTI_EnableIT_0_31+0x20>)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	600b      	str	r3, [r1, #0]
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	40010400 	.word	0x40010400

08001b58 <LL_EXTI_EnableIT_32_63>:
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001b60:	4b05      	ldr	r3, [pc, #20]	; (8001b78 <LL_EXTI_EnableIT_32_63+0x20>)
 8001b62:	6a1a      	ldr	r2, [r3, #32]
 8001b64:	4904      	ldr	r1, [pc, #16]	; (8001b78 <LL_EXTI_EnableIT_32_63+0x20>)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	620b      	str	r3, [r1, #32]
}
 8001b6c:	bf00      	nop
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	40010400 	.word	0x40010400

08001b7c <LL_EXTI_DisableIT_0_31>:
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8001b84:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <LL_EXTI_DisableIT_0_31+0x24>)
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	43db      	mvns	r3, r3
 8001b8c:	4904      	ldr	r1, [pc, #16]	; (8001ba0 <LL_EXTI_DisableIT_0_31+0x24>)
 8001b8e:	4013      	ands	r3, r2
 8001b90:	600b      	str	r3, [r1, #0]
}
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	40010400 	.word	0x40010400

08001ba4 <LL_EXTI_DisableIT_32_63>:
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8001bac:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <LL_EXTI_DisableIT_32_63+0x24>)
 8001bae:	6a1a      	ldr	r2, [r3, #32]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	4904      	ldr	r1, [pc, #16]	; (8001bc8 <LL_EXTI_DisableIT_32_63+0x24>)
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	620b      	str	r3, [r1, #32]
}
 8001bba:	bf00      	nop
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	40010400 	.word	0x40010400

08001bcc <LL_EXTI_EnableEvent_0_31>:
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8001bd4:	4b05      	ldr	r3, [pc, #20]	; (8001bec <LL_EXTI_EnableEvent_0_31+0x20>)
 8001bd6:	685a      	ldr	r2, [r3, #4]
 8001bd8:	4904      	ldr	r1, [pc, #16]	; (8001bec <LL_EXTI_EnableEvent_0_31+0x20>)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	604b      	str	r3, [r1, #4]
}
 8001be0:	bf00      	nop
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	40010400 	.word	0x40010400

08001bf0 <LL_EXTI_EnableEvent_32_63>:
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8001bf8:	4b05      	ldr	r3, [pc, #20]	; (8001c10 <LL_EXTI_EnableEvent_32_63+0x20>)
 8001bfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bfc:	4904      	ldr	r1, [pc, #16]	; (8001c10 <LL_EXTI_EnableEvent_32_63+0x20>)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr
 8001c10:	40010400 	.word	0x40010400

08001c14 <LL_EXTI_DisableEvent_0_31>:
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8001c1c:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <LL_EXTI_DisableEvent_0_31+0x24>)
 8001c1e:	685a      	ldr	r2, [r3, #4]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	43db      	mvns	r3, r3
 8001c24:	4904      	ldr	r1, [pc, #16]	; (8001c38 <LL_EXTI_DisableEvent_0_31+0x24>)
 8001c26:	4013      	ands	r3, r2
 8001c28:	604b      	str	r3, [r1, #4]
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	40010400 	.word	0x40010400

08001c3c <LL_EXTI_DisableEvent_32_63>:
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8001c44:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <LL_EXTI_DisableEvent_32_63+0x24>)
 8001c46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	43db      	mvns	r3, r3
 8001c4c:	4904      	ldr	r1, [pc, #16]	; (8001c60 <LL_EXTI_DisableEvent_32_63+0x24>)
 8001c4e:	4013      	ands	r3, r2
 8001c50:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001c52:	bf00      	nop
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	40010400 	.word	0x40010400

08001c64 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001c6c:	4b05      	ldr	r3, [pc, #20]	; (8001c84 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	4904      	ldr	r1, [pc, #16]	; (8001c84 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	608b      	str	r3, [r1, #8]
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr
 8001c84:	40010400 	.word	0x40010400

08001c88 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8001c90:	4b05      	ldr	r3, [pc, #20]	; (8001ca8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8001c92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c94:	4904      	ldr	r1, [pc, #16]	; (8001ca8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	628b      	str	r3, [r1, #40]	; 0x28
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	40010400 	.word	0x40010400

08001cac <LL_EXTI_DisableRisingTrig_0_31>:
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8001cb4:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001cb6:	689a      	ldr	r2, [r3, #8]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	4904      	ldr	r1, [pc, #16]	; (8001cd0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	608b      	str	r3, [r1, #8]
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	40010400 	.word	0x40010400

08001cd4 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8001cdc:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8001cde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	4904      	ldr	r1, [pc, #16]	; (8001cf8 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	628b      	str	r3, [r1, #40]	; 0x28
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	40010400 	.word	0x40010400

08001cfc <LL_EXTI_EnableFallingTrig_0_31>:
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8001d04:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001d06:	68da      	ldr	r2, [r3, #12]
 8001d08:	4904      	ldr	r1, [pc, #16]	; (8001d1c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	60cb      	str	r3, [r1, #12]
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	40010400 	.word	0x40010400

08001d20 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8001d28:	4b05      	ldr	r3, [pc, #20]	; (8001d40 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8001d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d2c:	4904      	ldr	r1, [pc, #16]	; (8001d40 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	40010400 	.word	0x40010400

08001d44 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8001d4c:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001d4e:	68da      	ldr	r2, [r3, #12]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	43db      	mvns	r3, r3
 8001d54:	4904      	ldr	r1, [pc, #16]	; (8001d68 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001d56:	4013      	ands	r3, r2
 8001d58:	60cb      	str	r3, [r1, #12]
}
 8001d5a:	bf00      	nop
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	40010400 	.word	0x40010400

08001d6c <LL_EXTI_DisableFallingTrig_32_63>:
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8001d74:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8001d76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	4904      	ldr	r1, [pc, #16]	; (8001d90 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8001d7e:	4013      	ands	r3, r2
 8001d80:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8001d82:	bf00      	nop
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	40010400 	.word	0x40010400

08001d94 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other value : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	7a1b      	ldrb	r3, [r3, #8]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f000 80d1 	beq.w	8001f4c <LL_EXTI_Init+0x1b8>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d063      	beq.n	8001e7a <LL_EXTI_Init+0xe6>
    {
      switch (EXTI_InitStruct->Mode)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	7a5b      	ldrb	r3, [r3, #9]
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d01c      	beq.n	8001df4 <LL_EXTI_Init+0x60>
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	dc25      	bgt.n	8001e0a <LL_EXTI_Init+0x76>
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d002      	beq.n	8001dc8 <LL_EXTI_Init+0x34>
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d00b      	beq.n	8001dde <LL_EXTI_Init+0x4a>
 8001dc6:	e020      	b.n	8001e0a <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff ff21 	bl	8001c14 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7ff feac 	bl	8001b34 <LL_EXTI_EnableIT_0_31>
          break;
 8001ddc:	e018      	b.n	8001e10 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7ff feca 	bl	8001b7c <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff feed 	bl	8001bcc <LL_EXTI_EnableEvent_0_31>
          break;
 8001df2:	e00d      	b.n	8001e10 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff fe9b 	bl	8001b34 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff fee2 	bl	8001bcc <LL_EXTI_EnableEvent_0_31>
          break;
 8001e08:	e002      	b.n	8001e10 <LL_EXTI_Init+0x7c>
        default:
          status = 0x01u;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	60fb      	str	r3, [r7, #12]
          break;
 8001e0e:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	7a9b      	ldrb	r3, [r3, #10]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d030      	beq.n	8001e7a <LL_EXTI_Init+0xe6>
      {
        switch (EXTI_InitStruct->Trigger)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	7a9b      	ldrb	r3, [r3, #10]
 8001e1c:	2b03      	cmp	r3, #3
 8001e1e:	d01c      	beq.n	8001e5a <LL_EXTI_Init+0xc6>
 8001e20:	2b03      	cmp	r3, #3
 8001e22:	dc25      	bgt.n	8001e70 <LL_EXTI_Init+0xdc>
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d002      	beq.n	8001e2e <LL_EXTI_Init+0x9a>
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d00b      	beq.n	8001e44 <LL_EXTI_Init+0xb0>
 8001e2c:	e020      	b.n	8001e70 <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff ff86 	bl	8001d44 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff ff11 	bl	8001c64 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8001e42:	e01b      	b.n	8001e7c <LL_EXTI_Init+0xe8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff ff2f 	bl	8001cac <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7ff ff52 	bl	8001cfc <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001e58:	e010      	b.n	8001e7c <LL_EXTI_Init+0xe8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff ff00 	bl	8001c64 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff ff47 	bl	8001cfc <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001e6e:	e005      	b.n	8001e7c <LL_EXTI_Init+0xe8>
          default:
            status |= 0x02u;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f043 0302 	orr.w	r3, r3, #2
 8001e76:	60fb      	str	r3, [r7, #12]
            break;
 8001e78:	e000      	b.n	8001e7c <LL_EXTI_Init+0xe8>
        }
      }
 8001e7a:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d078      	beq.n	8001f76 <LL_EXTI_Init+0x1e2>
    {
      switch (EXTI_InitStruct->Mode)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	7a5b      	ldrb	r3, [r3, #9]
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d01c      	beq.n	8001ec6 <LL_EXTI_Init+0x132>
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	dc25      	bgt.n	8001edc <LL_EXTI_Init+0x148>
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d002      	beq.n	8001e9a <LL_EXTI_Init+0x106>
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d00b      	beq.n	8001eb0 <LL_EXTI_Init+0x11c>
 8001e98:	e020      	b.n	8001edc <LL_EXTI_Init+0x148>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7ff fecc 	bl	8001c3c <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff fe55 	bl	8001b58 <LL_EXTI_EnableIT_32_63>
          break;
 8001eae:	e01a      	b.n	8001ee6 <LL_EXTI_Init+0x152>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff fe75 	bl	8001ba4 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7ff fe96 	bl	8001bf0 <LL_EXTI_EnableEvent_32_63>
          break;
 8001ec4:	e00f      	b.n	8001ee6 <LL_EXTI_Init+0x152>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7ff fe44 	bl	8001b58 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff fe8b 	bl	8001bf0 <LL_EXTI_EnableEvent_32_63>
          break;
 8001eda:	e004      	b.n	8001ee6 <LL_EXTI_Init+0x152>
        default:
          status |= 0x04u;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f043 0304 	orr.w	r3, r3, #4
 8001ee2:	60fb      	str	r3, [r7, #12]
          break;
 8001ee4:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	7a9b      	ldrb	r3, [r3, #10]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d043      	beq.n	8001f76 <LL_EXTI_Init+0x1e2>
      {
        switch (EXTI_InitStruct->Trigger)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	7a9b      	ldrb	r3, [r3, #10]
 8001ef2:	2b03      	cmp	r3, #3
 8001ef4:	d01c      	beq.n	8001f30 <LL_EXTI_Init+0x19c>
 8001ef6:	2b03      	cmp	r3, #3
 8001ef8:	dc25      	bgt.n	8001f46 <LL_EXTI_Init+0x1b2>
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d002      	beq.n	8001f04 <LL_EXTI_Init+0x170>
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d00b      	beq.n	8001f1a <LL_EXTI_Init+0x186>
 8001f02:	e020      	b.n	8001f46 <LL_EXTI_Init+0x1b2>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7ff ff2f 	bl	8001d6c <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7ff feb8 	bl	8001c88 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8001f18:	e02e      	b.n	8001f78 <LL_EXTI_Init+0x1e4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7ff fed8 	bl	8001cd4 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff fef9 	bl	8001d20 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8001f2e:	e023      	b.n	8001f78 <LL_EXTI_Init+0x1e4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff fea7 	bl	8001c88 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7ff feee 	bl	8001d20 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8001f44:	e018      	b.n	8001f78 <LL_EXTI_Init+0x1e4>
          default:
            status = ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	60fb      	str	r3, [r7, #12]
            break;
 8001f4a:	e015      	b.n	8001f78 <LL_EXTI_Init+0x1e4>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff fe13 	bl	8001b7c <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7ff fe5a 	bl	8001c14 <LL_EXTI_DisableEvent_0_31>
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff fe1d 	bl	8001ba4 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7ff fe64 	bl	8001c3c <LL_EXTI_DisableEvent_32_63>
 8001f74:	e000      	b.n	8001f78 <LL_EXTI_Init+0x1e4>
      }
 8001f76:	bf00      	nop
  }

  return status;
 8001f78:	68fb      	ldr	r3, [r7, #12]
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3710      	adds	r7, #16
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <LL_GPIO_SetPinMode>:
{
 8001f82:	b480      	push	{r7}
 8001f84:	b08b      	sub	sp, #44	; 0x2c
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	60f8      	str	r0, [r7, #12]
 8001f8a:	60b9      	str	r1, [r7, #8]
 8001f8c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	fa93 f3a3 	rbit	r3, r3
 8001f9c:	613b      	str	r3, [r7, #16]
  return result;
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d101      	bne.n	8001fac <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8001fa8:	2320      	movs	r3, #32
 8001faa:	e003      	b.n	8001fb4 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	fab3 f383 	clz	r3, r3
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	2103      	movs	r1, #3
 8001fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	401a      	ands	r2, r3
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc4:	6a3b      	ldr	r3, [r7, #32]
 8001fc6:	fa93 f3a3 	rbit	r3, r3
 8001fca:	61fb      	str	r3, [r7, #28]
  return result;
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d101      	bne.n	8001fda <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8001fd6:	2320      	movs	r3, #32
 8001fd8:	e003      	b.n	8001fe2 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8001fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fdc:	fab3 f383 	clz	r3, r3
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	6879      	ldr	r1, [r7, #4]
 8001fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fea:	431a      	orrs	r2, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	601a      	str	r2, [r3, #0]
}
 8001ff0:	bf00      	nop
 8001ff2:	372c      	adds	r7, #44	; 0x2c
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <LL_GPIO_SetPinOutputType>:
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	685a      	ldr	r2, [r3, #4]
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	43db      	mvns	r3, r3
 8002010:	401a      	ands	r2, r3
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	6879      	ldr	r1, [r7, #4]
 8002016:	fb01 f303 	mul.w	r3, r1, r3
 800201a:	431a      	orrs	r2, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	605a      	str	r2, [r3, #4]
}
 8002020:	bf00      	nop
 8002022:	3714      	adds	r7, #20
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <LL_GPIO_SetPinSpeed>:
{
 800202c:	b480      	push	{r7}
 800202e:	b08b      	sub	sp, #44	; 0x2c
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	689a      	ldr	r2, [r3, #8]
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	fa93 f3a3 	rbit	r3, r3
 8002046:	613b      	str	r3, [r7, #16]
  return result;
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d101      	bne.n	8002056 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8002052:	2320      	movs	r3, #32
 8002054:	e003      	b.n	800205e <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	fab3 f383 	clz	r3, r3
 800205c:	b2db      	uxtb	r3, r3
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	2103      	movs	r1, #3
 8002062:	fa01 f303 	lsl.w	r3, r1, r3
 8002066:	43db      	mvns	r3, r3
 8002068:	401a      	ands	r2, r3
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206e:	6a3b      	ldr	r3, [r7, #32]
 8002070:	fa93 f3a3 	rbit	r3, r3
 8002074:	61fb      	str	r3, [r7, #28]
  return result;
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800207a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207c:	2b00      	cmp	r3, #0
 800207e:	d101      	bne.n	8002084 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8002080:	2320      	movs	r3, #32
 8002082:	e003      	b.n	800208c <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8002084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002086:	fab3 f383 	clz	r3, r3
 800208a:	b2db      	uxtb	r3, r3
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	6879      	ldr	r1, [r7, #4]
 8002090:	fa01 f303 	lsl.w	r3, r1, r3
 8002094:	431a      	orrs	r2, r3
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	609a      	str	r2, [r3, #8]
}
 800209a:	bf00      	nop
 800209c:	372c      	adds	r7, #44	; 0x2c
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr

080020a6 <LL_GPIO_SetPinPull>:
{
 80020a6:	b480      	push	{r7}
 80020a8:	b08b      	sub	sp, #44	; 0x2c
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	60f8      	str	r0, [r7, #12]
 80020ae:	60b9      	str	r1, [r7, #8]
 80020b0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	68da      	ldr	r2, [r3, #12]
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	fa93 f3a3 	rbit	r3, r3
 80020c0:	613b      	str	r3, [r7, #16]
  return result;
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d101      	bne.n	80020d0 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80020cc:	2320      	movs	r3, #32
 80020ce:	e003      	b.n	80020d8 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	fab3 f383 	clz	r3, r3
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	2103      	movs	r1, #3
 80020dc:	fa01 f303 	lsl.w	r3, r1, r3
 80020e0:	43db      	mvns	r3, r3
 80020e2:	401a      	ands	r2, r3
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e8:	6a3b      	ldr	r3, [r7, #32]
 80020ea:	fa93 f3a3 	rbit	r3, r3
 80020ee:	61fb      	str	r3, [r7, #28]
  return result;
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80020f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80020fa:	2320      	movs	r3, #32
 80020fc:	e003      	b.n	8002106 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80020fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002100:	fab3 f383 	clz	r3, r3
 8002104:	b2db      	uxtb	r3, r3
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	6879      	ldr	r1, [r7, #4]
 800210a:	fa01 f303 	lsl.w	r3, r1, r3
 800210e:	431a      	orrs	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	60da      	str	r2, [r3, #12]
}
 8002114:	bf00      	nop
 8002116:	372c      	adds	r7, #44	; 0x2c
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <LL_GPIO_SetAFPin_0_7>:
{
 8002120:	b480      	push	{r7}
 8002122:	b08b      	sub	sp, #44	; 0x2c
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6a1a      	ldr	r2, [r3, #32]
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	fa93 f3a3 	rbit	r3, r3
 800213a:	613b      	str	r3, [r7, #16]
  return result;
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d101      	bne.n	800214a <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8002146:	2320      	movs	r3, #32
 8002148:	e003      	b.n	8002152 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	fab3 f383 	clz	r3, r3
 8002150:	b2db      	uxtb	r3, r3
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	210f      	movs	r1, #15
 8002156:	fa01 f303 	lsl.w	r3, r1, r3
 800215a:	43db      	mvns	r3, r3
 800215c:	401a      	ands	r2, r3
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002162:	6a3b      	ldr	r3, [r7, #32]
 8002164:	fa93 f3a3 	rbit	r3, r3
 8002168:	61fb      	str	r3, [r7, #28]
  return result;
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800216e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002170:	2b00      	cmp	r3, #0
 8002172:	d101      	bne.n	8002178 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8002174:	2320      	movs	r3, #32
 8002176:	e003      	b.n	8002180 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8002178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217a:	fab3 f383 	clz	r3, r3
 800217e:	b2db      	uxtb	r3, r3
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	6879      	ldr	r1, [r7, #4]
 8002184:	fa01 f303 	lsl.w	r3, r1, r3
 8002188:	431a      	orrs	r2, r3
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	621a      	str	r2, [r3, #32]
}
 800218e:	bf00      	nop
 8002190:	372c      	adds	r7, #44	; 0x2c
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr

0800219a <LL_GPIO_SetAFPin_8_15>:
{
 800219a:	b480      	push	{r7}
 800219c:	b08b      	sub	sp, #44	; 0x2c
 800219e:	af00      	add	r7, sp, #0
 80021a0:	60f8      	str	r0, [r7, #12]
 80021a2:	60b9      	str	r1, [r7, #8]
 80021a4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	0a1b      	lsrs	r3, r3, #8
 80021ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	fa93 f3a3 	rbit	r3, r3
 80021b6:	613b      	str	r3, [r7, #16]
  return result;
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d101      	bne.n	80021c6 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80021c2:	2320      	movs	r3, #32
 80021c4:	e003      	b.n	80021ce <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	fab3 f383 	clz	r3, r3
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	210f      	movs	r1, #15
 80021d2:	fa01 f303 	lsl.w	r3, r1, r3
 80021d6:	43db      	mvns	r3, r3
 80021d8:	401a      	ands	r2, r3
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	0a1b      	lsrs	r3, r3, #8
 80021de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e0:	6a3b      	ldr	r3, [r7, #32]
 80021e2:	fa93 f3a3 	rbit	r3, r3
 80021e6:	61fb      	str	r3, [r7, #28]
  return result;
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80021ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d101      	bne.n	80021f6 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80021f2:	2320      	movs	r3, #32
 80021f4:	e003      	b.n	80021fe <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80021f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f8:	fab3 f383 	clz	r3, r3
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	6879      	ldr	r1, [r7, #4]
 8002202:	fa01 f303 	lsl.w	r3, r1, r3
 8002206:	431a      	orrs	r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800220c:	bf00      	nop
 800220e:	372c      	adds	r7, #44	; 0x2c
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b088      	sub	sp, #32
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	fa93 f3a3 	rbit	r3, r3
 800222e:	60fb      	str	r3, [r7, #12]
  return result;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <LL_GPIO_Init+0x26>
    return 32U;
 800223a:	2320      	movs	r3, #32
 800223c:	e003      	b.n	8002246 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	fab3 f383 	clz	r3, r3
 8002244:	b2db      	uxtb	r3, r3
 8002246:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002248:	e048      	b.n	80022dc <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	2101      	movs	r1, #1
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	fa01 f303 	lsl.w	r3, r1, r3
 8002256:	4013      	ands	r3, r2
 8002258:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d03a      	beq.n	80022d6 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d003      	beq.n	8002270 <LL_GPIO_Init+0x58>
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	2b02      	cmp	r3, #2
 800226e:	d10e      	bne.n	800228e <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	461a      	mov	r2, r3
 8002276:	69b9      	ldr	r1, [r7, #24]
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f7ff fed7 	bl	800202c <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	6819      	ldr	r1, [r3, #0]
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	461a      	mov	r2, r3
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f7ff feb7 	bl	8001ffc <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	461a      	mov	r2, r3
 8002294:	69b9      	ldr	r1, [r7, #24]
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f7ff ff05 	bl	80020a6 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d111      	bne.n	80022c8 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	2bff      	cmp	r3, #255	; 0xff
 80022a8:	d807      	bhi.n	80022ba <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	695b      	ldr	r3, [r3, #20]
 80022ae:	461a      	mov	r2, r3
 80022b0:	69b9      	ldr	r1, [r7, #24]
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f7ff ff34 	bl	8002120 <LL_GPIO_SetAFPin_0_7>
 80022b8:	e006      	b.n	80022c8 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	695b      	ldr	r3, [r3, #20]
 80022be:	461a      	mov	r2, r3
 80022c0:	69b9      	ldr	r1, [r7, #24]
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f7ff ff69 	bl	800219a <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	461a      	mov	r2, r3
 80022ce:	69b9      	ldr	r1, [r7, #24]
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f7ff fe56 	bl	8001f82 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	3301      	adds	r3, #1
 80022da:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	fa22 f303 	lsr.w	r3, r2, r3
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1af      	bne.n	800224a <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3720      	adds	r7, #32
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <LL_SPI_IsEnabled>:
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002304:	2b40      	cmp	r3, #64	; 0x40
 8002306:	d101      	bne.n	800230c <LL_SPI_IsEnabled+0x18>
 8002308:	2301      	movs	r3, #1
 800230a:	e000      	b.n	800230e <LL_SPI_IsEnabled+0x1a>
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr

0800231a <LL_SPI_SetRxFIFOThreshold>:
{
 800231a:	b480      	push	{r7}
 800231c:	b083      	sub	sp, #12
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
 8002322:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	431a      	orrs	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	605a      	str	r2, [r3, #4]
}
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <LL_SPI_SetCRCPolynomial>:
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	b29b      	uxth	r3, r3
 800234e:	461a      	mov	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	611a      	str	r2, [r3, #16]
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f7ff ffc0 	bl	80022f4 <LL_SPI_IsEnabled>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d145      	bne.n	8002406 <LL_SPI_Init+0xa6>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002382:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8002386:	683a      	ldr	r2, [r7, #0]
 8002388:	6811      	ldr	r1, [r2, #0]
 800238a:	683a      	ldr	r2, [r7, #0]
 800238c:	6852      	ldr	r2, [r2, #4]
 800238e:	4311      	orrs	r1, r2
 8002390:	683a      	ldr	r2, [r7, #0]
 8002392:	68d2      	ldr	r2, [r2, #12]
 8002394:	4311      	orrs	r1, r2
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	6912      	ldr	r2, [r2, #16]
 800239a:	4311      	orrs	r1, r2
 800239c:	683a      	ldr	r2, [r7, #0]
 800239e:	6952      	ldr	r2, [r2, #20]
 80023a0:	4311      	orrs	r1, r2
 80023a2:	683a      	ldr	r2, [r7, #0]
 80023a4:	6992      	ldr	r2, [r2, #24]
 80023a6:	4311      	orrs	r1, r2
 80023a8:	683a      	ldr	r2, [r7, #0]
 80023aa:	69d2      	ldr	r2, [r2, #28]
 80023ac:	4311      	orrs	r1, r2
 80023ae:	683a      	ldr	r2, [r7, #0]
 80023b0:	6a12      	ldr	r2, [r2, #32]
 80023b2:	430a      	orrs	r2, r1
 80023b4:	431a      	orrs	r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80023c2:	f023 0304 	bic.w	r3, r3, #4
 80023c6:	683a      	ldr	r2, [r7, #0]
 80023c8:	6891      	ldr	r1, [r2, #8]
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	6952      	ldr	r2, [r2, #20]
 80023ce:	0c12      	lsrs	r2, r2, #16
 80023d0:	430a      	orrs	r2, r1
 80023d2:	431a      	orrs	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	605a      	str	r2, [r3, #4]
               SPI_CR2_DS | SPI_CR2_SSOE,
               SPI_InitStruct->DataWidth | (SPI_InitStruct->NSS >> 16U));

    /* Set Rx FIFO to Quarter (1 Byte) in case of 8 Bits mode. No DataPacking by default */
    if (SPI_InitStruct->DataWidth < LL_SPI_DATAWIDTH_9BIT)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023e0:	d204      	bcs.n	80023ec <LL_SPI_Init+0x8c>
    {
      LL_SPI_SetRxFIFOThreshold(SPIx, LL_SPI_RX_FIFO_TH_QUARTER);
 80023e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f7ff ff97 	bl	800231a <LL_SPI_SetRxFIFOThreshold>

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	6a1b      	ldr	r3, [r3, #32]
 80023f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023f4:	d105      	bne.n	8002402 <LL_SPI_Init+0xa2>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fa:	4619      	mov	r1, r3
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f7ff ff9f 	bl	8002340 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8002402:	2300      	movs	r3, #0
 8002404:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8002406:	7bfb      	ldrb	r3, [r7, #15]
}
 8002408:	4618      	mov	r0, r3
 800240a:	3710      	adds	r7, #16
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <LL_TIM_SetPrescaler>:
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002420:	bf00      	nop
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <LL_TIM_SetAutoReload>:
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	683a      	ldr	r2, [r7, #0]
 800243a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800243c:	bf00      	nop
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <LL_TIM_SetRepetitionCounter>:
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	683a      	ldr	r2, [r7, #0]
 8002456:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	695b      	ldr	r3, [r3, #20]
 8002470:	f043 0201 	orr.w	r2, r3, #1
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	615a      	str	r2, [r3, #20]
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4a3d      	ldr	r2, [pc, #244]	; (800258c <LL_TIM_Init+0x108>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d013      	beq.n	80024c4 <LL_TIM_Init+0x40>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024a2:	d00f      	beq.n	80024c4 <LL_TIM_Init+0x40>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4a3a      	ldr	r2, [pc, #232]	; (8002590 <LL_TIM_Init+0x10c>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d00b      	beq.n	80024c4 <LL_TIM_Init+0x40>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4a39      	ldr	r2, [pc, #228]	; (8002594 <LL_TIM_Init+0x110>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d007      	beq.n	80024c4 <LL_TIM_Init+0x40>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4a38      	ldr	r2, [pc, #224]	; (8002598 <LL_TIM_Init+0x114>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d003      	beq.n	80024c4 <LL_TIM_Init+0x40>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4a37      	ldr	r2, [pc, #220]	; (800259c <LL_TIM_Init+0x118>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d106      	bne.n	80024d2 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a2d      	ldr	r2, [pc, #180]	; (800258c <LL_TIM_Init+0x108>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d01f      	beq.n	800251a <LL_TIM_Init+0x96>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024e0:	d01b      	beq.n	800251a <LL_TIM_Init+0x96>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a2a      	ldr	r2, [pc, #168]	; (8002590 <LL_TIM_Init+0x10c>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d017      	beq.n	800251a <LL_TIM_Init+0x96>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a29      	ldr	r2, [pc, #164]	; (8002594 <LL_TIM_Init+0x110>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d013      	beq.n	800251a <LL_TIM_Init+0x96>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a28      	ldr	r2, [pc, #160]	; (8002598 <LL_TIM_Init+0x114>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d00f      	beq.n	800251a <LL_TIM_Init+0x96>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a27      	ldr	r2, [pc, #156]	; (800259c <LL_TIM_Init+0x118>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d00b      	beq.n	800251a <LL_TIM_Init+0x96>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a26      	ldr	r2, [pc, #152]	; (80025a0 <LL_TIM_Init+0x11c>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d007      	beq.n	800251a <LL_TIM_Init+0x96>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a25      	ldr	r2, [pc, #148]	; (80025a4 <LL_TIM_Init+0x120>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d003      	beq.n	800251a <LL_TIM_Init+0x96>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a24      	ldr	r2, [pc, #144]	; (80025a8 <LL_TIM_Init+0x124>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d106      	bne.n	8002528 <LL_TIM_Init+0xa4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	4313      	orrs	r3, r2
 8002526:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	4619      	mov	r1, r3
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f7ff ff79 	bl	800242c <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	881b      	ldrh	r3, [r3, #0]
 800253e:	4619      	mov	r1, r3
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f7ff ff65 	bl	8002410 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a10      	ldr	r2, [pc, #64]	; (800258c <LL_TIM_Init+0x108>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d00f      	beq.n	800256e <LL_TIM_Init+0xea>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a12      	ldr	r2, [pc, #72]	; (800259c <LL_TIM_Init+0x118>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d00b      	beq.n	800256e <LL_TIM_Init+0xea>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a11      	ldr	r2, [pc, #68]	; (80025a0 <LL_TIM_Init+0x11c>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d007      	beq.n	800256e <LL_TIM_Init+0xea>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a10      	ldr	r2, [pc, #64]	; (80025a4 <LL_TIM_Init+0x120>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d003      	beq.n	800256e <LL_TIM_Init+0xea>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a0f      	ldr	r2, [pc, #60]	; (80025a8 <LL_TIM_Init+0x124>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d105      	bne.n	800257a <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	4619      	mov	r1, r3
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f7ff ff67 	bl	8002448 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f7ff ff72 	bl	8002464 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	40012c00 	.word	0x40012c00
 8002590:	40000400 	.word	0x40000400
 8002594:	40000800 	.word	0x40000800
 8002598:	40000c00 	.word	0x40000c00
 800259c:	40013400 	.word	0x40013400
 80025a0:	40014000 	.word	0x40014000
 80025a4:	40014400 	.word	0x40014400
 80025a8:	40014800 	.word	0x40014800

080025ac <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80025be:	4a07      	ldr	r2, [pc, #28]	; (80025dc <LL_InitTick+0x30>)
 80025c0:	3b01      	subs	r3, #1
 80025c2:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80025c4:	4b05      	ldr	r3, [pc, #20]	; (80025dc <LL_InitTick+0x30>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025ca:	4b04      	ldr	r3, [pc, #16]	; (80025dc <LL_InitTick+0x30>)
 80025cc:	2205      	movs	r2, #5
 80025ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80025d0:	bf00      	nop
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr
 80025dc:	e000e010 	.word	0xe000e010

080025e0 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80025e8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f7ff ffdd 	bl	80025ac <LL_InitTick>
}
 80025f2:	bf00      	nop
 80025f4:	3708      	adds	r7, #8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
	...

080025fc <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002604:	4a04      	ldr	r2, [pc, #16]	; (8002618 <LL_SetSystemCoreClock+0x1c>)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6013      	str	r3, [r2, #0]
}
 800260a:	bf00      	nop
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	20000000 	.word	0x20000000

0800261c <__libc_init_array>:
 800261c:	b570      	push	{r4, r5, r6, lr}
 800261e:	4d0d      	ldr	r5, [pc, #52]	; (8002654 <__libc_init_array+0x38>)
 8002620:	4c0d      	ldr	r4, [pc, #52]	; (8002658 <__libc_init_array+0x3c>)
 8002622:	1b64      	subs	r4, r4, r5
 8002624:	10a4      	asrs	r4, r4, #2
 8002626:	2600      	movs	r6, #0
 8002628:	42a6      	cmp	r6, r4
 800262a:	d109      	bne.n	8002640 <__libc_init_array+0x24>
 800262c:	4d0b      	ldr	r5, [pc, #44]	; (800265c <__libc_init_array+0x40>)
 800262e:	4c0c      	ldr	r4, [pc, #48]	; (8002660 <__libc_init_array+0x44>)
 8002630:	f000 f820 	bl	8002674 <_init>
 8002634:	1b64      	subs	r4, r4, r5
 8002636:	10a4      	asrs	r4, r4, #2
 8002638:	2600      	movs	r6, #0
 800263a:	42a6      	cmp	r6, r4
 800263c:	d105      	bne.n	800264a <__libc_init_array+0x2e>
 800263e:	bd70      	pop	{r4, r5, r6, pc}
 8002640:	f855 3b04 	ldr.w	r3, [r5], #4
 8002644:	4798      	blx	r3
 8002646:	3601      	adds	r6, #1
 8002648:	e7ee      	b.n	8002628 <__libc_init_array+0xc>
 800264a:	f855 3b04 	ldr.w	r3, [r5], #4
 800264e:	4798      	blx	r3
 8002650:	3601      	adds	r6, #1
 8002652:	e7f2      	b.n	800263a <__libc_init_array+0x1e>
 8002654:	0800269c 	.word	0x0800269c
 8002658:	0800269c 	.word	0x0800269c
 800265c:	0800269c 	.word	0x0800269c
 8002660:	080026a0 	.word	0x080026a0

08002664 <memset>:
 8002664:	4402      	add	r2, r0
 8002666:	4603      	mov	r3, r0
 8002668:	4293      	cmp	r3, r2
 800266a:	d100      	bne.n	800266e <memset+0xa>
 800266c:	4770      	bx	lr
 800266e:	f803 1b01 	strb.w	r1, [r3], #1
 8002672:	e7f9      	b.n	8002668 <memset+0x4>

08002674 <_init>:
 8002674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002676:	bf00      	nop
 8002678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800267a:	bc08      	pop	{r3}
 800267c:	469e      	mov	lr, r3
 800267e:	4770      	bx	lr

08002680 <_fini>:
 8002680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002682:	bf00      	nop
 8002684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002686:	bc08      	pop	{r3}
 8002688:	469e      	mov	lr, r3
 800268a:	4770      	bx	lr
