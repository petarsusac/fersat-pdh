
fersat_pdh.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029c4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002b4c  08002b4c  00012b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b5c  08002b5c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08002b5c  08002b5c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b5c  08002b5c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b5c  08002b5c  00012b5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b60  08002b60  00012b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08002b64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005c7c  20000004  08002b68  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005c80  08002b68  00025c80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000099e4  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d24  00000000  00000000  00029a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000998  00000000  00000000  0002b740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008a0  00000000  00000000  0002c0d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001de6d  00000000  00000000  0002c978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000077e7  00000000  00000000  0004a7e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a33e0  00000000  00000000  00051fcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f53ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000268c  00000000  00000000  000f53fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002b34 	.word	0x08002b34

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08002b34 	.word	0x08002b34

080001c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	db0b      	blt.n	80001f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001da:	79fb      	ldrb	r3, [r7, #7]
 80001dc:	f003 021f 	and.w	r2, r3, #31
 80001e0:	4907      	ldr	r1, [pc, #28]	; (8000200 <__NVIC_EnableIRQ+0x38>)
 80001e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e6:	095b      	lsrs	r3, r3, #5
 80001e8:	2001      	movs	r0, #1
 80001ea:	fa00 f202 	lsl.w	r2, r0, r2
 80001ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80001f2:	bf00      	nop
 80001f4:	370c      	adds	r7, #12
 80001f6:	46bd      	mov	sp, r7
 80001f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	e000e100 	.word	0xe000e100

08000204 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	4603      	mov	r3, r0
 800020c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800020e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000212:	2b00      	cmp	r3, #0
 8000214:	db12      	blt.n	800023c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000216:	79fb      	ldrb	r3, [r7, #7]
 8000218:	f003 021f 	and.w	r2, r3, #31
 800021c:	490a      	ldr	r1, [pc, #40]	; (8000248 <__NVIC_DisableIRQ+0x44>)
 800021e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000222:	095b      	lsrs	r3, r3, #5
 8000224:	2001      	movs	r0, #1
 8000226:	fa00 f202 	lsl.w	r2, r0, r2
 800022a:	3320      	adds	r3, #32
 800022c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000230:	f3bf 8f4f 	dsb	sy
}
 8000234:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000236:	f3bf 8f6f 	isb	sy
}
 800023a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800023c:	bf00      	nop
 800023e:	370c      	adds	r7, #12
 8000240:	46bd      	mov	sp, r7
 8000242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000246:	4770      	bx	lr
 8000248:	e000e100 	.word	0xe000e100

0800024c <LL_SPI_DMA_GetRegAddr>:
  * @rmtoll DR           DR            LL_SPI_DMA_GetRegAddr
  * @param  SPIx SPI Instance
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_SPI_DMA_GetRegAddr(SPI_TypeDef *SPIx)
{
 800024c:	b480      	push	{r7}
 800024e:	b083      	sub	sp, #12
 8000250:	af00      	add	r7, sp, #0
 8000252:	6078      	str	r0, [r7, #4]
  return (uint32_t) &(SPIx->DR);
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	330c      	adds	r3, #12
}
 8000258:	4618      	mov	r0, r3
 800025a:	370c      	adds	r7, #12
 800025c:	46bd      	mov	sp, r7
 800025e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000262:	4770      	bx	lr

08000264 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000264:	b480      	push	{r7}
 8000266:	b083      	sub	sp, #12
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
 800026c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	683a      	ldr	r2, [r7, #0]
 8000272:	619a      	str	r2, [r3, #24]
}
 8000274:	bf00      	nop
 8000276:	370c      	adds	r7, #12
 8000278:	46bd      	mov	sp, r7
 800027a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027e:	4770      	bx	lr

08000280 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
 8000288:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	683a      	ldr	r2, [r7, #0]
 800028e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000290:	bf00      	nop
 8000292:	370c      	adds	r7, #12
 8000294:	46bd      	mov	sp, r7
 8000296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029a:	4770      	bx	lr

0800029c <ADC_Init>:
ADS131M08 *ads131m08;

// Function used to perform ADC initialization. Performs two SPI read operations
// that are necessary to synchronize DRDY pin and allocates memory for the samples.
// This function can also be used to perform initial ADC configuration if necessary.
void ADC_Init(ADS131M08 *adc_struct, SPI_TypeDef *SPIx, DMA_TypeDef *DMAx) {
 800029c:	b580      	push	{r7, lr}
 800029e:	b084      	sub	sp, #16
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	60f8      	str	r0, [r7, #12]
 80002a4:	60b9      	str	r1, [r7, #8]
 80002a6:	607a      	str	r2, [r7, #4]
	static uint8_t samples_array[NUM_SAMPLES * BYTES_PER_SAMPLE];
	samples = samples_array;
 80002a8:	4b11      	ldr	r3, [pc, #68]	; (80002f0 <ADC_Init+0x54>)
 80002aa:	4a12      	ldr	r2, [pc, #72]	; (80002f4 <ADC_Init+0x58>)
 80002ac:	601a      	str	r2, [r3, #0]

	adc_struct->SPIx = SPIx;
 80002ae:	68fb      	ldr	r3, [r7, #12]
 80002b0:	68ba      	ldr	r2, [r7, #8]
 80002b2:	601a      	str	r2, [r3, #0]
	adc_struct->DMAx = DMAx;
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	687a      	ldr	r2, [r7, #4]
 80002b8:	605a      	str	r2, [r3, #4]
	adc_struct->num_samples = NUM_SAMPLES;
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002c0:	811a      	strh	r2, [r3, #8]
	adc_struct->samples = samples;
 80002c2:	4b0b      	ldr	r3, [pc, #44]	; (80002f0 <ADC_Init+0x54>)
 80002c4:	681a      	ldr	r2, [r3, #0]
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	60da      	str	r2, [r3, #12]
	adc_struct->sampling_complete_flag = 0;
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	2200      	movs	r2, #0
 80002ce:	741a      	strb	r2, [r3, #16]

	ads131m08 = adc_struct;
 80002d0:	4a09      	ldr	r2, [pc, #36]	; (80002f8 <ADC_Init+0x5c>)
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	6013      	str	r3, [r2, #0]
	SPI_Set_Mode(CPOL0_CPHA1, SPIx);
 80002d6:	68b9      	ldr	r1, [r7, #8]
 80002d8:	2000      	movs	r0, #0
 80002da:	f001 fd2f 	bl	8001d3c <SPI_Set_Mode>
	ADC_DMA_init();
 80002de:	f000 f8a3 	bl	8000428 <ADC_DMA_init>
	current_sample_count = 0;
 80002e2:	4b06      	ldr	r3, [pc, #24]	; (80002fc <ADC_Init+0x60>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	801a      	strh	r2, [r3, #0]
}
 80002e8:	bf00      	nop
 80002ea:	3710      	adds	r7, #16
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	20000024 	.word	0x20000024
 80002f4:	2000004c 	.word	0x2000004c
 80002f8:	20000048 	.word	0x20000048
 80002fc:	20000020 	.word	0x20000020

08000300 <ADC_Start_Sampling>:

void ADC_Start_Sampling() {
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
	ADC_first_read(ads131m08->SPIx);
 8000304:	4b06      	ldr	r3, [pc, #24]	; (8000320 <ADC_Start_Sampling+0x20>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	4618      	mov	r0, r3
 800030c:	f000 f80c 	bl	8000328 <ADC_first_read>
	drdy_it_initialized = 1;
 8000310:	4b04      	ldr	r3, [pc, #16]	; (8000324 <ADC_Start_Sampling+0x24>)
 8000312:	2201      	movs	r2, #1
 8000314:	701a      	strb	r2, [r3, #0]
	NVIC_EnableIRQ(ADC_DRDY_IRQn);
 8000316:	200a      	movs	r0, #10
 8000318:	f7ff ff56 	bl	80001c8 <__NVIC_EnableIRQ>
}
 800031c:	bf00      	nop
 800031e:	bd80      	pop	{r7, pc}
 8000320:	20000048 	.word	0x20000048
 8000324:	20000022 	.word	0x20000022

08000328 <ADC_first_read>:

// Perform two sample reads to clear ADC's 2-deep FIFO buffer and ensure predictable
// DRDY pin behavior. Alternatively, a short pulse on applied to the SYNC/RESET pin
// can be used for this purpose.
static void ADC_first_read(SPI_TypeDef *SPIx) {
 8000328:	b580      	push	{r7, lr}
 800032a:	b08c      	sub	sp, #48	; 0x30
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
	uint8_t rx_buffer[30];

	LL_GPIO_ResetOutputPin(ADC_CS_GPIOx, ADC_CS_PIN); // \CS low
 8000330:	2102      	movs	r1, #2
 8000332:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000336:	f7ff ffa3 	bl	8000280 <LL_GPIO_ResetOutputPin>
	SPI_TransmitReceive(SPIx, 30, dummy_bytes, rx_buffer);
 800033a:	f107 030c 	add.w	r3, r7, #12
 800033e:	4a15      	ldr	r2, [pc, #84]	; (8000394 <ADC_first_read+0x6c>)
 8000340:	211e      	movs	r1, #30
 8000342:	6878      	ldr	r0, [r7, #4]
 8000344:	f001 fc92 	bl	8001c6c <SPI_TransmitReceive>
	LL_GPIO_SetOutputPin(ADC_CS_GPIOx, ADC_CS_PIN); // \CS high
 8000348:	2102      	movs	r1, #2
 800034a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800034e:	f7ff ff89 	bl	8000264 <LL_GPIO_SetOutputPin>

	for(int i = 0; i < 100; i++); // TODO: write a delay function to replace this
 8000352:	2300      	movs	r3, #0
 8000354:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000356:	e002      	b.n	800035e <ADC_first_read+0x36>
 8000358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800035a:	3301      	adds	r3, #1
 800035c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800035e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000360:	2b63      	cmp	r3, #99	; 0x63
 8000362:	ddf9      	ble.n	8000358 <ADC_first_read+0x30>

	LL_GPIO_ResetOutputPin(ADC_CS_GPIOx, ADC_CS_PIN); // \CS low
 8000364:	2102      	movs	r1, #2
 8000366:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800036a:	f7ff ff89 	bl	8000280 <LL_GPIO_ResetOutputPin>
	SPI_TransmitReceive(SPIx, 30, dummy_bytes, rx_buffer);
 800036e:	f107 030c 	add.w	r3, r7, #12
 8000372:	4a08      	ldr	r2, [pc, #32]	; (8000394 <ADC_first_read+0x6c>)
 8000374:	211e      	movs	r1, #30
 8000376:	6878      	ldr	r0, [r7, #4]
 8000378:	f001 fc78 	bl	8001c6c <SPI_TransmitReceive>
	LL_GPIO_SetOutputPin(ADC_CS_GPIOx, ADC_CS_PIN); // \CS high
 800037c:	2102      	movs	r1, #2
 800037e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000382:	f7ff ff6f 	bl	8000264 <LL_GPIO_SetOutputPin>

	SPI_Disable(SPIx);
 8000386:	6878      	ldr	r0, [r7, #4]
 8000388:	f001 fcbf 	bl	8001d0a <SPI_Disable>
}
 800038c:	bf00      	nop
 800038e:	3730      	adds	r7, #48	; 0x30
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}
 8000394:	20000028 	.word	0x20000028

08000398 <ADC_DRDY_interrupt_handler>:

// Called by DRDY interrupt routine, starts SPI DMA transfer.
void ADC_DRDY_interrupt_handler() {
 8000398:	b598      	push	{r3, r4, r7, lr}
 800039a:	af00      	add	r7, sp, #0
	if (drdy_it_initialized && current_sample_count < NUM_SAMPLES) {
 800039c:	4b1e      	ldr	r3, [pc, #120]	; (8000418 <ADC_DRDY_interrupt_handler+0x80>)
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	b2db      	uxtb	r3, r3
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d029      	beq.n	80003fa <ADC_DRDY_interrupt_handler+0x62>
 80003a6:	4b1d      	ldr	r3, [pc, #116]	; (800041c <ADC_DRDY_interrupt_handler+0x84>)
 80003a8:	881b      	ldrh	r3, [r3, #0]
 80003aa:	b29b      	uxth	r3, r3
 80003ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80003b0:	d223      	bcs.n	80003fa <ADC_DRDY_interrupt_handler+0x62>
		ADC_Set_DMA_Data_Length();
 80003b2:	f000 f863 	bl	800047c <ADC_Set_DMA_Data_Length>
		DMA_Reload_Memory_Address(ads131m08->DMAx, LL_DMA_CHANNEL_1, samples + current_sample_count++ * BYTES_PER_SAMPLE);
 80003b6:	4b1a      	ldr	r3, [pc, #104]	; (8000420 <ADC_DRDY_interrupt_handler+0x88>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	6858      	ldr	r0, [r3, #4]
 80003bc:	4b19      	ldr	r3, [pc, #100]	; (8000424 <ADC_DRDY_interrupt_handler+0x8c>)
 80003be:	681a      	ldr	r2, [r3, #0]
 80003c0:	4b16      	ldr	r3, [pc, #88]	; (800041c <ADC_DRDY_interrupt_handler+0x84>)
 80003c2:	881b      	ldrh	r3, [r3, #0]
 80003c4:	b29b      	uxth	r3, r3
 80003c6:	1c59      	adds	r1, r3, #1
 80003c8:	b28c      	uxth	r4, r1
 80003ca:	4914      	ldr	r1, [pc, #80]	; (800041c <ADC_DRDY_interrupt_handler+0x84>)
 80003cc:	800c      	strh	r4, [r1, #0]
 80003ce:	4619      	mov	r1, r3
 80003d0:	460b      	mov	r3, r1
 80003d2:	011b      	lsls	r3, r3, #4
 80003d4:	1a5b      	subs	r3, r3, r1
 80003d6:	005b      	lsls	r3, r3, #1
 80003d8:	4413      	add	r3, r2
 80003da:	461a      	mov	r2, r3
 80003dc:	2100      	movs	r1, #0
 80003de:	f000 fbcb 	bl	8000b78 <DMA_Reload_Memory_Address>
		ADC_Enable_SPI_DMA_transfer();
 80003e2:	f000 f861 	bl	80004a8 <ADC_Enable_SPI_DMA_transfer>

		NVIC_DisableIRQ(ADC_DRDY_IRQn); // Interrupt is re-enabled in DMA transfer complete routine
 80003e6:	200a      	movs	r0, #10
 80003e8:	f7ff ff0c 	bl	8000204 <__NVIC_DisableIRQ>

		SPI_Start_Transfer(ads131m08->SPIx);
 80003ec:	4b0c      	ldr	r3, [pc, #48]	; (8000420 <ADC_DRDY_interrupt_handler+0x88>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	4618      	mov	r0, r3
 80003f4:	f001 fc2a 	bl	8001c4c <SPI_Start_Transfer>
	} else if (current_sample_count >= NUM_SAMPLES) {
		NVIC_DisableIRQ(ADC_DRDY_IRQn);
		ads131m08->sampling_complete_flag = 1;
	}
}
 80003f8:	e00c      	b.n	8000414 <ADC_DRDY_interrupt_handler+0x7c>
	} else if (current_sample_count >= NUM_SAMPLES) {
 80003fa:	4b08      	ldr	r3, [pc, #32]	; (800041c <ADC_DRDY_interrupt_handler+0x84>)
 80003fc:	881b      	ldrh	r3, [r3, #0]
 80003fe:	b29b      	uxth	r3, r3
 8000400:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000404:	d306      	bcc.n	8000414 <ADC_DRDY_interrupt_handler+0x7c>
		NVIC_DisableIRQ(ADC_DRDY_IRQn);
 8000406:	200a      	movs	r0, #10
 8000408:	f7ff fefc 	bl	8000204 <__NVIC_DisableIRQ>
		ads131m08->sampling_complete_flag = 1;
 800040c:	4b04      	ldr	r3, [pc, #16]	; (8000420 <ADC_DRDY_interrupt_handler+0x88>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	2201      	movs	r2, #1
 8000412:	741a      	strb	r2, [r3, #16]
}
 8000414:	bf00      	nop
 8000416:	bd98      	pop	{r3, r4, r7, pc}
 8000418:	20000022 	.word	0x20000022
 800041c:	20000020 	.word	0x20000020
 8000420:	20000048 	.word	0x20000048
 8000424:	20000024 	.word	0x20000024

08000428 <ADC_DMA_init>:

static void ADC_DMA_init() {
 8000428:	b598      	push	{r3, r4, r7, lr}
 800042a:	af00      	add	r7, sp, #0
	DMA_Channel_Init(ads131m08->DMAx, LL_DMA_CHANNEL_1, LL_SPI_DMA_GetRegAddr(ads131m08->SPIx), samples);
 800042c:	4b10      	ldr	r3, [pc, #64]	; (8000470 <ADC_DMA_init+0x48>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	685c      	ldr	r4, [r3, #4]
 8000432:	4b0f      	ldr	r3, [pc, #60]	; (8000470 <ADC_DMA_init+0x48>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	4618      	mov	r0, r3
 800043a:	f7ff ff07 	bl	800024c <LL_SPI_DMA_GetRegAddr>
 800043e:	4602      	mov	r2, r0
 8000440:	4b0c      	ldr	r3, [pc, #48]	; (8000474 <ADC_DMA_init+0x4c>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	2100      	movs	r1, #0
 8000446:	4620      	mov	r0, r4
 8000448:	f000 fb6d 	bl	8000b26 <DMA_Channel_Init>
	DMA_Channel_Init(ads131m08->DMAx, LL_DMA_CHANNEL_2, LL_SPI_DMA_GetRegAddr(ads131m08->SPIx), dummy_bytes);
 800044c:	4b08      	ldr	r3, [pc, #32]	; (8000470 <ADC_DMA_init+0x48>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	685c      	ldr	r4, [r3, #4]
 8000452:	4b07      	ldr	r3, [pc, #28]	; (8000470 <ADC_DMA_init+0x48>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	4618      	mov	r0, r3
 800045a:	f7ff fef7 	bl	800024c <LL_SPI_DMA_GetRegAddr>
 800045e:	4602      	mov	r2, r0
 8000460:	4b05      	ldr	r3, [pc, #20]	; (8000478 <ADC_DMA_init+0x50>)
 8000462:	2101      	movs	r1, #1
 8000464:	4620      	mov	r0, r4
 8000466:	f000 fb5e 	bl	8000b26 <DMA_Channel_Init>
}
 800046a:	bf00      	nop
 800046c:	bd98      	pop	{r3, r4, r7, pc}
 800046e:	bf00      	nop
 8000470:	20000048 	.word	0x20000048
 8000474:	20000024 	.word	0x20000024
 8000478:	20000028 	.word	0x20000028

0800047c <ADC_Set_DMA_Data_Length>:

static void ADC_Set_DMA_Data_Length() {
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
	DMA_Set_Channel_Data_Length(ads131m08->DMAx, LL_DMA_CHANNEL_1, BYTES_PER_SAMPLE);
 8000480:	4b08      	ldr	r3, [pc, #32]	; (80004a4 <ADC_Set_DMA_Data_Length+0x28>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	685b      	ldr	r3, [r3, #4]
 8000486:	221e      	movs	r2, #30
 8000488:	2100      	movs	r1, #0
 800048a:	4618      	mov	r0, r3
 800048c:	f000 fb65 	bl	8000b5a <DMA_Set_Channel_Data_Length>
	DMA_Set_Channel_Data_Length(ads131m08->DMAx, LL_DMA_CHANNEL_2, BYTES_PER_SAMPLE);
 8000490:	4b04      	ldr	r3, [pc, #16]	; (80004a4 <ADC_Set_DMA_Data_Length+0x28>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	685b      	ldr	r3, [r3, #4]
 8000496:	221e      	movs	r2, #30
 8000498:	2101      	movs	r1, #1
 800049a:	4618      	mov	r0, r3
 800049c:	f000 fb5d 	bl	8000b5a <DMA_Set_Channel_Data_Length>
}
 80004a0:	bf00      	nop
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	20000048 	.word	0x20000048

080004a8 <ADC_Enable_SPI_DMA_transfer>:

static void ADC_Enable_SPI_DMA_transfer() {
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
	SPI_Enable_DMA_Rx_Request(ads131m08->SPIx);
 80004ac:	4b0c      	ldr	r3, [pc, #48]	; (80004e0 <ADC_Enable_SPI_DMA_transfer+0x38>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	4618      	mov	r0, r3
 80004b4:	f001 fb98 	bl	8001be8 <SPI_Enable_DMA_Rx_Request>
	DMA_Enable_CH1_CH2(ads131m08->DMAx);
 80004b8:	4b09      	ldr	r3, [pc, #36]	; (80004e0 <ADC_Enable_SPI_DMA_transfer+0x38>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	685b      	ldr	r3, [r3, #4]
 80004be:	4618      	mov	r0, r3
 80004c0:	f000 fb6a 	bl	8000b98 <DMA_Enable_CH1_CH2>
	SPI_Enable_DMA_Tx_Request(ads131m08->SPIx);
 80004c4:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <ADC_Enable_SPI_DMA_transfer+0x38>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	4618      	mov	r0, r3
 80004cc:	f001 fb97 	bl	8001bfe <SPI_Enable_DMA_Tx_Request>
	SPI_Enable_RXNE_TXE_Interrupts(ads131m08->SPIx);
 80004d0:	4b03      	ldr	r3, [pc, #12]	; (80004e0 <ADC_Enable_SPI_DMA_transfer+0x38>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	4618      	mov	r0, r3
 80004d8:	f001 fbaa 	bl	8001c30 <SPI_Enable_RXNE_TXE_Interrupts>
}
 80004dc:	bf00      	nop
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	20000048 	.word	0x20000048

080004e4 <LL_GPIO_SetOutputPin>:
{
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
 80004ec:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	683a      	ldr	r2, [r7, #0]
 80004f2:	619a      	str	r2, [r3, #24]
}
 80004f4:	bf00      	nop
 80004f6:	370c      	adds	r7, #12
 80004f8:	46bd      	mov	sp, r7
 80004fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fe:	4770      	bx	lr

08000500 <LL_GPIO_ResetOutputPin>:
{
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
 8000508:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	683a      	ldr	r2, [r7, #0]
 800050e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000510:	bf00      	nop
 8000512:	370c      	adds	r7, #12
 8000514:	46bd      	mov	sp, r7
 8000516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051a:	4770      	bx	lr

0800051c <ADT7301_Init>:
#include "adt7301.h"

ADT7301 *adt7301;

void ADT7301_Init(ADT7301 *adt7301_struct, SPI_TypeDef *SPIx) {
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
 8000524:	6039      	str	r1, [r7, #0]
	adt7301_struct->SPIx = SPIx;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	683a      	ldr	r2, [r7, #0]
 800052a:	601a      	str	r2, [r3, #0]
	adt7301 = adt7301_struct;
 800052c:	4a05      	ldr	r2, [pc, #20]	; (8000544 <ADT7301_Init+0x28>)
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	6013      	str	r3, [r2, #0]

	SPI_Set_Mode(CPOL1_CPHA1, SPIx);
 8000532:	6839      	ldr	r1, [r7, #0]
 8000534:	2001      	movs	r0, #1
 8000536:	f001 fc01 	bl	8001d3c <SPI_Set_Mode>
}
 800053a:	bf00      	nop
 800053c:	3708      	adds	r7, #8
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	20003c4c 	.word	0x20003c4c

08000548 <ADT7301_Collect_Sample>:

void ADT7301_Collect_Sample(temp_sensor ts) {
 8000548:	b580      	push	{r7, lr}
 800054a:	b084      	sub	sp, #16
 800054c:	af00      	add	r7, sp, #0
 800054e:	4603      	mov	r3, r0
 8000550:	71fb      	strb	r3, [r7, #7]
	uint8_t sample_bytes[2];
	uint8_t dummy_bytes[2] = {0};
 8000552:	2300      	movs	r3, #0
 8000554:	813b      	strh	r3, [r7, #8]

	if (ts == TEMP1) {
 8000556:	79fb      	ldrb	r3, [r7, #7]
 8000558:	2b00      	cmp	r3, #0
 800055a:	d114      	bne.n	8000586 <ADT7301_Collect_Sample+0x3e>
		LL_GPIO_ResetOutputPin(TEMP1_CS_GPIOx, TEMP1_CS_PIN);
 800055c:	2108      	movs	r1, #8
 800055e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000562:	f7ff ffcd 	bl	8000500 <LL_GPIO_ResetOutputPin>
		SPI_TransmitReceive(adt7301->SPIx, 2, dummy_bytes, sample_bytes);
 8000566:	4b3d      	ldr	r3, [pc, #244]	; (800065c <ADT7301_Collect_Sample+0x114>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	6818      	ldr	r0, [r3, #0]
 800056c:	f107 030c 	add.w	r3, r7, #12
 8000570:	f107 0208 	add.w	r2, r7, #8
 8000574:	2102      	movs	r1, #2
 8000576:	f001 fb79 	bl	8001c6c <SPI_TransmitReceive>
		LL_GPIO_SetOutputPin(TEMP1_CS_GPIOx, TEMP1_CS_PIN);
 800057a:	2108      	movs	r1, #8
 800057c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000580:	f7ff ffb0 	bl	80004e4 <LL_GPIO_SetOutputPin>
 8000584:	e032      	b.n	80005ec <ADT7301_Collect_Sample+0xa4>
	} else if (ts == TEMP2) {
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	2b01      	cmp	r3, #1
 800058a:	d116      	bne.n	80005ba <ADT7301_Collect_Sample+0x72>
		LL_GPIO_ResetOutputPin(TEMP2_CS_GPIOx, TEMP2_CS_PIN);
 800058c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000590:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000594:	f7ff ffb4 	bl	8000500 <LL_GPIO_ResetOutputPin>
		SPI_TransmitReceive(adt7301->SPIx, 2, dummy_bytes, sample_bytes);
 8000598:	4b30      	ldr	r3, [pc, #192]	; (800065c <ADT7301_Collect_Sample+0x114>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	6818      	ldr	r0, [r3, #0]
 800059e:	f107 030c 	add.w	r3, r7, #12
 80005a2:	f107 0208 	add.w	r2, r7, #8
 80005a6:	2102      	movs	r1, #2
 80005a8:	f001 fb60 	bl	8001c6c <SPI_TransmitReceive>
		LL_GPIO_SetOutputPin(TEMP2_CS_GPIOx, TEMP2_CS_PIN);
 80005ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005b4:	f7ff ff96 	bl	80004e4 <LL_GPIO_SetOutputPin>
 80005b8:	e018      	b.n	80005ec <ADT7301_Collect_Sample+0xa4>
	} else if (ts == TEMP3) {
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	2b02      	cmp	r3, #2
 80005be:	d115      	bne.n	80005ec <ADT7301_Collect_Sample+0xa4>
		LL_GPIO_ResetOutputPin(TEMP3_CS_GPIOx, TEMP3_CS_PIN);
 80005c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005c8:	f7ff ff9a 	bl	8000500 <LL_GPIO_ResetOutputPin>
		SPI_TransmitReceive(adt7301->SPIx, 2, dummy_bytes, sample_bytes);
 80005cc:	4b23      	ldr	r3, [pc, #140]	; (800065c <ADT7301_Collect_Sample+0x114>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	6818      	ldr	r0, [r3, #0]
 80005d2:	f107 030c 	add.w	r3, r7, #12
 80005d6:	f107 0208 	add.w	r2, r7, #8
 80005da:	2102      	movs	r1, #2
 80005dc:	f001 fb46 	bl	8001c6c <SPI_TransmitReceive>
		LL_GPIO_SetOutputPin(TEMP3_CS_GPIOx, TEMP3_CS_PIN);
 80005e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005e8:	f7ff ff7c 	bl	80004e4 <LL_GPIO_SetOutputPin>
	}

	int16_t tmp = (sample_bytes[0] << 8) | sample_bytes[1];
 80005ec:	7b3b      	ldrb	r3, [r7, #12]
 80005ee:	021b      	lsls	r3, r3, #8
 80005f0:	b21a      	sxth	r2, r3
 80005f2:	7b7b      	ldrb	r3, [r7, #13]
 80005f4:	b21b      	sxth	r3, r3
 80005f6:	4313      	orrs	r3, r2
 80005f8:	81fb      	strh	r3, [r7, #14]

	if ((tmp & (1 << 13)) != 0) {
 80005fa:	89fb      	ldrh	r3, [r7, #14]
 80005fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000600:	2b00      	cmp	r3, #0
 8000602:	d004      	beq.n	800060e <ADT7301_Collect_Sample+0xc6>
		tmp -= 16384;
 8000604:	89fb      	ldrh	r3, [r7, #14]
 8000606:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800060a:	b29b      	uxth	r3, r3
 800060c:	81fb      	strh	r3, [r7, #14]
	}

	adt7301->samples[ts] = (float)tmp;
 800060e:	4b13      	ldr	r3, [pc, #76]	; (800065c <ADT7301_Collect_Sample+0x114>)
 8000610:	681a      	ldr	r2, [r3, #0]
 8000612:	79fb      	ldrb	r3, [r7, #7]
 8000614:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8000618:	ee07 1a90 	vmov	s15, r1
 800061c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000620:	009b      	lsls	r3, r3, #2
 8000622:	4413      	add	r3, r2
 8000624:	3304      	adds	r3, #4
 8000626:	edc3 7a00 	vstr	s15, [r3]
	adt7301->samples[ts] /= 32.;
 800062a:	4b0c      	ldr	r3, [pc, #48]	; (800065c <ADT7301_Collect_Sample+0x114>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	009b      	lsls	r3, r3, #2
 8000632:	4413      	add	r3, r2
 8000634:	3304      	adds	r3, #4
 8000636:	ed93 7a00 	vldr	s14, [r3]
 800063a:	4b08      	ldr	r3, [pc, #32]	; (800065c <ADT7301_Collect_Sample+0x114>)
 800063c:	681a      	ldr	r2, [r3, #0]
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	eddf 6a07 	vldr	s13, [pc, #28]	; 8000660 <ADT7301_Collect_Sample+0x118>
 8000644:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000648:	009b      	lsls	r3, r3, #2
 800064a:	4413      	add	r3, r2
 800064c:	3304      	adds	r3, #4
 800064e:	edc3 7a00 	vstr	s15, [r3]
}
 8000652:	bf00      	nop
 8000654:	3710      	adds	r7, #16
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	20003c4c 	.word	0x20003c4c
 8000660:	42000000 	.word	0x42000000

08000664 <ADT7301_Shutdown>:

void ADT7301_Shutdown(temp_sensor ts) {
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	71fb      	strb	r3, [r7, #7]
	uint8_t dummy_buffer[2];
	uint8_t shutdown_cmd[2] = {0x20, 0x00};
 800066e:	2320      	movs	r3, #32
 8000670:	813b      	strh	r3, [r7, #8]

	if (ts == TEMP1) {
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d114      	bne.n	80006a2 <ADT7301_Shutdown+0x3e>
		LL_GPIO_ResetOutputPin(TEMP1_CS_GPIOx, TEMP1_CS_PIN);
 8000678:	2108      	movs	r1, #8
 800067a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800067e:	f7ff ff3f 	bl	8000500 <LL_GPIO_ResetOutputPin>
		SPI_TransmitReceive(adt7301->SPIx, 2, shutdown_cmd, dummy_buffer);
 8000682:	4b23      	ldr	r3, [pc, #140]	; (8000710 <ADT7301_Shutdown+0xac>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	6818      	ldr	r0, [r3, #0]
 8000688:	f107 030c 	add.w	r3, r7, #12
 800068c:	f107 0208 	add.w	r2, r7, #8
 8000690:	2102      	movs	r1, #2
 8000692:	f001 faeb 	bl	8001c6c <SPI_TransmitReceive>
		LL_GPIO_SetOutputPin(TEMP1_CS_GPIOx, TEMP1_CS_PIN);
 8000696:	2108      	movs	r1, #8
 8000698:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800069c:	f7ff ff22 	bl	80004e4 <LL_GPIO_SetOutputPin>
	} else if (ts == TEMP3) {
		LL_GPIO_ResetOutputPin(TEMP3_CS_GPIOx, TEMP3_CS_PIN);
		SPI_TransmitReceive(adt7301->SPIx, 2, shutdown_cmd, dummy_buffer);
		LL_GPIO_SetOutputPin(TEMP3_CS_GPIOx, TEMP3_CS_PIN);
	}
}
 80006a0:	e032      	b.n	8000708 <ADT7301_Shutdown+0xa4>
	} else if (ts == TEMP2) {
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	2b01      	cmp	r3, #1
 80006a6:	d116      	bne.n	80006d6 <ADT7301_Shutdown+0x72>
		LL_GPIO_ResetOutputPin(TEMP2_CS_GPIOx, TEMP2_CS_PIN);
 80006a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006b0:	f7ff ff26 	bl	8000500 <LL_GPIO_ResetOutputPin>
		SPI_TransmitReceive(adt7301->SPIx, 2, shutdown_cmd, dummy_buffer);
 80006b4:	4b16      	ldr	r3, [pc, #88]	; (8000710 <ADT7301_Shutdown+0xac>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	6818      	ldr	r0, [r3, #0]
 80006ba:	f107 030c 	add.w	r3, r7, #12
 80006be:	f107 0208 	add.w	r2, r7, #8
 80006c2:	2102      	movs	r1, #2
 80006c4:	f001 fad2 	bl	8001c6c <SPI_TransmitReceive>
		LL_GPIO_SetOutputPin(TEMP2_CS_GPIOx, TEMP2_CS_PIN);
 80006c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006d0:	f7ff ff08 	bl	80004e4 <LL_GPIO_SetOutputPin>
}
 80006d4:	e018      	b.n	8000708 <ADT7301_Shutdown+0xa4>
	} else if (ts == TEMP3) {
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	2b02      	cmp	r3, #2
 80006da:	d115      	bne.n	8000708 <ADT7301_Shutdown+0xa4>
		LL_GPIO_ResetOutputPin(TEMP3_CS_GPIOx, TEMP3_CS_PIN);
 80006dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e4:	f7ff ff0c 	bl	8000500 <LL_GPIO_ResetOutputPin>
		SPI_TransmitReceive(adt7301->SPIx, 2, shutdown_cmd, dummy_buffer);
 80006e8:	4b09      	ldr	r3, [pc, #36]	; (8000710 <ADT7301_Shutdown+0xac>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	6818      	ldr	r0, [r3, #0]
 80006ee:	f107 030c 	add.w	r3, r7, #12
 80006f2:	f107 0208 	add.w	r2, r7, #8
 80006f6:	2102      	movs	r1, #2
 80006f8:	f001 fab8 	bl	8001c6c <SPI_TransmitReceive>
		LL_GPIO_SetOutputPin(TEMP3_CS_GPIOx, TEMP3_CS_PIN);
 80006fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000700:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000704:	f7ff feee 	bl	80004e4 <LL_GPIO_SetOutputPin>
}
 8000708:	bf00      	nop
 800070a:	3710      	adds	r7, #16
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20003c4c 	.word	0x20003c4c

08000714 <ADT7301_Wakeup>:

void ADT7301_Wakeup(temp_sensor ts) {
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	71fb      	strb	r3, [r7, #7]
	uint8_t dummy_buffer[2];
	uint8_t wakeup_cmd[2] = {0};
 800071e:	2300      	movs	r3, #0
 8000720:	813b      	strh	r3, [r7, #8]

	if (ts == TEMP1) {
 8000722:	79fb      	ldrb	r3, [r7, #7]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d114      	bne.n	8000752 <ADT7301_Wakeup+0x3e>
		LL_GPIO_ResetOutputPin(TEMP1_CS_GPIOx, TEMP1_CS_PIN);
 8000728:	2108      	movs	r1, #8
 800072a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800072e:	f7ff fee7 	bl	8000500 <LL_GPIO_ResetOutputPin>
		SPI_TransmitReceive(adt7301->SPIx, 2, wakeup_cmd, dummy_buffer);
 8000732:	4b23      	ldr	r3, [pc, #140]	; (80007c0 <ADT7301_Wakeup+0xac>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	6818      	ldr	r0, [r3, #0]
 8000738:	f107 030c 	add.w	r3, r7, #12
 800073c:	f107 0208 	add.w	r2, r7, #8
 8000740:	2102      	movs	r1, #2
 8000742:	f001 fa93 	bl	8001c6c <SPI_TransmitReceive>
		LL_GPIO_SetOutputPin(TEMP1_CS_GPIOx, TEMP1_CS_PIN);
 8000746:	2108      	movs	r1, #8
 8000748:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800074c:	f7ff feca 	bl	80004e4 <LL_GPIO_SetOutputPin>
	} else if (ts == TEMP3) {
		LL_GPIO_ResetOutputPin(TEMP3_CS_GPIOx, TEMP3_CS_PIN);
		SPI_TransmitReceive(adt7301->SPIx, 2, wakeup_cmd, dummy_buffer);
		LL_GPIO_SetOutputPin(TEMP3_CS_GPIOx, TEMP3_CS_PIN);
	}
}
 8000750:	e032      	b.n	80007b8 <ADT7301_Wakeup+0xa4>
	} else if (ts == TEMP2) {
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	2b01      	cmp	r3, #1
 8000756:	d116      	bne.n	8000786 <ADT7301_Wakeup+0x72>
		LL_GPIO_ResetOutputPin(TEMP2_CS_GPIOx, TEMP2_CS_PIN);
 8000758:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800075c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000760:	f7ff fece 	bl	8000500 <LL_GPIO_ResetOutputPin>
		SPI_TransmitReceive(adt7301->SPIx, 2, wakeup_cmd, dummy_buffer);
 8000764:	4b16      	ldr	r3, [pc, #88]	; (80007c0 <ADT7301_Wakeup+0xac>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	6818      	ldr	r0, [r3, #0]
 800076a:	f107 030c 	add.w	r3, r7, #12
 800076e:	f107 0208 	add.w	r2, r7, #8
 8000772:	2102      	movs	r1, #2
 8000774:	f001 fa7a 	bl	8001c6c <SPI_TransmitReceive>
		LL_GPIO_SetOutputPin(TEMP2_CS_GPIOx, TEMP2_CS_PIN);
 8000778:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800077c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000780:	f7ff feb0 	bl	80004e4 <LL_GPIO_SetOutputPin>
}
 8000784:	e018      	b.n	80007b8 <ADT7301_Wakeup+0xa4>
	} else if (ts == TEMP3) {
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	2b02      	cmp	r3, #2
 800078a:	d115      	bne.n	80007b8 <ADT7301_Wakeup+0xa4>
		LL_GPIO_ResetOutputPin(TEMP3_CS_GPIOx, TEMP3_CS_PIN);
 800078c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000790:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000794:	f7ff feb4 	bl	8000500 <LL_GPIO_ResetOutputPin>
		SPI_TransmitReceive(adt7301->SPIx, 2, wakeup_cmd, dummy_buffer);
 8000798:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <ADT7301_Wakeup+0xac>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	6818      	ldr	r0, [r3, #0]
 800079e:	f107 030c 	add.w	r3, r7, #12
 80007a2:	f107 0208 	add.w	r2, r7, #8
 80007a6:	2102      	movs	r1, #2
 80007a8:	f001 fa60 	bl	8001c6c <SPI_TransmitReceive>
		LL_GPIO_SetOutputPin(TEMP3_CS_GPIOx, TEMP3_CS_PIN);
 80007ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007b4:	f7ff fe96 	bl	80004e4 <LL_GPIO_SetOutputPin>
}
 80007b8:	bf00      	nop
 80007ba:	3710      	adds	r7, #16
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20003c4c 	.word	0x20003c4c

080007c4 <__NVIC_GetPriorityGrouping>:
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007c8:	4b04      	ldr	r3, [pc, #16]	; (80007dc <__NVIC_GetPriorityGrouping+0x18>)
 80007ca:	68db      	ldr	r3, [r3, #12]
 80007cc:	0a1b      	lsrs	r3, r3, #8
 80007ce:	f003 0307 	and.w	r3, r3, #7
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr
 80007dc:	e000ed00 	.word	0xe000ed00

080007e0 <__NVIC_EnableIRQ>:
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	db0b      	blt.n	800080a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007f2:	79fb      	ldrb	r3, [r7, #7]
 80007f4:	f003 021f 	and.w	r2, r3, #31
 80007f8:	4907      	ldr	r1, [pc, #28]	; (8000818 <__NVIC_EnableIRQ+0x38>)
 80007fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007fe:	095b      	lsrs	r3, r3, #5
 8000800:	2001      	movs	r0, #1
 8000802:	fa00 f202 	lsl.w	r2, r0, r2
 8000806:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800080a:	bf00      	nop
 800080c:	370c      	adds	r7, #12
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	e000e100 	.word	0xe000e100

0800081c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	6039      	str	r1, [r7, #0]
 8000826:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082c:	2b00      	cmp	r3, #0
 800082e:	db0a      	blt.n	8000846 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	b2da      	uxtb	r2, r3
 8000834:	490c      	ldr	r1, [pc, #48]	; (8000868 <__NVIC_SetPriority+0x4c>)
 8000836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800083a:	0112      	lsls	r2, r2, #4
 800083c:	b2d2      	uxtb	r2, r2
 800083e:	440b      	add	r3, r1
 8000840:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000844:	e00a      	b.n	800085c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	b2da      	uxtb	r2, r3
 800084a:	4908      	ldr	r1, [pc, #32]	; (800086c <__NVIC_SetPriority+0x50>)
 800084c:	79fb      	ldrb	r3, [r7, #7]
 800084e:	f003 030f 	and.w	r3, r3, #15
 8000852:	3b04      	subs	r3, #4
 8000854:	0112      	lsls	r2, r2, #4
 8000856:	b2d2      	uxtb	r2, r2
 8000858:	440b      	add	r3, r1
 800085a:	761a      	strb	r2, [r3, #24]
}
 800085c:	bf00      	nop
 800085e:	370c      	adds	r7, #12
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr
 8000868:	e000e100 	.word	0xe000e100
 800086c:	e000ed00 	.word	0xe000ed00

08000870 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000870:	b480      	push	{r7}
 8000872:	b089      	sub	sp, #36	; 0x24
 8000874:	af00      	add	r7, sp, #0
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	60b9      	str	r1, [r7, #8]
 800087a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	f003 0307 	and.w	r3, r3, #7
 8000882:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000884:	69fb      	ldr	r3, [r7, #28]
 8000886:	f1c3 0307 	rsb	r3, r3, #7
 800088a:	2b04      	cmp	r3, #4
 800088c:	bf28      	it	cs
 800088e:	2304      	movcs	r3, #4
 8000890:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000892:	69fb      	ldr	r3, [r7, #28]
 8000894:	3304      	adds	r3, #4
 8000896:	2b06      	cmp	r3, #6
 8000898:	d902      	bls.n	80008a0 <NVIC_EncodePriority+0x30>
 800089a:	69fb      	ldr	r3, [r7, #28]
 800089c:	3b03      	subs	r3, #3
 800089e:	e000      	b.n	80008a2 <NVIC_EncodePriority+0x32>
 80008a0:	2300      	movs	r3, #0
 80008a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80008a8:	69bb      	ldr	r3, [r7, #24]
 80008aa:	fa02 f303 	lsl.w	r3, r2, r3
 80008ae:	43da      	mvns	r2, r3
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	401a      	ands	r2, r3
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	fa01 f303 	lsl.w	r3, r1, r3
 80008c2:	43d9      	mvns	r1, r3
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008c8:	4313      	orrs	r3, r2
         );
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	3724      	adds	r7, #36	; 0x24
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
	...

080008d8 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80008d8:	b480      	push	{r7}
 80008da:	b085      	sub	sp, #20
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
 80008e0:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 80008e6:	4a0c      	ldr	r2, [pc, #48]	; (8000918 <LL_DMA_EnableChannel+0x40>)
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	4413      	add	r3, r2
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	461a      	mov	r2, r3
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	4413      	add	r3, r2
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4908      	ldr	r1, [pc, #32]	; (8000918 <LL_DMA_EnableChannel+0x40>)
 80008f8:	683a      	ldr	r2, [r7, #0]
 80008fa:	440a      	add	r2, r1
 80008fc:	7812      	ldrb	r2, [r2, #0]
 80008fe:	4611      	mov	r1, r2
 8000900:	68fa      	ldr	r2, [r7, #12]
 8000902:	440a      	add	r2, r1
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	6013      	str	r3, [r2, #0]
}
 800090a:	bf00      	nop
 800090c:	3714      	adds	r7, #20
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	08002b4c 	.word	0x08002b4c

0800091c <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 800091c:	b480      	push	{r7}
 800091e:	b085      	sub	sp, #20
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	60fb      	str	r3, [r7, #12]
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 800092a:	4a0c      	ldr	r2, [pc, #48]	; (800095c <LL_DMA_DisableChannel+0x40>)
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	4413      	add	r3, r2
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	461a      	mov	r2, r3
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	4413      	add	r3, r2
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4908      	ldr	r1, [pc, #32]	; (800095c <LL_DMA_DisableChannel+0x40>)
 800093c:	683a      	ldr	r2, [r7, #0]
 800093e:	440a      	add	r2, r1
 8000940:	7812      	ldrb	r2, [r2, #0]
 8000942:	4611      	mov	r1, r2
 8000944:	68fa      	ldr	r2, [r7, #12]
 8000946:	440a      	add	r2, r1
 8000948:	f023 0301 	bic.w	r3, r3, #1
 800094c:	6013      	str	r3, [r2, #0]
}
 800094e:	bf00      	nop
 8000950:	3714      	adds	r7, #20
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	08002b4c 	.word	0x08002b4c

08000960 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 8000960:	b480      	push	{r7}
 8000962:	b087      	sub	sp, #28
 8000964:	af00      	add	r7, sp, #0
 8000966:	60f8      	str	r0, [r7, #12]
 8000968:	60b9      	str	r1, [r7, #8]
 800096a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8000970:	4a0d      	ldr	r2, [pc, #52]	; (80009a8 <LL_DMA_SetDataLength+0x48>)
 8000972:	68bb      	ldr	r3, [r7, #8]
 8000974:	4413      	add	r3, r2
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	461a      	mov	r2, r3
 800097a:	697b      	ldr	r3, [r7, #20]
 800097c:	4413      	add	r3, r2
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	0c1b      	lsrs	r3, r3, #16
 8000982:	041b      	lsls	r3, r3, #16
 8000984:	4908      	ldr	r1, [pc, #32]	; (80009a8 <LL_DMA_SetDataLength+0x48>)
 8000986:	68ba      	ldr	r2, [r7, #8]
 8000988:	440a      	add	r2, r1
 800098a:	7812      	ldrb	r2, [r2, #0]
 800098c:	4611      	mov	r1, r2
 800098e:	697a      	ldr	r2, [r7, #20]
 8000990:	440a      	add	r2, r1
 8000992:	4611      	mov	r1, r2
 8000994:	687a      	ldr	r2, [r7, #4]
 8000996:	4313      	orrs	r3, r2
 8000998:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 800099a:	bf00      	nop
 800099c:	371c      	adds	r7, #28
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	08002b4c 	.word	0x08002b4c

080009ac <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  MemoryAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAddress)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b087      	sub	sp, #28
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	60f8      	str	r0, [r7, #12]
 80009b4:	60b9      	str	r1, [r7, #8]
 80009b6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 80009bc:	4a07      	ldr	r2, [pc, #28]	; (80009dc <LL_DMA_SetMemoryAddress+0x30>)
 80009be:	68bb      	ldr	r3, [r7, #8]
 80009c0:	4413      	add	r3, r2
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	461a      	mov	r2, r3
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	4413      	add	r3, r2
 80009ca:	461a      	mov	r2, r3
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	60d3      	str	r3, [r2, #12]
}
 80009d0:	bf00      	nop
 80009d2:	371c      	adds	r7, #28
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr
 80009dc:	08002b4c 	.word	0x08002b4c

080009e0 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  PeriphAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b087      	sub	sp, #28
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	60f8      	str	r0, [r7, #12]
 80009e8:	60b9      	str	r1, [r7, #8]
 80009ea:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 80009f0:	4a07      	ldr	r2, [pc, #28]	; (8000a10 <LL_DMA_SetPeriphAddress+0x30>)
 80009f2:	68bb      	ldr	r3, [r7, #8]
 80009f4:	4413      	add	r3, r2
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	461a      	mov	r2, r3
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	4413      	add	r3, r2
 80009fe:	461a      	mov	r2, r3
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	6093      	str	r3, [r2, #8]
}
 8000a04:	bf00      	nop
 8000a06:	371c      	adds	r7, #28
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr
 8000a10:	08002b4c 	.word	0x08002b4c

08000a14 <LL_DMA_ClearFlag_TC1>:
  * @rmtoll IFCR         CTCIF1        LL_DMA_ClearFlag_TC1
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC1(DMA_TypeDef *DMAx)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2202      	movs	r2, #2
 8000a20:	605a      	str	r2, [r3, #4]
}
 8000a22:	bf00      	nop
 8000a24:	370c      	adds	r7, #12
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr

08000a2e <LL_DMA_ClearFlag_TC2>:
  * @rmtoll IFCR         CTCIF2        LL_DMA_ClearFlag_TC2
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC2(DMA_TypeDef *DMAx)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	b083      	sub	sp, #12
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF2);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2220      	movs	r2, #32
 8000a3a:	605a      	str	r2, [r3, #4]
}
 8000a3c:	bf00      	nop
 8000a3e:	370c      	adds	r7, #12
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr

08000a48 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b085      	sub	sp, #20
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;    
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 8000a56:	4a0c      	ldr	r2, [pc, #48]	; (8000a88 <LL_DMA_EnableIT_TC+0x40>)
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	4413      	add	r3, r2
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	461a      	mov	r2, r3
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	4413      	add	r3, r2
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4908      	ldr	r1, [pc, #32]	; (8000a88 <LL_DMA_EnableIT_TC+0x40>)
 8000a68:	683a      	ldr	r2, [r7, #0]
 8000a6a:	440a      	add	r2, r1
 8000a6c:	7812      	ldrb	r2, [r2, #0]
 8000a6e:	4611      	mov	r1, r2
 8000a70:	68fa      	ldr	r2, [r7, #12]
 8000a72:	440a      	add	r2, r1
 8000a74:	f043 0302 	orr.w	r3, r3, #2
 8000a78:	6013      	str	r3, [r2, #0]
}
 8000a7a:	bf00      	nop
 8000a7c:	3714      	adds	r7, #20
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	08002b4c 	.word	0x08002b4c

08000a8c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b085      	sub	sp, #20
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000a94:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000a96:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000a98:	4907      	ldr	r1, [pc, #28]	; (8000ab8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000aa0:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000aa2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000aaa:	68fb      	ldr	r3, [r7, #12]
}
 8000aac:	bf00      	nop
 8000aae:	3714      	adds	r7, #20
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	40021000 	.word	0x40021000

08000abc <LL_GPIO_SetOutputPin>:
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	683a      	ldr	r2, [r7, #0]
 8000aca:	619a      	str	r2, [r3, #24]
}
 8000acc:	bf00      	nop
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 8000adc:	2002      	movs	r0, #2
 8000ade:	f7ff ffd5 	bl	8000a8c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA2_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000ae2:	f7ff fe6f 	bl	80007c4 <__NVIC_GetPriorityGrouping>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2200      	movs	r2, #0
 8000aea:	2100      	movs	r1, #0
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff febf 	bl	8000870 <NVIC_EncodePriority>
 8000af2:	4603      	mov	r3, r0
 8000af4:	4619      	mov	r1, r3
 8000af6:	2038      	movs	r0, #56	; 0x38
 8000af8:	f7ff fe90 	bl	800081c <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8000afc:	2038      	movs	r0, #56	; 0x38
 8000afe:	f7ff fe6f 	bl	80007e0 <__NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Channel2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000b02:	f7ff fe5f 	bl	80007c4 <__NVIC_GetPriorityGrouping>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2200      	movs	r2, #0
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff feaf 	bl	8000870 <NVIC_EncodePriority>
 8000b12:	4603      	mov	r3, r0
 8000b14:	4619      	mov	r1, r3
 8000b16:	2039      	movs	r0, #57	; 0x39
 8000b18:	f7ff fe80 	bl	800081c <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8000b1c:	2039      	movs	r0, #57	; 0x39
 8000b1e:	f7ff fe5f 	bl	80007e0 <__NVIC_EnableIRQ>

}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <DMA_Channel_Init>:

/* USER CODE BEGIN 2 */
void DMA_Channel_Init(DMA_TypeDef *DMAx, uint32_t channel, uint32_t periph_addr, uint8_t *mem_addr) {
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b084      	sub	sp, #16
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	60f8      	str	r0, [r7, #12]
 8000b2e:	60b9      	str	r1, [r7, #8]
 8000b30:	607a      	str	r2, [r7, #4]
 8000b32:	603b      	str	r3, [r7, #0]
	LL_DMA_SetPeriphAddress(DMAx, channel, periph_addr);
 8000b34:	687a      	ldr	r2, [r7, #4]
 8000b36:	68b9      	ldr	r1, [r7, #8]
 8000b38:	68f8      	ldr	r0, [r7, #12]
 8000b3a:	f7ff ff51 	bl	80009e0 <LL_DMA_SetPeriphAddress>
	LL_DMA_SetMemoryAddress(DMAx, channel, (uint32_t) mem_addr);
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	461a      	mov	r2, r3
 8000b42:	68b9      	ldr	r1, [r7, #8]
 8000b44:	68f8      	ldr	r0, [r7, #12]
 8000b46:	f7ff ff31 	bl	80009ac <LL_DMA_SetMemoryAddress>
	LL_DMA_EnableIT_TC(DMAx, channel);
 8000b4a:	68b9      	ldr	r1, [r7, #8]
 8000b4c:	68f8      	ldr	r0, [r7, #12]
 8000b4e:	f7ff ff7b 	bl	8000a48 <LL_DMA_EnableIT_TC>
}
 8000b52:	bf00      	nop
 8000b54:	3710      	adds	r7, #16
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <DMA_Set_Channel_Data_Length>:

void DMA_Set_Channel_Data_Length(DMA_TypeDef *DMAx, uint32_t channel, uint32_t length) {
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b084      	sub	sp, #16
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	60f8      	str	r0, [r7, #12]
 8000b62:	60b9      	str	r1, [r7, #8]
 8000b64:	607a      	str	r2, [r7, #4]
	LL_DMA_SetDataLength(DMAx, channel, length);
 8000b66:	687a      	ldr	r2, [r7, #4]
 8000b68:	68b9      	ldr	r1, [r7, #8]
 8000b6a:	68f8      	ldr	r0, [r7, #12]
 8000b6c:	f7ff fef8 	bl	8000960 <LL_DMA_SetDataLength>
}
 8000b70:	bf00      	nop
 8000b72:	3710      	adds	r7, #16
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <DMA_Reload_Memory_Address>:

void DMA_Reload_Memory_Address(DMA_TypeDef *DMAx, uint32_t channel, uint8_t *mem_addr) {
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	60f8      	str	r0, [r7, #12]
 8000b80:	60b9      	str	r1, [r7, #8]
 8000b82:	607a      	str	r2, [r7, #4]
	LL_DMA_SetMemoryAddress(DMAx, channel, (uint32_t) mem_addr);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	461a      	mov	r2, r3
 8000b88:	68b9      	ldr	r1, [r7, #8]
 8000b8a:	68f8      	ldr	r0, [r7, #12]
 8000b8c:	f7ff ff0e 	bl	80009ac <LL_DMA_SetMemoryAddress>
}
 8000b90:	bf00      	nop
 8000b92:	3710      	adds	r7, #16
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <DMA_Enable_CH1_CH2>:

void DMA_Enable_CH1_CH2(DMA_TypeDef *DMAx) {
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
	LL_DMA_EnableChannel(DMAx, LL_DMA_CHANNEL_1);
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	6878      	ldr	r0, [r7, #4]
 8000ba4:	f7ff fe98 	bl	80008d8 <LL_DMA_EnableChannel>
	LL_DMA_EnableChannel(DMAx, LL_DMA_CHANNEL_2);
 8000ba8:	2101      	movs	r1, #1
 8000baa:	6878      	ldr	r0, [r7, #4]
 8000bac:	f7ff fe94 	bl	80008d8 <LL_DMA_EnableChannel>
}
 8000bb0:	bf00      	nop
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <DMA_Transfer_Complete_RX_interrupt_handler>:

void DMA_Transfer_Complete_RX_interrupt_handler() {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
	LL_DMA_ClearFlag_TC1(DMA2);
 8000bbc:	480b      	ldr	r0, [pc, #44]	; (8000bec <DMA_Transfer_Complete_RX_interrupt_handler+0x34>)
 8000bbe:	f7ff ff29 	bl	8000a14 <LL_DMA_ClearFlag_TC1>
	LL_DMA_DisableChannel(DMA2, LL_DMA_CHANNEL_1);
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	4809      	ldr	r0, [pc, #36]	; (8000bec <DMA_Transfer_Complete_RX_interrupt_handler+0x34>)
 8000bc6:	f7ff fea9 	bl	800091c <LL_DMA_DisableChannel>

	if (tc == 1) {
 8000bca:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <DMA_Transfer_Complete_RX_interrupt_handler+0x38>)
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	2b01      	cmp	r3, #1
 8000bd2:	d106      	bne.n	8000be2 <DMA_Transfer_Complete_RX_interrupt_handler+0x2a>
		DMA_Disable(SB_SPIx);
 8000bd4:	4807      	ldr	r0, [pc, #28]	; (8000bf4 <DMA_Transfer_Complete_RX_interrupt_handler+0x3c>)
 8000bd6:	f000 f82f 	bl	8000c38 <DMA_Disable>
		tc = 0;
 8000bda:	4b05      	ldr	r3, [pc, #20]	; (8000bf0 <DMA_Transfer_Complete_RX_interrupt_handler+0x38>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	701a      	strb	r2, [r3, #0]
	} else {
		tc = 1;
	}
}
 8000be0:	e002      	b.n	8000be8 <DMA_Transfer_Complete_RX_interrupt_handler+0x30>
		tc = 1;
 8000be2:	4b03      	ldr	r3, [pc, #12]	; (8000bf0 <DMA_Transfer_Complete_RX_interrupt_handler+0x38>)
 8000be4:	2201      	movs	r2, #1
 8000be6:	701a      	strb	r2, [r3, #0]
}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	40020400 	.word	0x40020400
 8000bf0:	20003c50 	.word	0x20003c50
 8000bf4:	40003c00 	.word	0x40003c00

08000bf8 <DMA_Transfer_Complete_TX_interrupt_handler>:

void DMA_Transfer_Complete_TX_interrupt_handler() {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
	LL_DMA_ClearFlag_TC2(DMA2);
 8000bfc:	480b      	ldr	r0, [pc, #44]	; (8000c2c <DMA_Transfer_Complete_TX_interrupt_handler+0x34>)
 8000bfe:	f7ff ff16 	bl	8000a2e <LL_DMA_ClearFlag_TC2>
	LL_DMA_DisableChannel(DMA2, LL_DMA_CHANNEL_2);
 8000c02:	2101      	movs	r1, #1
 8000c04:	4809      	ldr	r0, [pc, #36]	; (8000c2c <DMA_Transfer_Complete_TX_interrupt_handler+0x34>)
 8000c06:	f7ff fe89 	bl	800091c <LL_DMA_DisableChannel>

	if (tc == 1) {
 8000c0a:	4b09      	ldr	r3, [pc, #36]	; (8000c30 <DMA_Transfer_Complete_TX_interrupt_handler+0x38>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d106      	bne.n	8000c22 <DMA_Transfer_Complete_TX_interrupt_handler+0x2a>
		DMA_Disable(SB_SPIx);
 8000c14:	4807      	ldr	r0, [pc, #28]	; (8000c34 <DMA_Transfer_Complete_TX_interrupt_handler+0x3c>)
 8000c16:	f000 f80f 	bl	8000c38 <DMA_Disable>
		tc = 0;
 8000c1a:	4b05      	ldr	r3, [pc, #20]	; (8000c30 <DMA_Transfer_Complete_TX_interrupt_handler+0x38>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	701a      	strb	r2, [r3, #0]
	} else {
		tc = 1;
	}
}
 8000c20:	e002      	b.n	8000c28 <DMA_Transfer_Complete_TX_interrupt_handler+0x30>
		tc = 1;
 8000c22:	4b03      	ldr	r3, [pc, #12]	; (8000c30 <DMA_Transfer_Complete_TX_interrupt_handler+0x38>)
 8000c24:	2201      	movs	r2, #1
 8000c26:	701a      	strb	r2, [r3, #0]
}
 8000c28:	bf00      	nop
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40020400 	.word	0x40020400
 8000c30:	20003c50 	.word	0x20003c50
 8000c34:	40003c00 	.word	0x40003c00

08000c38 <DMA_Disable>:


void DMA_Disable(SPI_TypeDef *SPIx) {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
	SPI_Disable(SPIx);
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f001 f862 	bl	8001d0a <SPI_Disable>

	SPI_Disable_DMA_Requests(SPIx);
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f000 ffe4 	bl	8001c14 <SPI_Disable_DMA_Requests>

	LL_GPIO_SetOutputPin(ADC_CS_GPIOx, ADC_CS_PIN);
 8000c4c:	2102      	movs	r1, #2
 8000c4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c52:	f7ff ff33 	bl	8000abc <LL_GPIO_SetOutputPin>
	NVIC_EnableIRQ(EXTI4_IRQn);
 8000c56:	200a      	movs	r0, #10
 8000c58:	f7ff fdc2 	bl	80007e0 <__NVIC_EnableIRQ>
}
 8000c5c:	bf00      	nop
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <__NVIC_GetPriorityGrouping>:
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c68:	4b04      	ldr	r3, [pc, #16]	; (8000c7c <__NVIC_GetPriorityGrouping+0x18>)
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	0a1b      	lsrs	r3, r3, #8
 8000c6e:	f003 0307 	and.w	r3, r3, #7
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <__NVIC_EnableIRQ>:
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	db0b      	blt.n	8000caa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	f003 021f 	and.w	r2, r3, #31
 8000c98:	4907      	ldr	r1, [pc, #28]	; (8000cb8 <__NVIC_EnableIRQ+0x38>)
 8000c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9e:	095b      	lsrs	r3, r3, #5
 8000ca0:	2001      	movs	r0, #1
 8000ca2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000caa:	bf00      	nop
 8000cac:	370c      	adds	r7, #12
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	e000e100 	.word	0xe000e100

08000cbc <__NVIC_SetPriority>:
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	6039      	str	r1, [r7, #0]
 8000cc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	db0a      	blt.n	8000ce6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	b2da      	uxtb	r2, r3
 8000cd4:	490c      	ldr	r1, [pc, #48]	; (8000d08 <__NVIC_SetPriority+0x4c>)
 8000cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cda:	0112      	lsls	r2, r2, #4
 8000cdc:	b2d2      	uxtb	r2, r2
 8000cde:	440b      	add	r3, r1
 8000ce0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000ce4:	e00a      	b.n	8000cfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	b2da      	uxtb	r2, r3
 8000cea:	4908      	ldr	r1, [pc, #32]	; (8000d0c <__NVIC_SetPriority+0x50>)
 8000cec:	79fb      	ldrb	r3, [r7, #7]
 8000cee:	f003 030f 	and.w	r3, r3, #15
 8000cf2:	3b04      	subs	r3, #4
 8000cf4:	0112      	lsls	r2, r2, #4
 8000cf6:	b2d2      	uxtb	r2, r2
 8000cf8:	440b      	add	r3, r1
 8000cfa:	761a      	strb	r2, [r3, #24]
}
 8000cfc:	bf00      	nop
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	e000e100 	.word	0xe000e100
 8000d0c:	e000ed00 	.word	0xe000ed00

08000d10 <NVIC_EncodePriority>:
{
 8000d10:	b480      	push	{r7}
 8000d12:	b089      	sub	sp, #36	; 0x24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	f003 0307 	and.w	r3, r3, #7
 8000d22:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d24:	69fb      	ldr	r3, [r7, #28]
 8000d26:	f1c3 0307 	rsb	r3, r3, #7
 8000d2a:	2b04      	cmp	r3, #4
 8000d2c:	bf28      	it	cs
 8000d2e:	2304      	movcs	r3, #4
 8000d30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	3304      	adds	r3, #4
 8000d36:	2b06      	cmp	r3, #6
 8000d38:	d902      	bls.n	8000d40 <NVIC_EncodePriority+0x30>
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	3b03      	subs	r3, #3
 8000d3e:	e000      	b.n	8000d42 <NVIC_EncodePriority+0x32>
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d48:	69bb      	ldr	r3, [r7, #24]
 8000d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4e:	43da      	mvns	r2, r3
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	401a      	ands	r2, r3
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d58:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d62:	43d9      	mvns	r1, r3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d68:	4313      	orrs	r3, r2
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3724      	adds	r7, #36	; 0x24
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
	...

08000d78 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000d80:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000d82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d84:	4907      	ldr	r1, [pc, #28]	; (8000da4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000d8c:	4b05      	ldr	r3, [pc, #20]	; (8000da4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000d8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	4013      	ands	r3, r2
 8000d94:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d96:	68fb      	ldr	r3, [r7, #12]
}
 8000d98:	bf00      	nop
 8000d9a:	3714      	adds	r7, #20
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	40021000 	.word	0x40021000

08000da8 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b087      	sub	sp, #28
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8000db2:	4a17      	ldr	r2, [pc, #92]	; (8000e10 <LL_SYSCFG_SetEXTISource+0x68>)
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	3302      	adds	r3, #2
 8000dba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	0c1b      	lsrs	r3, r3, #16
 8000dc2:	43db      	mvns	r3, r3
 8000dc4:	ea02 0103 	and.w	r1, r2, r3
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	0c1b      	lsrs	r3, r3, #16
 8000dcc:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	fa93 f3a3 	rbit	r3, r3
 8000dd4:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d101      	bne.n	8000de4 <LL_SYSCFG_SetEXTISource+0x3c>
  {
    return 32U;
 8000de0:	2320      	movs	r3, #32
 8000de2:	e003      	b.n	8000dec <LL_SYSCFG_SetEXTISource+0x44>
  }
  return __builtin_clz(value);
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	fab3 f383 	clz	r3, r3
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	461a      	mov	r2, r3
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	fa03 f202 	lsl.w	r2, r3, r2
 8000df4:	4806      	ldr	r0, [pc, #24]	; (8000e10 <LL_SYSCFG_SetEXTISource+0x68>)
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	430a      	orrs	r2, r1
 8000dfc:	3302      	adds	r3, #2
 8000dfe:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000e02:	bf00      	nop
 8000e04:	371c      	adds	r7, #28
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	40010000 	.word	0x40010000

08000e14 <LL_GPIO_SetPinMode>:
{
 8000e14:	b480      	push	{r7}
 8000e16:	b08b      	sub	sp, #44	; 0x2c
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	fa93 f3a3 	rbit	r3, r3
 8000e2e:	613b      	str	r3, [r7, #16]
  return result;
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000e34:	69bb      	ldr	r3, [r7, #24]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d101      	bne.n	8000e3e <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8000e3a:	2320      	movs	r3, #32
 8000e3c:	e003      	b.n	8000e46 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8000e3e:	69bb      	ldr	r3, [r7, #24]
 8000e40:	fab3 f383 	clz	r3, r3
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	2103      	movs	r1, #3
 8000e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4e:	43db      	mvns	r3, r3
 8000e50:	401a      	ands	r2, r3
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e56:	6a3b      	ldr	r3, [r7, #32]
 8000e58:	fa93 f3a3 	rbit	r3, r3
 8000e5c:	61fb      	str	r3, [r7, #28]
  return result;
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d101      	bne.n	8000e6c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8000e68:	2320      	movs	r3, #32
 8000e6a:	e003      	b.n	8000e74 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e6e:	fab3 f383 	clz	r3, r3
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	6879      	ldr	r1, [r7, #4]
 8000e78:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7c:	431a      	orrs	r2, r3
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	601a      	str	r2, [r3, #0]
}
 8000e82:	bf00      	nop
 8000e84:	372c      	adds	r7, #44	; 0x2c
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr

08000e8e <LL_GPIO_SetPinPull>:
{
 8000e8e:	b480      	push	{r7}
 8000e90:	b08b      	sub	sp, #44	; 0x2c
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	60f8      	str	r0, [r7, #12]
 8000e96:	60b9      	str	r1, [r7, #8]
 8000e98:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	68da      	ldr	r2, [r3, #12]
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	fa93 f3a3 	rbit	r3, r3
 8000ea8:	613b      	str	r3, [r7, #16]
  return result;
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000eae:	69bb      	ldr	r3, [r7, #24]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d101      	bne.n	8000eb8 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8000eb4:	2320      	movs	r3, #32
 8000eb6:	e003      	b.n	8000ec0 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8000eb8:	69bb      	ldr	r3, [r7, #24]
 8000eba:	fab3 f383 	clz	r3, r3
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	2103      	movs	r1, #3
 8000ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	401a      	ands	r2, r3
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ed0:	6a3b      	ldr	r3, [r7, #32]
 8000ed2:	fa93 f3a3 	rbit	r3, r3
 8000ed6:	61fb      	str	r3, [r7, #28]
  return result;
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d101      	bne.n	8000ee6 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8000ee2:	2320      	movs	r3, #32
 8000ee4:	e003      	b.n	8000eee <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8000ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee8:	fab3 f383 	clz	r3, r3
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	6879      	ldr	r1, [r7, #4]
 8000ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef6:	431a      	orrs	r2, r3
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	60da      	str	r2, [r3, #12]
}
 8000efc:	bf00      	nop
 8000efe:	372c      	adds	r7, #44	; 0x2c
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <LL_GPIO_SetOutputPin>:
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	683a      	ldr	r2, [r7, #0]
 8000f16:	619a      	str	r2, [r3, #24]
}
 8000f18:	bf00      	nop
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b08a      	sub	sp, #40	; 0x28
 8000f28:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000f2a:	f107 031c 	add.w	r3, r7, #28
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f36:	1d3b      	adds	r3, r7, #4
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
 8000f40:	60da      	str	r2, [r3, #12]
 8000f42:	611a      	str	r2, [r3, #16]
 8000f44:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000f46:	2001      	movs	r0, #1
 8000f48:	f7ff ff16 	bl	8000d78 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000f4c:	2004      	movs	r0, #4
 8000f4e:	f7ff ff13 	bl	8000d78 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3);
 8000f52:	210e      	movs	r1, #14
 8000f54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f58:	f7ff ffd6 	bl	8000f08 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_9);
 8000f5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f60:	482b      	ldr	r0, [pc, #172]	; (8001010 <MX_GPIO_Init+0xec>)
 8000f62:	f7ff ffd1 	bl	8000f08 <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8000f66:	230e      	movs	r3, #14
 8000f68:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f76:	2300      	movs	r3, #0
 8000f78:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7a:	1d3b      	adds	r3, r7, #4
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f82:	f001 fba9 	bl	80026d8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8000f86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f8a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000f90:	2300      	movs	r3, #0
 8000f92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f9c:	1d3b      	adds	r3, r7, #4
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	481b      	ldr	r0, [pc, #108]	; (8001010 <MX_GPIO_Init+0xec>)
 8000fa2:	f001 fb99 	bl	80026d8 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE4);
 8000fa6:	491b      	ldr	r1, [pc, #108]	; (8001014 <MX_GPIO_Init+0xf0>)
 8000fa8:	2002      	movs	r0, #2
 8000faa:	f7ff fefd 	bl	8000da8 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_4;
 8000fae:	2310      	movs	r3, #16
 8000fb0:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000fc8:	f107 031c 	add.w	r3, r7, #28
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f001 f941 	bl	8002254 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(GPIOC, LL_GPIO_PIN_4, LL_GPIO_PULL_NO);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2110      	movs	r1, #16
 8000fd6:	480e      	ldr	r0, [pc, #56]	; (8001010 <MX_GPIO_Init+0xec>)
 8000fd8:	f7ff ff59 	bl	8000e8e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_4, LL_GPIO_MODE_INPUT);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	2110      	movs	r1, #16
 8000fe0:	480b      	ldr	r0, [pc, #44]	; (8001010 <MX_GPIO_Init+0xec>)
 8000fe2:	f7ff ff17 	bl	8000e14 <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000fe6:	f7ff fe3d 	bl	8000c64 <__NVIC_GetPriorityGrouping>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2200      	movs	r2, #0
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff fe8d 	bl	8000d10 <NVIC_EncodePriority>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	200a      	movs	r0, #10
 8000ffc:	f7ff fe5e 	bl	8000cbc <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI4_IRQn);
 8001000:	200a      	movs	r0, #10
 8001002:	f7ff fe3d 	bl	8000c80 <__NVIC_EnableIRQ>

}
 8001006:	bf00      	nop
 8001008:	3728      	adds	r7, #40	; 0x28
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	48000800 	.word	0x48000800
 8001014:	000f0001 	.word	0x000f0001

08001018 <__NVIC_SetPriorityGrouping>:
{
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f003 0307 	and.w	r3, r3, #7
 8001026:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001028:	4b0c      	ldr	r3, [pc, #48]	; (800105c <__NVIC_SetPriorityGrouping+0x44>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800102e:	68ba      	ldr	r2, [r7, #8]
 8001030:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001034:	4013      	ands	r3, r2
 8001036:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001040:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001044:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001048:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800104a:	4a04      	ldr	r2, [pc, #16]	; (800105c <__NVIC_SetPriorityGrouping+0x44>)
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	60d3      	str	r3, [r2, #12]
}
 8001050:	bf00      	nop
 8001052:	3714      	adds	r7, #20
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	e000ed00 	.word	0xe000ed00

08001060 <__NVIC_GetPriorityGrouping>:
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001064:	4b04      	ldr	r3, [pc, #16]	; (8001078 <__NVIC_GetPriorityGrouping+0x18>)
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	0a1b      	lsrs	r3, r3, #8
 800106a:	f003 0307 	and.w	r3, r3, #7
}
 800106e:	4618      	mov	r0, r3
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <__NVIC_SetPriority>:
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	6039      	str	r1, [r7, #0]
 8001086:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108c:	2b00      	cmp	r3, #0
 800108e:	db0a      	blt.n	80010a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	b2da      	uxtb	r2, r3
 8001094:	490c      	ldr	r1, [pc, #48]	; (80010c8 <__NVIC_SetPriority+0x4c>)
 8001096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109a:	0112      	lsls	r2, r2, #4
 800109c:	b2d2      	uxtb	r2, r2
 800109e:	440b      	add	r3, r1
 80010a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80010a4:	e00a      	b.n	80010bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	4908      	ldr	r1, [pc, #32]	; (80010cc <__NVIC_SetPriority+0x50>)
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	f003 030f 	and.w	r3, r3, #15
 80010b2:	3b04      	subs	r3, #4
 80010b4:	0112      	lsls	r2, r2, #4
 80010b6:	b2d2      	uxtb	r2, r2
 80010b8:	440b      	add	r3, r1
 80010ba:	761a      	strb	r2, [r3, #24]
}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	e000e100 	.word	0xe000e100
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <NVIC_EncodePriority>:
{
 80010d0:	b480      	push	{r7}
 80010d2:	b089      	sub	sp, #36	; 0x24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	f003 0307 	and.w	r3, r3, #7
 80010e2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	f1c3 0307 	rsb	r3, r3, #7
 80010ea:	2b04      	cmp	r3, #4
 80010ec:	bf28      	it	cs
 80010ee:	2304      	movcs	r3, #4
 80010f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	3304      	adds	r3, #4
 80010f6:	2b06      	cmp	r3, #6
 80010f8:	d902      	bls.n	8001100 <NVIC_EncodePriority+0x30>
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	3b03      	subs	r3, #3
 80010fe:	e000      	b.n	8001102 <NVIC_EncodePriority+0x32>
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001104:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	43da      	mvns	r2, r3
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	401a      	ands	r2, r3
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001118:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	fa01 f303 	lsl.w	r3, r1, r3
 8001122:	43d9      	mvns	r1, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001128:	4313      	orrs	r3, r2
}
 800112a:	4618      	mov	r0, r3
 800112c:	3724      	adds	r7, #36	; 0x24
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
	...

08001138 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800113c:	4b05      	ldr	r3, [pc, #20]	; (8001154 <LL_RCC_HSI_Enable+0x1c>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a04      	ldr	r2, [pc, #16]	; (8001154 <LL_RCC_HSI_Enable+0x1c>)
 8001142:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001146:	6013      	str	r3, [r2, #0]
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	40021000 	.word	0x40021000

08001158 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 800115c:	4b07      	ldr	r3, [pc, #28]	; (800117c <LL_RCC_HSI_IsReady+0x24>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001164:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001168:	d101      	bne.n	800116e <LL_RCC_HSI_IsReady+0x16>
 800116a:	2301      	movs	r3, #1
 800116c:	e000      	b.n	8001170 <LL_RCC_HSI_IsReady+0x18>
 800116e:	2300      	movs	r3, #0
}
 8001170:	4618      	mov	r0, r3
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	40021000 	.word	0x40021000

08001180 <LL_RCC_HSI_SetCalibTrimming>:
  * @param  Value Between Min_Data = 0 and Max_Data = 31 on STM32L43x/STM32L44x/STM32L47x/STM32L48x or
  *               between Min_Data = 0 and Max_Data = 127 on other devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001188:	4b07      	ldr	r3, [pc, #28]	; (80011a8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	061b      	lsls	r3, r3, #24
 8001194:	4904      	ldr	r1, [pc, #16]	; (80011a8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001196:	4313      	orrs	r3, r2
 8001198:	604b      	str	r3, [r1, #4]
}
 800119a:	bf00      	nop
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	40021000 	.word	0x40021000

080011ac <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80011b4:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <LL_RCC_SetSysClkSource+0x24>)
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	f023 0203 	bic.w	r2, r3, #3
 80011bc:	4904      	ldr	r1, [pc, #16]	; (80011d0 <LL_RCC_SetSysClkSource+0x24>)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	608b      	str	r3, [r1, #8]
}
 80011c4:	bf00      	nop
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	40021000 	.word	0x40021000

080011d4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80011d8:	4b04      	ldr	r3, [pc, #16]	; (80011ec <LL_RCC_GetSysClkSource+0x18>)
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	f003 030c 	and.w	r3, r3, #12
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	40021000 	.word	0x40021000

080011f0 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80011f8:	4b06      	ldr	r3, [pc, #24]	; (8001214 <LL_RCC_SetAHBPrescaler+0x24>)
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001200:	4904      	ldr	r1, [pc, #16]	; (8001214 <LL_RCC_SetAHBPrescaler+0x24>)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4313      	orrs	r3, r2
 8001206:	608b      	str	r3, [r1, #8]
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	40021000 	.word	0x40021000

08001218 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001220:	4b06      	ldr	r3, [pc, #24]	; (800123c <LL_RCC_SetAPB1Prescaler+0x24>)
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001228:	4904      	ldr	r1, [pc, #16]	; (800123c <LL_RCC_SetAPB1Prescaler+0x24>)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4313      	orrs	r3, r2
 800122e:	608b      	str	r3, [r1, #8]
}
 8001230:	bf00      	nop
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	40021000 	.word	0x40021000

08001240 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001248:	4b06      	ldr	r3, [pc, #24]	; (8001264 <LL_RCC_SetAPB2Prescaler+0x24>)
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001250:	4904      	ldr	r1, [pc, #16]	; (8001264 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4313      	orrs	r3, r2
 8001256:	608b      	str	r3, [r1, #8]
}
 8001258:	bf00      	nop
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	40021000 	.word	0x40021000

08001268 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001270:	4b08      	ldr	r3, [pc, #32]	; (8001294 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001272:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001274:	4907      	ldr	r1, [pc, #28]	; (8001294 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4313      	orrs	r3, r2
 800127a:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800127c:	4b05      	ldr	r3, [pc, #20]	; (8001294 <LL_APB1_GRP1_EnableClock+0x2c>)
 800127e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	4013      	ands	r3, r2
 8001284:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001286:	68fb      	ldr	r3, [r7, #12]
}
 8001288:	bf00      	nop
 800128a:	3714      	adds	r7, #20
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	40021000 	.word	0x40021000

08001298 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001298:	b480      	push	{r7}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80012a0:	4b08      	ldr	r3, [pc, #32]	; (80012c4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80012a2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80012a4:	4907      	ldr	r1, [pc, #28]	; (80012c4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80012ac:	4b05      	ldr	r3, [pc, #20]	; (80012c4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80012ae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	4013      	ands	r3, r2
 80012b4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012b6:	68fb      	ldr	r3, [r7, #12]
}
 80012b8:	bf00      	nop
 80012ba:	3714      	adds	r7, #20
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	40021000 	.word	0x40021000

080012c8 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80012d0:	4b06      	ldr	r3, [pc, #24]	; (80012ec <LL_FLASH_SetLatency+0x24>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f023 0207 	bic.w	r2, r3, #7
 80012d8:	4904      	ldr	r1, [pc, #16]	; (80012ec <LL_FLASH_SetLatency+0x24>)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4313      	orrs	r3, r2
 80012de:	600b      	str	r3, [r1, #0]
}
 80012e0:	bf00      	nop
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	40022000 	.word	0x40022000

080012f0 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80012f4:	4b04      	ldr	r3, [pc, #16]	; (8001308 <LL_FLASH_GetLatency+0x18>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 0307 	and.w	r3, r3, #7
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	40022000 	.word	0x40022000

0800130c <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001314:	4b06      	ldr	r3, [pc, #24]	; (8001330 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800131c:	4904      	ldr	r1, [pc, #16]	; (8001330 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4313      	orrs	r3, r2
 8001322:	600b      	str	r3, [r1, #0]
}
 8001324:	bf00      	nop
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	40007000 	.word	0x40007000

08001334 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800133a:	2001      	movs	r0, #1
 800133c:	f7ff ffac 	bl	8001298 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001340:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001344:	f7ff ff90 	bl	8001268 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001348:	2003      	movs	r0, #3
 800134a:	f7ff fe65 	bl	8001018 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 800134e:	f7ff fe87 	bl	8001060 <__NVIC_GetPriorityGrouping>
 8001352:	4603      	mov	r3, r0
 8001354:	2200      	movs	r2, #0
 8001356:	210f      	movs	r1, #15
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff feb9 	bl	80010d0 <NVIC_EncodePriority>
 800135e:	4603      	mov	r3, r0
 8001360:	4619      	mov	r1, r3
 8001362:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001366:	f7ff fe89 	bl	800107c <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800136a:	f000 f811 	bl	8001390 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800136e:	f7ff fdd9 	bl	8000f24 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001372:	f000 fde3 	bl	8001f3c <MX_TIM2_Init>
  MX_DMA_Init();
 8001376:	f7ff fbaf 	bl	8000ad8 <MX_DMA_Init>
  MX_SPI3_Init();
 800137a:	f000 fb8b 	bl	8001a94 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  Sensor_Board sb;
  SB_Init(&sb);
 800137e:	463b      	mov	r3, r7
 8001380:	4618      	mov	r0, r3
 8001382:	f000 f83b 	bl	80013fc <SB_Init>
  SB_Align_Samples();
 8001386:	f000 f85b 	bl	8001440 <SB_Align_Samples>
  SB_Get_Temperature_Readings();
 800138a:	f000 f8ad 	bl	80014e8 <SB_Get_Temperature_Readings>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800138e:	e7fe      	b.n	800138e <main+0x5a>

08001390 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8001394:	2000      	movs	r0, #0
 8001396:	f7ff ff97 	bl	80012c8 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 800139a:	bf00      	nop
 800139c:	f7ff ffa8 	bl	80012f0 <LL_FLASH_GetLatency>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d1fa      	bne.n	800139c <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 80013a6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80013aa:	f7ff ffaf 	bl	800130c <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_Enable();
 80013ae:	f7ff fec3 	bl	8001138 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80013b2:	bf00      	nop
 80013b4:	f7ff fed0 	bl	8001158 <LL_RCC_HSI_IsReady>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d1fa      	bne.n	80013b4 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80013be:	2010      	movs	r0, #16
 80013c0:	f7ff fede 	bl	8001180 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 80013c4:	2001      	movs	r0, #1
 80013c6:	f7ff fef1 	bl	80011ac <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 80013ca:	bf00      	nop
 80013cc:	f7ff ff02 	bl	80011d4 <LL_RCC_GetSysClkSource>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b04      	cmp	r3, #4
 80013d4:	d1fa      	bne.n	80013cc <SystemClock_Config+0x3c>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80013d6:	2000      	movs	r0, #0
 80013d8:	f7ff ff0a 	bl	80011f0 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80013dc:	2000      	movs	r0, #0
 80013de:	f7ff ff1b 	bl	8001218 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80013e2:	2000      	movs	r0, #0
 80013e4:	f7ff ff2c 	bl	8001240 <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick(16000000);
 80013e8:	4803      	ldr	r0, [pc, #12]	; (80013f8 <SystemClock_Config+0x68>)
 80013ea:	f001 fb59 	bl	8002aa0 <LL_Init1msTick>

  LL_SetSystemCoreClock(16000000);
 80013ee:	4802      	ldr	r0, [pc, #8]	; (80013f8 <SystemClock_Config+0x68>)
 80013f0:	f001 fb64 	bl	8002abc <LL_SetSystemCoreClock>
}
 80013f4:	bf00      	nop
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	00f42400 	.word	0x00f42400

080013fc <SB_Init>:

Sensor_Board *sensor_board;
uint16_t aligned_samples[NUM_SAMPLES * 8];
float *temperature;

void SB_Init(Sensor_Board *sb) {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
	static ADS131M08 adc;
	sb->adc = &adc;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	4a09      	ldr	r2, [pc, #36]	; (800142c <SB_Init+0x30>)
 8001408:	601a      	str	r2, [r3, #0]
	static ADT7301 ts;
	sb->tmp_sensor = &ts;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a08      	ldr	r2, [pc, #32]	; (8001430 <SB_Init+0x34>)
 800140e:	605a      	str	r2, [r3, #4]
	sensor_board = sb;
 8001410:	4a08      	ldr	r2, [pc, #32]	; (8001434 <SB_Init+0x38>)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6013      	str	r3, [r2, #0]

	ADC_Init(&adc, SB_SPIx, SB_DMAx);
 8001416:	4a08      	ldr	r2, [pc, #32]	; (8001438 <SB_Init+0x3c>)
 8001418:	4908      	ldr	r1, [pc, #32]	; (800143c <SB_Init+0x40>)
 800141a:	4804      	ldr	r0, [pc, #16]	; (800142c <SB_Init+0x30>)
 800141c:	f7fe ff3e 	bl	800029c <ADC_Init>
	ADC_Start_Sampling();
 8001420:	f7fe ff6e 	bl	8000300 <ADC_Start_Sampling>
}
 8001424:	bf00      	nop
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20005c5c 	.word	0x20005c5c
 8001430:	20005c70 	.word	0x20005c70
 8001434:	20003c54 	.word	0x20003c54
 8001438:	40020400 	.word	0x40020400
 800143c:	40003c00 	.word	0x40003c00

08001440 <SB_Align_Samples>:

void SB_Align_Samples() {
 8001440:	b480      	push	{r7}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
	while (!sensor_board->adc->sampling_complete_flag);
 8001446:	bf00      	nop
 8001448:	4b25      	ldr	r3, [pc, #148]	; (80014e0 <SB_Align_Samples+0xa0>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	7c1b      	ldrb	r3, [r3, #16]
 8001450:	b2db      	uxtb	r3, r3
 8001452:	2b00      	cmp	r3, #0
 8001454:	d0f8      	beq.n	8001448 <SB_Align_Samples+0x8>

	uint32_t aligned_index = 0;
 8001456:	2300      	movs	r3, #0
 8001458:	60fb      	str	r3, [r7, #12]
	for (uint16_t i = 0; i < NUM_SAMPLES; i++) {
 800145a:	2300      	movs	r3, #0
 800145c:	817b      	strh	r3, [r7, #10]
 800145e:	e034      	b.n	80014ca <SB_Align_Samples+0x8a>
		uint32_t base_index = i * BYTES_PER_SAMPLE;
 8001460:	897a      	ldrh	r2, [r7, #10]
 8001462:	4613      	mov	r3, r2
 8001464:	011b      	lsls	r3, r3, #4
 8001466:	1a9b      	subs	r3, r3, r2
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	607b      	str	r3, [r7, #4]

		// A sample is made of 10 24-bit words. The first
		// and last word should be ignored, and others
		// truncated to 16 bits.

		for(uint8_t j = 3; j < 27; j += 3) {
 800146c:	2303      	movs	r3, #3
 800146e:	727b      	strb	r3, [r7, #9]
 8001470:	e025      	b.n	80014be <SB_Align_Samples+0x7e>
			uint8_t first_byte = sensor_board->adc->samples[base_index + j];
 8001472:	4b1b      	ldr	r3, [pc, #108]	; (80014e0 <SB_Align_Samples+0xa0>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	68da      	ldr	r2, [r3, #12]
 800147a:	7a79      	ldrb	r1, [r7, #9]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	440b      	add	r3, r1
 8001480:	4413      	add	r3, r2
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	70fb      	strb	r3, [r7, #3]
			uint8_t second_byte = sensor_board->adc->samples[base_index + j + 1];
 8001486:	4b16      	ldr	r3, [pc, #88]	; (80014e0 <SB_Align_Samples+0xa0>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	68da      	ldr	r2, [r3, #12]
 800148e:	7a79      	ldrb	r1, [r7, #9]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	440b      	add	r3, r1
 8001494:	3301      	adds	r3, #1
 8001496:	4413      	add	r3, r2
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	70bb      	strb	r3, [r7, #2]
			// third byte is ignored, we only want 16 bits

			aligned_samples[aligned_index++] = ((uint16_t) first_byte << 8) | ((uint16_t) second_byte);
 800149c:	78fb      	ldrb	r3, [r7, #3]
 800149e:	021b      	lsls	r3, r3, #8
 80014a0:	b21a      	sxth	r2, r3
 80014a2:	78bb      	ldrb	r3, [r7, #2]
 80014a4:	b21b      	sxth	r3, r3
 80014a6:	4313      	orrs	r3, r2
 80014a8:	b219      	sxth	r1, r3
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	1c5a      	adds	r2, r3, #1
 80014ae:	60fa      	str	r2, [r7, #12]
 80014b0:	b289      	uxth	r1, r1
 80014b2:	4a0c      	ldr	r2, [pc, #48]	; (80014e4 <SB_Align_Samples+0xa4>)
 80014b4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(uint8_t j = 3; j < 27; j += 3) {
 80014b8:	7a7b      	ldrb	r3, [r7, #9]
 80014ba:	3303      	adds	r3, #3
 80014bc:	727b      	strb	r3, [r7, #9]
 80014be:	7a7b      	ldrb	r3, [r7, #9]
 80014c0:	2b1a      	cmp	r3, #26
 80014c2:	d9d6      	bls.n	8001472 <SB_Align_Samples+0x32>
	for (uint16_t i = 0; i < NUM_SAMPLES; i++) {
 80014c4:	897b      	ldrh	r3, [r7, #10]
 80014c6:	3301      	adds	r3, #1
 80014c8:	817b      	strh	r3, [r7, #10]
 80014ca:	897b      	ldrh	r3, [r7, #10]
 80014cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014d0:	d3c6      	bcc.n	8001460 <SB_Align_Samples+0x20>
		}
	}
}
 80014d2:	bf00      	nop
 80014d4:	bf00      	nop
 80014d6:	3714      	adds	r7, #20
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	20003c54 	.word	0x20003c54
 80014e4:	20003c58 	.word	0x20003c58

080014e8 <SB_Get_Temperature_Readings>:

void SB_Get_Temperature_Readings() {
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
	ADT7301_Init(sensor_board->tmp_sensor, SB_SPIx);
 80014ec:	4b10      	ldr	r3, [pc, #64]	; (8001530 <SB_Get_Temperature_Readings+0x48>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	4910      	ldr	r1, [pc, #64]	; (8001534 <SB_Get_Temperature_Readings+0x4c>)
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff f811 	bl	800051c <ADT7301_Init>

	ADT7301_Wakeup(TEMP1);
 80014fa:	2000      	movs	r0, #0
 80014fc:	f7ff f90a 	bl	8000714 <ADT7301_Wakeup>
	ADT7301_Collect_Sample(TEMP1);
 8001500:	2000      	movs	r0, #0
 8001502:	f7ff f821 	bl	8000548 <ADT7301_Collect_Sample>
	ADT7301_Shutdown(TEMP1);
 8001506:	2000      	movs	r0, #0
 8001508:	f7ff f8ac 	bl	8000664 <ADT7301_Shutdown>

	ADT7301_Wakeup(TEMP2);
 800150c:	2001      	movs	r0, #1
 800150e:	f7ff f901 	bl	8000714 <ADT7301_Wakeup>
	ADT7301_Collect_Sample(TEMP2);
 8001512:	2001      	movs	r0, #1
 8001514:	f7ff f818 	bl	8000548 <ADT7301_Collect_Sample>
	ADT7301_Shutdown(TEMP2);
 8001518:	2001      	movs	r0, #1
 800151a:	f7ff f8a3 	bl	8000664 <ADT7301_Shutdown>

//	ADT7301_Wakeup(TEMP3);
//	ADT7301_Collect_Sample(TEMP3);
//	ADT7301_Shutdown(TEMP3);

	temperature = sensor_board->tmp_sensor->samples;
 800151e:	4b04      	ldr	r3, [pc, #16]	; (8001530 <SB_Get_Temperature_Readings+0x48>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	3304      	adds	r3, #4
 8001526:	4a04      	ldr	r2, [pc, #16]	; (8001538 <SB_Get_Temperature_Readings+0x50>)
 8001528:	6013      	str	r3, [r2, #0]
}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20003c54 	.word	0x20003c54
 8001534:	40003c00 	.word	0x40003c00
 8001538:	20005c58 	.word	0x20005c58

0800153c <LL_DMA_SetDataTransferDirection>:
{
 800153c:	b480      	push	{r7}
 800153e:	b087      	sub	sp, #28
 8001540:	af00      	add	r7, sp, #0
 8001542:	60f8      	str	r0, [r7, #12]
 8001544:	60b9      	str	r1, [r7, #8]
 8001546:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 800154c:	4a0e      	ldr	r2, [pc, #56]	; (8001588 <LL_DMA_SetDataTransferDirection+0x4c>)
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	4413      	add	r3, r2
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	461a      	mov	r2, r3
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	4413      	add	r3, r2
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001560:	f023 0310 	bic.w	r3, r3, #16
 8001564:	4908      	ldr	r1, [pc, #32]	; (8001588 <LL_DMA_SetDataTransferDirection+0x4c>)
 8001566:	68ba      	ldr	r2, [r7, #8]
 8001568:	440a      	add	r2, r1
 800156a:	7812      	ldrb	r2, [r2, #0]
 800156c:	4611      	mov	r1, r2
 800156e:	697a      	ldr	r2, [r7, #20]
 8001570:	440a      	add	r2, r1
 8001572:	4611      	mov	r1, r2
 8001574:	687a      	ldr	r2, [r7, #4]
 8001576:	4313      	orrs	r3, r2
 8001578:	600b      	str	r3, [r1, #0]
}
 800157a:	bf00      	nop
 800157c:	371c      	adds	r7, #28
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	08002b54 	.word	0x08002b54

0800158c <LL_DMA_SetMode>:
{
 800158c:	b480      	push	{r7}
 800158e:	b087      	sub	sp, #28
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 800159c:	4a0d      	ldr	r2, [pc, #52]	; (80015d4 <LL_DMA_SetMode+0x48>)
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	4413      	add	r3, r2
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	461a      	mov	r2, r3
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	4413      	add	r3, r2
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f023 0220 	bic.w	r2, r3, #32
 80015b0:	4908      	ldr	r1, [pc, #32]	; (80015d4 <LL_DMA_SetMode+0x48>)
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	440b      	add	r3, r1
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	4619      	mov	r1, r3
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	440b      	add	r3, r1
 80015be:	4619      	mov	r1, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	600b      	str	r3, [r1, #0]
}
 80015c6:	bf00      	nop
 80015c8:	371c      	adds	r7, #28
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	08002b54 	.word	0x08002b54

080015d8 <LL_DMA_SetPeriphIncMode>:
{
 80015d8:	b480      	push	{r7}
 80015da:	b087      	sub	sp, #28
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
    uint32_t dma_base_addr = (uint32_t)DMAx;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	617b      	str	r3, [r7, #20]
    MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 80015e8:	4a0d      	ldr	r2, [pc, #52]	; (8001620 <LL_DMA_SetPeriphIncMode+0x48>)
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	4413      	add	r3, r2
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	461a      	mov	r2, r3
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	4413      	add	r3, r2
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80015fc:	4908      	ldr	r1, [pc, #32]	; (8001620 <LL_DMA_SetPeriphIncMode+0x48>)
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	440b      	add	r3, r1
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	4619      	mov	r1, r3
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	440b      	add	r3, r1
 800160a:	4619      	mov	r1, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4313      	orrs	r3, r2
 8001610:	600b      	str	r3, [r1, #0]
}
 8001612:	bf00      	nop
 8001614:	371c      	adds	r7, #28
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	08002b54 	.word	0x08002b54

08001624 <LL_DMA_SetMemoryIncMode>:
{
 8001624:	b480      	push	{r7}
 8001626:	b087      	sub	sp, #28
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 8001634:	4a0d      	ldr	r2, [pc, #52]	; (800166c <LL_DMA_SetMemoryIncMode+0x48>)
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	4413      	add	r3, r2
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	461a      	mov	r2, r3
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	4413      	add	r3, r2
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001648:	4908      	ldr	r1, [pc, #32]	; (800166c <LL_DMA_SetMemoryIncMode+0x48>)
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	440b      	add	r3, r1
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	4619      	mov	r1, r3
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	440b      	add	r3, r1
 8001656:	4619      	mov	r1, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	4313      	orrs	r3, r2
 800165c:	600b      	str	r3, [r1, #0]
}
 800165e:	bf00      	nop
 8001660:	371c      	adds	r7, #28
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	08002b54 	.word	0x08002b54

08001670 <LL_DMA_SetPeriphSize>:
{
 8001670:	b480      	push	{r7}
 8001672:	b087      	sub	sp, #28
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	60b9      	str	r1, [r7, #8]
 800167a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE, 
 8001680:	4a0d      	ldr	r2, [pc, #52]	; (80016b8 <LL_DMA_SetPeriphSize+0x48>)
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	4413      	add	r3, r2
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	461a      	mov	r2, r3
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	4413      	add	r3, r2
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001694:	4908      	ldr	r1, [pc, #32]	; (80016b8 <LL_DMA_SetPeriphSize+0x48>)
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	440b      	add	r3, r1
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	4619      	mov	r1, r3
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	440b      	add	r3, r1
 80016a2:	4619      	mov	r1, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	600b      	str	r3, [r1, #0]
}
 80016aa:	bf00      	nop
 80016ac:	371c      	adds	r7, #28
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	08002b54 	.word	0x08002b54

080016bc <LL_DMA_SetMemorySize>:
{
 80016bc:	b480      	push	{r7}
 80016be:	b087      	sub	sp, #28
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 80016cc:	4a0d      	ldr	r2, [pc, #52]	; (8001704 <LL_DMA_SetMemorySize+0x48>)
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	4413      	add	r3, r2
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	461a      	mov	r2, r3
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	4413      	add	r3, r2
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80016e0:	4908      	ldr	r1, [pc, #32]	; (8001704 <LL_DMA_SetMemorySize+0x48>)
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	440b      	add	r3, r1
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	4619      	mov	r1, r3
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	440b      	add	r3, r1
 80016ee:	4619      	mov	r1, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	600b      	str	r3, [r1, #0]
}
 80016f6:	bf00      	nop
 80016f8:	371c      	adds	r7, #28
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	08002b54 	.word	0x08002b54

08001708 <LL_DMA_SetChannelPriorityLevel>:
{
 8001708:	b480      	push	{r7}
 800170a:	b087      	sub	sp, #28
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 8001718:	4a0d      	ldr	r2, [pc, #52]	; (8001750 <LL_DMA_SetChannelPriorityLevel+0x48>)
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	4413      	add	r3, r2
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	461a      	mov	r2, r3
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	4413      	add	r3, r2
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800172c:	4908      	ldr	r1, [pc, #32]	; (8001750 <LL_DMA_SetChannelPriorityLevel+0x48>)
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	440b      	add	r3, r1
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	4619      	mov	r1, r3
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	440b      	add	r3, r1
 800173a:	4619      	mov	r1, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4313      	orrs	r3, r2
 8001740:	600b      	str	r3, [r1, #0]
}
 8001742:	bf00      	nop
 8001744:	371c      	adds	r7, #28
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	08002b54 	.word	0x08002b54

08001754 <LL_DMA_SetPeriphRequest>:
{
 8001754:	b480      	push	{r7}
 8001756:	b089      	sub	sp, #36	; 0x24
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Request_TypeDef *)((uint32_t)((uint32_t)DMAx + DMA_CSELR_OFFSET)))->CSELR,
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	33a8      	adds	r3, #168	; 0xa8
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	210f      	movs	r1, #15
 800176c:	fa01 f303 	lsl.w	r3, r1, r3
 8001770:	43db      	mvns	r3, r3
 8001772:	401a      	ands	r2, r3
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	210f      	movs	r1, #15
 800177a:	fa01 f303 	lsl.w	r3, r1, r3
 800177e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	fa93 f3a3 	rbit	r3, r3
 8001786:	617b      	str	r3, [r7, #20]
  return result;
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d101      	bne.n	8001796 <LL_DMA_SetPeriphRequest+0x42>
    return 32U;
 8001792:	2320      	movs	r3, #32
 8001794:	e003      	b.n	800179e <LL_DMA_SetPeriphRequest+0x4a>
  return __builtin_clz(value);
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	fab3 f383 	clz	r3, r3
 800179c:	b2db      	uxtb	r3, r3
 800179e:	4619      	mov	r1, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	408b      	lsls	r3, r1
 80017a4:	68f9      	ldr	r1, [r7, #12]
 80017a6:	31a8      	adds	r1, #168	; 0xa8
 80017a8:	4313      	orrs	r3, r2
 80017aa:	600b      	str	r3, [r1, #0]
}
 80017ac:	bf00      	nop
 80017ae:	3724      	adds	r7, #36	; 0x24
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <LL_AHB2_GRP1_EnableClock>:
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80017c0:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80017c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017c4:	4907      	ldr	r1, [pc, #28]	; (80017e4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80017cc:	4b05      	ldr	r3, [pc, #20]	; (80017e4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80017ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	4013      	ands	r3, r2
 80017d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017d6:	68fb      	ldr	r3, [r7, #12]
}
 80017d8:	bf00      	nop
 80017da:	3714      	adds	r7, #20
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	40021000 	.word	0x40021000

080017e8 <LL_APB1_GRP1_EnableClock>:
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80017f0:	4b08      	ldr	r3, [pc, #32]	; (8001814 <LL_APB1_GRP1_EnableClock+0x2c>)
 80017f2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80017f4:	4907      	ldr	r1, [pc, #28]	; (8001814 <LL_APB1_GRP1_EnableClock+0x2c>)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80017fc:	4b05      	ldr	r3, [pc, #20]	; (8001814 <LL_APB1_GRP1_EnableClock+0x2c>)
 80017fe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	4013      	ands	r3, r2
 8001804:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001806:	68fb      	ldr	r3, [r7, #12]
}
 8001808:	bf00      	nop
 800180a:	3714      	adds	r7, #20
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr
 8001814:	40021000 	.word	0x40021000

08001818 <LL_SPI_Enable>:
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	601a      	str	r2, [r3, #0]
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <LL_SPI_Disable>:
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	601a      	str	r2, [r3, #0]
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <LL_SPI_SetStandard>:
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f023 0210 	bic.w	r2, r3, #16
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	431a      	orrs	r2, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	605a      	str	r2, [r3, #4]
}
 8001872:	bf00      	nop
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <LL_SPI_SetClockPhase>:
{
 800187e:	b480      	push	{r7}
 8001880:	b083      	sub	sp, #12
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
 8001886:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPHA, ClockPhase);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f023 0201 	bic.w	r2, r3, #1
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	431a      	orrs	r2, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	601a      	str	r2, [r3, #0]
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <LL_SPI_SetClockPolarity>:
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f023 0202 	bic.w	r2, r3, #2
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	431a      	orrs	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	601a      	str	r2, [r3, #0]
}
 80018be:	bf00      	nop
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr

080018ca <LL_SPI_DisableNSSPulseMgt>:
{
 80018ca:	b480      	push	{r7}
 80018cc:	b083      	sub	sp, #12
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f023 0208 	bic.w	r2, r3, #8
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	605a      	str	r2, [r3, #4]
}
 80018de:	bf00      	nop
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr

080018ea <LL_SPI_IsActiveFlag_RXNE>:
{
 80018ea:	b480      	push	{r7}
 80018ec:	b083      	sub	sp, #12
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d101      	bne.n	8001902 <LL_SPI_IsActiveFlag_RXNE+0x18>
 80018fe:	2301      	movs	r3, #1
 8001900:	e000      	b.n	8001904 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8001902:	2300      	movs	r3, #0
}
 8001904:	4618      	mov	r0, r3
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <LL_SPI_IsActiveFlag_TXE>:
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	f003 0302 	and.w	r3, r3, #2
 8001920:	2b02      	cmp	r3, #2
 8001922:	d101      	bne.n	8001928 <LL_SPI_IsActiveFlag_TXE+0x18>
 8001924:	2301      	movs	r3, #1
 8001926:	e000      	b.n	800192a <LL_SPI_IsActiveFlag_TXE+0x1a>
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr

08001936 <LL_SPI_IsActiveFlag_BSY>:
{
 8001936:	b480      	push	{r7}
 8001938:	b083      	sub	sp, #12
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001946:	2b80      	cmp	r3, #128	; 0x80
 8001948:	d101      	bne.n	800194e <LL_SPI_IsActiveFlag_BSY+0x18>
 800194a:	2301      	movs	r3, #1
 800194c:	e000      	b.n	8001950 <LL_SPI_IsActiveFlag_BSY+0x1a>
 800194e:	2300      	movs	r3, #0
}
 8001950:	4618      	mov	r0, r3
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <LL_SPI_GetTxFIFOLevel>:
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(SPIx->SR, SPI_SR_FTLVL));
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
}
 800196c:	4618      	mov	r0, r3
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <LL_SPI_EnableIT_RXNE>:
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_RXNEIE);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	605a      	str	r2, [r3, #4]
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <LL_SPI_EnableIT_TXE>:
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	605a      	str	r2, [r3, #4]
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <LL_SPI_EnableDMAReq_RX>:
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_RXDMAEN);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f043 0201 	orr.w	r2, r3, #1
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	605a      	str	r2, [r3, #4]
}
 80019cc:	bf00      	nop
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <LL_SPI_DisableDMAReq_RX>:
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_RXDMAEN);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f023 0201 	bic.w	r2, r3, #1
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	605a      	str	r2, [r3, #4]
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <LL_SPI_EnableDMAReq_TX>:
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_TXDMAEN);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f043 0202 	orr.w	r2, r3, #2
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	605a      	str	r2, [r3, #4]
}
 8001a0c:	bf00      	nop
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <LL_SPI_DisableDMAReq_TX>:
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXDMAEN);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f023 0202 	bic.w	r2, r3, #2
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	605a      	str	r2, [r3, #4]
}
 8001a2c:	bf00      	nop
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	330c      	adds	r3, #12
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	b2db      	uxtb	r3, r3
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	330c      	adds	r3, #12
 8001a64:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	78fa      	ldrb	r2, [r7, #3]
 8001a6a:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8001a6c:	bf00      	nop
 8001a6e:	3714      	adds	r7, #20
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <LL_GPIO_ResetOutputPin>:
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	683a      	ldr	r2, [r7, #0]
 8001a86:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a88:	bf00      	nop
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <MX_SPI3_Init>:

/* USER CODE END 0 */

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b090      	sub	sp, #64	; 0x40
 8001a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001a9a:	f107 0318 	add.w	r3, r7, #24
 8001a9e:	2228      	movs	r2, #40	; 0x28
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f001 f83e 	bl	8002b24 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa8:	463b      	mov	r3, r7
 8001aaa:	2200      	movs	r2, #0
 8001aac:	601a      	str	r2, [r3, #0]
 8001aae:	605a      	str	r2, [r3, #4]
 8001ab0:	609a      	str	r2, [r3, #8]
 8001ab2:	60da      	str	r2, [r3, #12]
 8001ab4:	611a      	str	r2, [r3, #16]
 8001ab6:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8001ab8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001abc:	f7ff fe94 	bl	80017e8 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8001ac0:	2004      	movs	r0, #4
 8001ac2:	f7ff fe79 	bl	80017b8 <LL_AHB2_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PC10   ------> SPI3_SCK
  PC11   ------> SPI3_MISO
  PC12   ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 8001ac6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001aca:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001acc:	2302      	movs	r3, #2
 8001ace:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8001adc:	2306      	movs	r3, #6
 8001ade:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ae0:	463b      	mov	r3, r7
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	483d      	ldr	r0, [pc, #244]	; (8001bdc <MX_SPI3_Init+0x148>)
 8001ae6:	f000 fdf7 	bl	80026d8 <LL_GPIO_Init>

  /* SPI3 DMA Init */

  /* SPI3_RX Init */
  LL_DMA_SetPeriphRequest(DMA2, LL_DMA_CHANNEL_1, LL_DMA_REQUEST_3);
 8001aea:	2203      	movs	r2, #3
 8001aec:	2100      	movs	r1, #0
 8001aee:	483c      	ldr	r0, [pc, #240]	; (8001be0 <MX_SPI3_Init+0x14c>)
 8001af0:	f7ff fe30 	bl	8001754 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8001af4:	2200      	movs	r2, #0
 8001af6:	2100      	movs	r1, #0
 8001af8:	4839      	ldr	r0, [pc, #228]	; (8001be0 <MX_SPI3_Init+0x14c>)
 8001afa:	f7ff fd1f 	bl	800153c <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA2, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_LOW);
 8001afe:	2200      	movs	r2, #0
 8001b00:	2100      	movs	r1, #0
 8001b02:	4837      	ldr	r0, [pc, #220]	; (8001be0 <MX_SPI3_Init+0x14c>)
 8001b04:	f7ff fe00 	bl	8001708 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_CHANNEL_1, LL_DMA_MODE_NORMAL);
 8001b08:	2200      	movs	r2, #0
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	4834      	ldr	r0, [pc, #208]	; (8001be0 <MX_SPI3_Init+0x14c>)
 8001b0e:	f7ff fd3d 	bl	800158c <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 8001b12:	2200      	movs	r2, #0
 8001b14:	2100      	movs	r1, #0
 8001b16:	4832      	ldr	r0, [pc, #200]	; (8001be0 <MX_SPI3_Init+0x14c>)
 8001b18:	f7ff fd5e 	bl	80015d8 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 8001b1c:	2280      	movs	r2, #128	; 0x80
 8001b1e:	2100      	movs	r1, #0
 8001b20:	482f      	ldr	r0, [pc, #188]	; (8001be0 <MX_SPI3_Init+0x14c>)
 8001b22:	f7ff fd7f 	bl	8001624 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_BYTE);
 8001b26:	2200      	movs	r2, #0
 8001b28:	2100      	movs	r1, #0
 8001b2a:	482d      	ldr	r0, [pc, #180]	; (8001be0 <MX_SPI3_Init+0x14c>)
 8001b2c:	f7ff fda0 	bl	8001670 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_BYTE);
 8001b30:	2200      	movs	r2, #0
 8001b32:	2100      	movs	r1, #0
 8001b34:	482a      	ldr	r0, [pc, #168]	; (8001be0 <MX_SPI3_Init+0x14c>)
 8001b36:	f7ff fdc1 	bl	80016bc <LL_DMA_SetMemorySize>

  /* SPI3_TX Init */
  LL_DMA_SetPeriphRequest(DMA2, LL_DMA_CHANNEL_2, LL_DMA_REQUEST_3);
 8001b3a:	2203      	movs	r2, #3
 8001b3c:	2101      	movs	r1, #1
 8001b3e:	4828      	ldr	r0, [pc, #160]	; (8001be0 <MX_SPI3_Init+0x14c>)
 8001b40:	f7ff fe08 	bl	8001754 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_CHANNEL_2, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8001b44:	2210      	movs	r2, #16
 8001b46:	2101      	movs	r1, #1
 8001b48:	4825      	ldr	r0, [pc, #148]	; (8001be0 <MX_SPI3_Init+0x14c>)
 8001b4a:	f7ff fcf7 	bl	800153c <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA2, LL_DMA_CHANNEL_2, LL_DMA_PRIORITY_LOW);
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2101      	movs	r1, #1
 8001b52:	4823      	ldr	r0, [pc, #140]	; (8001be0 <MX_SPI3_Init+0x14c>)
 8001b54:	f7ff fdd8 	bl	8001708 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_CHANNEL_2, LL_DMA_MODE_NORMAL);
 8001b58:	2200      	movs	r2, #0
 8001b5a:	2101      	movs	r1, #1
 8001b5c:	4820      	ldr	r0, [pc, #128]	; (8001be0 <MX_SPI3_Init+0x14c>)
 8001b5e:	f7ff fd15 	bl	800158c <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_CHANNEL_2, LL_DMA_PERIPH_NOINCREMENT);
 8001b62:	2200      	movs	r2, #0
 8001b64:	2101      	movs	r1, #1
 8001b66:	481e      	ldr	r0, [pc, #120]	; (8001be0 <MX_SPI3_Init+0x14c>)
 8001b68:	f7ff fd36 	bl	80015d8 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_CHANNEL_2, LL_DMA_MEMORY_INCREMENT);
 8001b6c:	2280      	movs	r2, #128	; 0x80
 8001b6e:	2101      	movs	r1, #1
 8001b70:	481b      	ldr	r0, [pc, #108]	; (8001be0 <MX_SPI3_Init+0x14c>)
 8001b72:	f7ff fd57 	bl	8001624 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_CHANNEL_2, LL_DMA_PDATAALIGN_BYTE);
 8001b76:	2200      	movs	r2, #0
 8001b78:	2101      	movs	r1, #1
 8001b7a:	4819      	ldr	r0, [pc, #100]	; (8001be0 <MX_SPI3_Init+0x14c>)
 8001b7c:	f7ff fd78 	bl	8001670 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_CHANNEL_2, LL_DMA_MDATAALIGN_BYTE);
 8001b80:	2200      	movs	r2, #0
 8001b82:	2101      	movs	r1, #1
 8001b84:	4816      	ldr	r0, [pc, #88]	; (8001be0 <MX_SPI3_Init+0x14c>)
 8001b86:	f7ff fd99 	bl	80016bc <LL_DMA_SetMemorySize>

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001b8e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001b92:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001b94:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001b98:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001ba2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV32;
 8001ba8:	2320      	movs	r3, #32
 8001baa:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001bac:	2300      	movs	r3, #0
 8001bae:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 8001bb4:	2307      	movs	r3, #7
 8001bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 8001bb8:	f107 0318 	add.w	r3, r7, #24
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4809      	ldr	r0, [pc, #36]	; (8001be4 <MX_SPI3_Init+0x150>)
 8001bc0:	f000 fe2e 	bl	8002820 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	4807      	ldr	r0, [pc, #28]	; (8001be4 <MX_SPI3_Init+0x150>)
 8001bc8:	f7ff fe46 	bl	8001858 <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI3);
 8001bcc:	4805      	ldr	r0, [pc, #20]	; (8001be4 <MX_SPI3_Init+0x150>)
 8001bce:	f7ff fe7c 	bl	80018ca <LL_SPI_DisableNSSPulseMgt>
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001bd2:	bf00      	nop
 8001bd4:	3740      	adds	r7, #64	; 0x40
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	48000800 	.word	0x48000800
 8001be0:	40020400 	.word	0x40020400
 8001be4:	40003c00 	.word	0x40003c00

08001be8 <SPI_Enable_DMA_Rx_Request>:

/* USER CODE BEGIN 1 */

void SPI_Enable_DMA_Rx_Request(SPI_TypeDef *SPIx) {
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
	LL_SPI_EnableDMAReq_RX(SPIx);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f7ff fee1 	bl	80019b8 <LL_SPI_EnableDMAReq_RX>
}
 8001bf6:	bf00      	nop
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <SPI_Enable_DMA_Tx_Request>:

void SPI_Enable_DMA_Tx_Request(SPI_TypeDef *SPIx) {
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b082      	sub	sp, #8
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
	LL_SPI_EnableDMAReq_TX(SPIx);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f7ff fef6 	bl	80019f8 <LL_SPI_EnableDMAReq_TX>
}
 8001c0c:	bf00      	nop
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <SPI_Disable_DMA_Requests>:

void SPI_Disable_DMA_Requests(SPI_TypeDef *SPIx) {
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
	LL_SPI_DisableDMAReq_RX(SPIx);
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f7ff fedb 	bl	80019d8 <LL_SPI_DisableDMAReq_RX>
	LL_SPI_DisableDMAReq_TX(SPIx);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f7ff fef8 	bl	8001a18 <LL_SPI_DisableDMAReq_TX>
}
 8001c28:	bf00      	nop
 8001c2a:	3708      	adds	r7, #8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <SPI_Enable_RXNE_TXE_Interrupts>:

void SPI_Enable_RXNE_TXE_Interrupts(SPI_TypeDef *SPIx) {
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
	LL_SPI_EnableIT_RXNE(SPIx);
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f7ff fe9d 	bl	8001978 <LL_SPI_EnableIT_RXNE>
	LL_SPI_EnableIT_TXE(SPIx);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f7ff feaa 	bl	8001998 <LL_SPI_EnableIT_TXE>
}
 8001c44:	bf00      	nop
 8001c46:	3708      	adds	r7, #8
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <SPI_Start_Transfer>:

void SPI_Start_Transfer(SPI_TypeDef *SPIx) {
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
	LL_GPIO_ResetOutputPin(ADC_CS_GPIOx, ADC_CS_PIN);
 8001c54:	2102      	movs	r1, #2
 8001c56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c5a:	f7ff ff0d 	bl	8001a78 <LL_GPIO_ResetOutputPin>
	LL_SPI_Enable(SPIx);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f7ff fdda 	bl	8001818 <LL_SPI_Enable>
}
 8001c64:	bf00      	nop
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <SPI_TransmitReceive>:


void SPI_TransmitReceive(SPI_TypeDef *SPIx, uint8_t len, uint8_t *tx_buffer, uint8_t *rx_buffer) {
 8001c6c:	b590      	push	{r4, r7, lr}
 8001c6e:	b087      	sub	sp, #28
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	607a      	str	r2, [r7, #4]
 8001c76:	603b      	str	r3, [r7, #0]
 8001c78:	460b      	mov	r3, r1
 8001c7a:	72fb      	strb	r3, [r7, #11]
	LL_SPI_Enable(SPIx);
 8001c7c:	68f8      	ldr	r0, [r7, #12]
 8001c7e:	f7ff fdcb 	bl	8001818 <LL_SPI_Enable>

	LL_SPI_TransmitData8(SPIx, tx_buffer[0]);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	4619      	mov	r1, r3
 8001c88:	68f8      	ldr	r0, [r7, #12]
 8001c8a:	f7ff fee3 	bl	8001a54 <LL_SPI_TransmitData8>

	for (int i = 0; i < len - 1; i++) {
 8001c8e:	2300      	movs	r3, #0
 8001c90:	617b      	str	r3, [r7, #20]
 8001c92:	e021      	b.n	8001cd8 <SPI_TransmitReceive+0x6c>
	  while ( !LL_SPI_IsActiveFlag_TXE(SPIx) ); // wait until TXE is set
 8001c94:	bf00      	nop
 8001c96:	68f8      	ldr	r0, [r7, #12]
 8001c98:	f7ff fe3a 	bl	8001910 <LL_SPI_IsActiveFlag_TXE>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d0f9      	beq.n	8001c96 <SPI_TransmitReceive+0x2a>
	  LL_SPI_TransmitData8(SPIx, tx_buffer[i + 1]);
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	4413      	add	r3, r2
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	4619      	mov	r1, r3
 8001cae:	68f8      	ldr	r0, [r7, #12]
 8001cb0:	f7ff fed0 	bl	8001a54 <LL_SPI_TransmitData8>
	  while ( !LL_SPI_IsActiveFlag_RXNE(SPIx) ); // wait until RXNE is set
 8001cb4:	bf00      	nop
 8001cb6:	68f8      	ldr	r0, [r7, #12]
 8001cb8:	f7ff fe17 	bl	80018ea <LL_SPI_IsActiveFlag_RXNE>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d0f9      	beq.n	8001cb6 <SPI_TransmitReceive+0x4a>
	  rx_buffer[i] = LL_SPI_ReceiveData8(SPIx); // read DR (clears RXNE)
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	683a      	ldr	r2, [r7, #0]
 8001cc6:	18d4      	adds	r4, r2, r3
 8001cc8:	68f8      	ldr	r0, [r7, #12]
 8001cca:	f7ff feb5 	bl	8001a38 <LL_SPI_ReceiveData8>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	7023      	strb	r3, [r4, #0]
	for (int i = 0; i < len - 1; i++) {
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	617b      	str	r3, [r7, #20]
 8001cd8:	7afb      	ldrb	r3, [r7, #11]
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	697a      	ldr	r2, [r7, #20]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	dbd8      	blt.n	8001c94 <SPI_TransmitReceive+0x28>
	}

	while ( !LL_SPI_IsActiveFlag_RXNE(SPIx) ); // wait until RXNE is set
 8001ce2:	bf00      	nop
 8001ce4:	68f8      	ldr	r0, [r7, #12]
 8001ce6:	f7ff fe00 	bl	80018ea <LL_SPI_IsActiveFlag_RXNE>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d0f9      	beq.n	8001ce4 <SPI_TransmitReceive+0x78>
	rx_buffer[len - 1] = LL_SPI_ReceiveData8(SPIx); // read DR (clears RXNE)
 8001cf0:	7afb      	ldrb	r3, [r7, #11]
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	683a      	ldr	r2, [r7, #0]
 8001cf6:	18d4      	adds	r4, r2, r3
 8001cf8:	68f8      	ldr	r0, [r7, #12]
 8001cfa:	f7ff fe9d 	bl	8001a38 <LL_SPI_ReceiveData8>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	7023      	strb	r3, [r4, #0]
}
 8001d02:	bf00      	nop
 8001d04:	371c      	adds	r7, #28
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd90      	pop	{r4, r7, pc}

08001d0a <SPI_Disable>:

void SPI_Disable(SPI_TypeDef *SPIx) {
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b082      	sub	sp, #8
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
	while (LL_SPI_GetTxFIFOLevel(SPIx) != LL_SPI_TX_FIFO_EMPTY); // wait for TX FIFO to become empty
 8001d12:	bf00      	nop
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f7ff fe21 	bl	800195c <LL_SPI_GetTxFIFOLevel>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d1f9      	bne.n	8001d14 <SPI_Disable+0xa>
	while (LL_SPI_IsActiveFlag_BSY(SPIx)); // wait for BSY flag to go low
 8001d20:	bf00      	nop
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f7ff fe07 	bl	8001936 <LL_SPI_IsActiveFlag_BSY>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1f9      	bne.n	8001d22 <SPI_Disable+0x18>
	LL_SPI_Disable(SPIx);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f7ff fd82 	bl	8001838 <LL_SPI_Disable>
}
 8001d34:	bf00      	nop
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <SPI_Set_Mode>:

void SPI_Set_Mode(SPI_mode mode, SPI_TypeDef *SPIx) {
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	4603      	mov	r3, r0
 8001d44:	6039      	str	r1, [r7, #0]
 8001d46:	71fb      	strb	r3, [r7, #7]
	if (mode == CPOL1_CPHA1) {
 8001d48:	79fb      	ldrb	r3, [r7, #7]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d108      	bne.n	8001d60 <SPI_Set_Mode+0x24>
		LL_SPI_SetClockPolarity(SPIx, LL_SPI_POLARITY_HIGH);
 8001d4e:	2102      	movs	r1, #2
 8001d50:	6838      	ldr	r0, [r7, #0]
 8001d52:	f7ff fda7 	bl	80018a4 <LL_SPI_SetClockPolarity>
		LL_SPI_SetClockPhase(SPIx, LL_SPI_PHASE_2EDGE);
 8001d56:	2101      	movs	r1, #1
 8001d58:	6838      	ldr	r0, [r7, #0]
 8001d5a:	f7ff fd90 	bl	800187e <LL_SPI_SetClockPhase>
	} else if (mode == CPOL0_CPHA1) {
		LL_SPI_SetClockPolarity(SPIx, LL_SPI_POLARITY_LOW);
		LL_SPI_SetClockPhase(SPIx, LL_SPI_PHASE_2EDGE);
	}
}
 8001d5e:	e00a      	b.n	8001d76 <SPI_Set_Mode+0x3a>
	} else if (mode == CPOL0_CPHA1) {
 8001d60:	79fb      	ldrb	r3, [r7, #7]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d107      	bne.n	8001d76 <SPI_Set_Mode+0x3a>
		LL_SPI_SetClockPolarity(SPIx, LL_SPI_POLARITY_LOW);
 8001d66:	2100      	movs	r1, #0
 8001d68:	6838      	ldr	r0, [r7, #0]
 8001d6a:	f7ff fd9b 	bl	80018a4 <LL_SPI_SetClockPolarity>
		LL_SPI_SetClockPhase(SPIx, LL_SPI_PHASE_2EDGE);
 8001d6e:	2101      	movs	r1, #1
 8001d70:	6838      	ldr	r0, [r7, #0]
 8001d72:	f7ff fd84 	bl	800187e <LL_SPI_SetClockPhase>
}
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
	...

08001d80 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8001d88:	4b07      	ldr	r3, [pc, #28]	; (8001da8 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8001d8a:	695a      	ldr	r2, [r3, #20]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d101      	bne.n	8001d9a <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8001d96:	2301      	movs	r3, #1
 8001d98:	e000      	b.n	8001d9c <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8001d9a:	2300      	movs	r3, #0
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr
 8001da8:	40010400 	.word	0x40010400

08001dac <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8001db4:	4a04      	ldr	r2, [pc, #16]	; (8001dc8 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6153      	str	r3, [r2, #20]
}
 8001dba:	bf00      	nop
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	40010400 	.word	0x40010400

08001dcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dd0:	e7fe      	b.n	8001dd0 <NMI_Handler+0x4>

08001dd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dd6:	e7fe      	b.n	8001dd6 <HardFault_Handler+0x4>

08001dd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ddc:	e7fe      	b.n	8001ddc <MemManage_Handler+0x4>

08001dde <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dde:	b480      	push	{r7}
 8001de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001de2:	e7fe      	b.n	8001de2 <BusFault_Handler+0x4>

08001de4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001de8:	e7fe      	b.n	8001de8 <UsageFault_Handler+0x4>

08001dea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dea:	b480      	push	{r7}
 8001dec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dee:	bf00      	nop
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dfc:	bf00      	nop
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr

08001e06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e06:	b480      	push	{r7}
 8001e08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e0a:	bf00      	nop
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e18:	bf00      	nop
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr

08001e22 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_4) != RESET)
 8001e26:	2010      	movs	r0, #16
 8001e28:	f7ff ffaa 	bl	8001d80 <LL_EXTI_IsActiveFlag_0_31>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d004      	beq.n	8001e3c <EXTI4_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_4);
 8001e32:	2010      	movs	r0, #16
 8001e34:	f7ff ffba 	bl	8001dac <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_4 */
    ADC_DRDY_interrupt_handler();
 8001e38:	f7fe faae 	bl	8000398 <ADC_DRDY_interrupt_handler>
    /* USER CODE END LL_EXTI_LINE_4 */
  }
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001e3c:	bf00      	nop
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */
	DMA_Transfer_Complete_RX_interrupt_handler();
 8001e44:	f7fe feb8 	bl	8000bb8 <DMA_Transfer_Complete_RX_interrupt_handler>
  /* USER CODE END DMA2_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8001e48:	bf00      	nop
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */
	DMA_Transfer_Complete_TX_interrupt_handler();
 8001e50:	f7fe fed2 	bl	8000bf8 <DMA_Transfer_Complete_TX_interrupt_handler>
  /* USER CODE END DMA2_Channel2_IRQn 0 */

  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8001e54:	bf00      	nop
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001e5c:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <SystemInit+0x20>)
 8001e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e62:	4a05      	ldr	r2, [pc, #20]	; (8001e78 <SystemInit+0x20>)
 8001e64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001e6c:	bf00      	nop
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	e000ed00 	.word	0xe000ed00

08001e7c <LL_APB1_GRP1_EnableClock>:
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001e84:	4b08      	ldr	r3, [pc, #32]	; (8001ea8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001e86:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001e88:	4907      	ldr	r1, [pc, #28]	; (8001ea8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001e90:	4b05      	ldr	r3, [pc, #20]	; (8001ea8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001e92:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4013      	ands	r3, r2
 8001e98:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
}
 8001e9c:	bf00      	nop
 8001e9e:	3714      	adds	r7, #20
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr
 8001ea8:	40021000 	.word	0x40021000

08001eac <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	601a      	str	r2, [r3, #0]
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8001ede:	f023 0307 	bic.w	r3, r3, #7
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	431a      	orrs	r2, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	609a      	str	r2, [r3, #8]
}
 8001eea:	bf00      	nop
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr

08001ef6 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	b083      	sub	sp, #12
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
 8001efe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	431a      	orrs	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	605a      	str	r2, [r3, #4]
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	609a      	str	r2, [r3, #8]
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001f42:	1d3b      	adds	r3, r7, #4
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	605a      	str	r2, [r3, #4]
 8001f4a:	609a      	str	r2, [r3, #8]
 8001f4c:	60da      	str	r2, [r3, #12]
 8001f4e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8001f50:	2001      	movs	r0, #1
 8001f52:	f7ff ff93 	bl	8001e7c <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8001f56:	2300      	movs	r3, #0
 8001f58:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 16;
 8001f5e:	2310      	movs	r3, #16
 8001f60:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001f62:	2300      	movs	r3, #0
 8001f64:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8001f66:	1d3b      	adds	r3, r7, #4
 8001f68:	4619      	mov	r1, r3
 8001f6a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001f6e:	f000 fce9 	bl	8002944 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8001f72:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001f76:	f7ff ff99 	bl	8001eac <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001f80:	f7ff ffa4 	bl	8001ecc <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8001f84:	2100      	movs	r1, #0
 8001f86:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001f8a:	f7ff ffb4 	bl	8001ef6 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8001f8e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001f92:	f7ff ffc3 	bl	8001f1c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001f96:	bf00      	nop
 8001f98:	3718      	adds	r7, #24
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
	...

08001fa0 <Reset_Handler>:
 8001fa0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fd8 <LoopForever+0x2>
 8001fa4:	f7ff ff58 	bl	8001e58 <SystemInit>
 8001fa8:	480c      	ldr	r0, [pc, #48]	; (8001fdc <LoopForever+0x6>)
 8001faa:	490d      	ldr	r1, [pc, #52]	; (8001fe0 <LoopForever+0xa>)
 8001fac:	4a0d      	ldr	r2, [pc, #52]	; (8001fe4 <LoopForever+0xe>)
 8001fae:	2300      	movs	r3, #0
 8001fb0:	e002      	b.n	8001fb8 <LoopCopyDataInit>

08001fb2 <CopyDataInit>:
 8001fb2:	58d4      	ldr	r4, [r2, r3]
 8001fb4:	50c4      	str	r4, [r0, r3]
 8001fb6:	3304      	adds	r3, #4

08001fb8 <LoopCopyDataInit>:
 8001fb8:	18c4      	adds	r4, r0, r3
 8001fba:	428c      	cmp	r4, r1
 8001fbc:	d3f9      	bcc.n	8001fb2 <CopyDataInit>
 8001fbe:	4a0a      	ldr	r2, [pc, #40]	; (8001fe8 <LoopForever+0x12>)
 8001fc0:	4c0a      	ldr	r4, [pc, #40]	; (8001fec <LoopForever+0x16>)
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	e001      	b.n	8001fca <LoopFillZerobss>

08001fc6 <FillZerobss>:
 8001fc6:	6013      	str	r3, [r2, #0]
 8001fc8:	3204      	adds	r2, #4

08001fca <LoopFillZerobss>:
 8001fca:	42a2      	cmp	r2, r4
 8001fcc:	d3fb      	bcc.n	8001fc6 <FillZerobss>
 8001fce:	f000 fd85 	bl	8002adc <__libc_init_array>
 8001fd2:	f7ff f9af 	bl	8001334 <main>

08001fd6 <LoopForever>:
 8001fd6:	e7fe      	b.n	8001fd6 <LoopForever>
 8001fd8:	20018000 	.word	0x20018000
 8001fdc:	20000000 	.word	0x20000000
 8001fe0:	20000004 	.word	0x20000004
 8001fe4:	08002b64 	.word	0x08002b64
 8001fe8:	20000004 	.word	0x20000004
 8001fec:	20005c80 	.word	0x20005c80

08001ff0 <ADC1_2_IRQHandler>:
 8001ff0:	e7fe      	b.n	8001ff0 <ADC1_2_IRQHandler>
	...

08001ff4 <LL_EXTI_EnableIT_0_31>:
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001ffc:	4b05      	ldr	r3, [pc, #20]	; (8002014 <LL_EXTI_EnableIT_0_31+0x20>)
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	4904      	ldr	r1, [pc, #16]	; (8002014 <LL_EXTI_EnableIT_0_31+0x20>)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4313      	orrs	r3, r2
 8002006:	600b      	str	r3, [r1, #0]
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr
 8002014:	40010400 	.word	0x40010400

08002018 <LL_EXTI_EnableIT_32_63>:
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002020:	4b05      	ldr	r3, [pc, #20]	; (8002038 <LL_EXTI_EnableIT_32_63+0x20>)
 8002022:	6a1a      	ldr	r2, [r3, #32]
 8002024:	4904      	ldr	r1, [pc, #16]	; (8002038 <LL_EXTI_EnableIT_32_63+0x20>)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4313      	orrs	r3, r2
 800202a:	620b      	str	r3, [r1, #32]
}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr
 8002038:	40010400 	.word	0x40010400

0800203c <LL_EXTI_DisableIT_0_31>:
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8002044:	4b06      	ldr	r3, [pc, #24]	; (8002060 <LL_EXTI_DisableIT_0_31+0x24>)
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	43db      	mvns	r3, r3
 800204c:	4904      	ldr	r1, [pc, #16]	; (8002060 <LL_EXTI_DisableIT_0_31+0x24>)
 800204e:	4013      	ands	r3, r2
 8002050:	600b      	str	r3, [r1, #0]
}
 8002052:	bf00      	nop
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	40010400 	.word	0x40010400

08002064 <LL_EXTI_DisableIT_32_63>:
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800206c:	4b06      	ldr	r3, [pc, #24]	; (8002088 <LL_EXTI_DisableIT_32_63+0x24>)
 800206e:	6a1a      	ldr	r2, [r3, #32]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	43db      	mvns	r3, r3
 8002074:	4904      	ldr	r1, [pc, #16]	; (8002088 <LL_EXTI_DisableIT_32_63+0x24>)
 8002076:	4013      	ands	r3, r2
 8002078:	620b      	str	r3, [r1, #32]
}
 800207a:	bf00      	nop
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	40010400 	.word	0x40010400

0800208c <LL_EXTI_EnableEvent_0_31>:
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8002094:	4b05      	ldr	r3, [pc, #20]	; (80020ac <LL_EXTI_EnableEvent_0_31+0x20>)
 8002096:	685a      	ldr	r2, [r3, #4]
 8002098:	4904      	ldr	r1, [pc, #16]	; (80020ac <LL_EXTI_EnableEvent_0_31+0x20>)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4313      	orrs	r3, r2
 800209e:	604b      	str	r3, [r1, #4]
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr
 80020ac:	40010400 	.word	0x40010400

080020b0 <LL_EXTI_EnableEvent_32_63>:
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 80020b8:	4b05      	ldr	r3, [pc, #20]	; (80020d0 <LL_EXTI_EnableEvent_32_63+0x20>)
 80020ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020bc:	4904      	ldr	r1, [pc, #16]	; (80020d0 <LL_EXTI_EnableEvent_32_63+0x20>)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	624b      	str	r3, [r1, #36]	; 0x24
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr
 80020d0:	40010400 	.word	0x40010400

080020d4 <LL_EXTI_DisableEvent_0_31>:
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80020dc:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <LL_EXTI_DisableEvent_0_31+0x24>)
 80020de:	685a      	ldr	r2, [r3, #4]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	43db      	mvns	r3, r3
 80020e4:	4904      	ldr	r1, [pc, #16]	; (80020f8 <LL_EXTI_DisableEvent_0_31+0x24>)
 80020e6:	4013      	ands	r3, r2
 80020e8:	604b      	str	r3, [r1, #4]
}
 80020ea:	bf00      	nop
 80020ec:	370c      	adds	r7, #12
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	40010400 	.word	0x40010400

080020fc <LL_EXTI_DisableEvent_32_63>:
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8002104:	4b06      	ldr	r3, [pc, #24]	; (8002120 <LL_EXTI_DisableEvent_32_63+0x24>)
 8002106:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	43db      	mvns	r3, r3
 800210c:	4904      	ldr	r1, [pc, #16]	; (8002120 <LL_EXTI_DisableEvent_32_63+0x24>)
 800210e:	4013      	ands	r3, r2
 8002110:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002112:	bf00      	nop
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	40010400 	.word	0x40010400

08002124 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800212c:	4b05      	ldr	r3, [pc, #20]	; (8002144 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	4904      	ldr	r1, [pc, #16]	; (8002144 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4313      	orrs	r3, r2
 8002136:	608b      	str	r3, [r1, #8]
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr
 8002144:	40010400 	.word	0x40010400

08002148 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8002150:	4b05      	ldr	r3, [pc, #20]	; (8002168 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002152:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002154:	4904      	ldr	r1, [pc, #16]	; (8002168 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4313      	orrs	r3, r2
 800215a:	628b      	str	r3, [r1, #40]	; 0x28
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	40010400 	.word	0x40010400

0800216c <LL_EXTI_DisableRisingTrig_0_31>:
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8002174:	4b06      	ldr	r3, [pc, #24]	; (8002190 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002176:	689a      	ldr	r2, [r3, #8]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	43db      	mvns	r3, r3
 800217c:	4904      	ldr	r1, [pc, #16]	; (8002190 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800217e:	4013      	ands	r3, r2
 8002180:	608b      	str	r3, [r1, #8]
}
 8002182:	bf00      	nop
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	40010400 	.word	0x40010400

08002194 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800219c:	4b06      	ldr	r3, [pc, #24]	; (80021b8 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800219e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	43db      	mvns	r3, r3
 80021a4:	4904      	ldr	r1, [pc, #16]	; (80021b8 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80021a6:	4013      	ands	r3, r2
 80021a8:	628b      	str	r3, [r1, #40]	; 0x28
}
 80021aa:	bf00      	nop
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	40010400 	.word	0x40010400

080021bc <LL_EXTI_EnableFallingTrig_0_31>:
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80021c4:	4b05      	ldr	r3, [pc, #20]	; (80021dc <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80021c6:	68da      	ldr	r2, [r3, #12]
 80021c8:	4904      	ldr	r1, [pc, #16]	; (80021dc <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	60cb      	str	r3, [r1, #12]
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	40010400 	.word	0x40010400

080021e0 <LL_EXTI_EnableFallingTrig_32_63>:
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 80021e8:	4b05      	ldr	r3, [pc, #20]	; (8002200 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80021ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021ec:	4904      	ldr	r1, [pc, #16]	; (8002200 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80021f4:	bf00      	nop
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr
 8002200:	40010400 	.word	0x40010400

08002204 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800220c:	4b06      	ldr	r3, [pc, #24]	; (8002228 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800220e:	68da      	ldr	r2, [r3, #12]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	43db      	mvns	r3, r3
 8002214:	4904      	ldr	r1, [pc, #16]	; (8002228 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002216:	4013      	ands	r3, r2
 8002218:	60cb      	str	r3, [r1, #12]
}
 800221a:	bf00      	nop
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	40010400 	.word	0x40010400

0800222c <LL_EXTI_DisableFallingTrig_32_63>:
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8002234:	4b06      	ldr	r3, [pc, #24]	; (8002250 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8002236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	43db      	mvns	r3, r3
 800223c:	4904      	ldr	r1, [pc, #16]	; (8002250 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800223e:	4013      	ands	r3, r2
 8002240:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8002242:	bf00      	nop
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	40010400 	.word	0x40010400

08002254 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other value : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 800225c:	2300      	movs	r3, #0
 800225e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	7a1b      	ldrb	r3, [r3, #8]
 8002264:	2b00      	cmp	r3, #0
 8002266:	f000 80d1 	beq.w	800240c <LL_EXTI_Init+0x1b8>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d063      	beq.n	800233a <LL_EXTI_Init+0xe6>
    {
      switch (EXTI_InitStruct->Mode)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	7a5b      	ldrb	r3, [r3, #9]
 8002276:	2b02      	cmp	r3, #2
 8002278:	d01c      	beq.n	80022b4 <LL_EXTI_Init+0x60>
 800227a:	2b02      	cmp	r3, #2
 800227c:	dc25      	bgt.n	80022ca <LL_EXTI_Init+0x76>
 800227e:	2b00      	cmp	r3, #0
 8002280:	d002      	beq.n	8002288 <LL_EXTI_Init+0x34>
 8002282:	2b01      	cmp	r3, #1
 8002284:	d00b      	beq.n	800229e <LL_EXTI_Init+0x4a>
 8002286:	e020      	b.n	80022ca <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff ff21 	bl	80020d4 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4618      	mov	r0, r3
 8002298:	f7ff feac 	bl	8001ff4 <LL_EXTI_EnableIT_0_31>
          break;
 800229c:	e018      	b.n	80022d0 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7ff feca 	bl	800203c <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7ff feed 	bl	800208c <LL_EXTI_EnableEvent_0_31>
          break;
 80022b2:	e00d      	b.n	80022d0 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff fe9b 	bl	8001ff4 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7ff fee2 	bl	800208c <LL_EXTI_EnableEvent_0_31>
          break;
 80022c8:	e002      	b.n	80022d0 <LL_EXTI_Init+0x7c>
        default:
          status = 0x01u;
 80022ca:	2301      	movs	r3, #1
 80022cc:	60fb      	str	r3, [r7, #12]
          break;
 80022ce:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	7a9b      	ldrb	r3, [r3, #10]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d030      	beq.n	800233a <LL_EXTI_Init+0xe6>
      {
        switch (EXTI_InitStruct->Trigger)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	7a9b      	ldrb	r3, [r3, #10]
 80022dc:	2b03      	cmp	r3, #3
 80022de:	d01c      	beq.n	800231a <LL_EXTI_Init+0xc6>
 80022e0:	2b03      	cmp	r3, #3
 80022e2:	dc25      	bgt.n	8002330 <LL_EXTI_Init+0xdc>
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d002      	beq.n	80022ee <LL_EXTI_Init+0x9a>
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d00b      	beq.n	8002304 <LL_EXTI_Init+0xb0>
 80022ec:	e020      	b.n	8002330 <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7ff ff86 	bl	8002204 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff ff11 	bl	8002124 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8002302:	e01b      	b.n	800233c <LL_EXTI_Init+0xe8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4618      	mov	r0, r3
 800230a:	f7ff ff2f 	bl	800216c <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4618      	mov	r0, r3
 8002314:	f7ff ff52 	bl	80021bc <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002318:	e010      	b.n	800233c <LL_EXTI_Init+0xe8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff ff00 	bl	8002124 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4618      	mov	r0, r3
 800232a:	f7ff ff47 	bl	80021bc <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800232e:	e005      	b.n	800233c <LL_EXTI_Init+0xe8>
          default:
            status |= 0x02u;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f043 0302 	orr.w	r3, r3, #2
 8002336:	60fb      	str	r3, [r7, #12]
            break;
 8002338:	e000      	b.n	800233c <LL_EXTI_Init+0xe8>
        }
      }
 800233a:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d078      	beq.n	8002436 <LL_EXTI_Init+0x1e2>
    {
      switch (EXTI_InitStruct->Mode)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	7a5b      	ldrb	r3, [r3, #9]
 8002348:	2b02      	cmp	r3, #2
 800234a:	d01c      	beq.n	8002386 <LL_EXTI_Init+0x132>
 800234c:	2b02      	cmp	r3, #2
 800234e:	dc25      	bgt.n	800239c <LL_EXTI_Init+0x148>
 8002350:	2b00      	cmp	r3, #0
 8002352:	d002      	beq.n	800235a <LL_EXTI_Init+0x106>
 8002354:	2b01      	cmp	r3, #1
 8002356:	d00b      	beq.n	8002370 <LL_EXTI_Init+0x11c>
 8002358:	e020      	b.n	800239c <LL_EXTI_Init+0x148>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	4618      	mov	r0, r3
 8002360:	f7ff fecc 	bl	80020fc <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff fe55 	bl	8002018 <LL_EXTI_EnableIT_32_63>
          break;
 800236e:	e01a      	b.n	80023a6 <LL_EXTI_Init+0x152>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	4618      	mov	r0, r3
 8002376:	f7ff fe75 	bl	8002064 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	4618      	mov	r0, r3
 8002380:	f7ff fe96 	bl	80020b0 <LL_EXTI_EnableEvent_32_63>
          break;
 8002384:	e00f      	b.n	80023a6 <LL_EXTI_Init+0x152>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	4618      	mov	r0, r3
 800238c:	f7ff fe44 	bl	8002018 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	4618      	mov	r0, r3
 8002396:	f7ff fe8b 	bl	80020b0 <LL_EXTI_EnableEvent_32_63>
          break;
 800239a:	e004      	b.n	80023a6 <LL_EXTI_Init+0x152>
        default:
          status |= 0x04u;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f043 0304 	orr.w	r3, r3, #4
 80023a2:	60fb      	str	r3, [r7, #12]
          break;
 80023a4:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	7a9b      	ldrb	r3, [r3, #10]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d043      	beq.n	8002436 <LL_EXTI_Init+0x1e2>
      {
        switch (EXTI_InitStruct->Trigger)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	7a9b      	ldrb	r3, [r3, #10]
 80023b2:	2b03      	cmp	r3, #3
 80023b4:	d01c      	beq.n	80023f0 <LL_EXTI_Init+0x19c>
 80023b6:	2b03      	cmp	r3, #3
 80023b8:	dc25      	bgt.n	8002406 <LL_EXTI_Init+0x1b2>
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d002      	beq.n	80023c4 <LL_EXTI_Init+0x170>
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d00b      	beq.n	80023da <LL_EXTI_Init+0x186>
 80023c2:	e020      	b.n	8002406 <LL_EXTI_Init+0x1b2>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7ff ff2f 	bl	800222c <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7ff feb8 	bl	8002148 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 80023d8:	e02e      	b.n	8002438 <LL_EXTI_Init+0x1e4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	4618      	mov	r0, r3
 80023e0:	f7ff fed8 	bl	8002194 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff fef9 	bl	80021e0 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80023ee:	e023      	b.n	8002438 <LL_EXTI_Init+0x1e4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff fea7 	bl	8002148 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	4618      	mov	r0, r3
 8002400:	f7ff feee 	bl	80021e0 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8002404:	e018      	b.n	8002438 <LL_EXTI_Init+0x1e4>
          default:
            status = ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	60fb      	str	r3, [r7, #12]
            break;
 800240a:	e015      	b.n	8002438 <LL_EXTI_Init+0x1e4>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff fe13 	bl	800203c <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4618      	mov	r0, r3
 800241c:	f7ff fe5a 	bl	80020d4 <LL_EXTI_DisableEvent_0_31>
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	4618      	mov	r0, r3
 8002426:	f7ff fe1d 	bl	8002064 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	4618      	mov	r0, r3
 8002430:	f7ff fe64 	bl	80020fc <LL_EXTI_DisableEvent_32_63>
 8002434:	e000      	b.n	8002438 <LL_EXTI_Init+0x1e4>
      }
 8002436:	bf00      	nop
  }

  return status;
 8002438:	68fb      	ldr	r3, [r7, #12]
}
 800243a:	4618      	mov	r0, r3
 800243c:	3710      	adds	r7, #16
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <LL_GPIO_SetPinMode>:
{
 8002442:	b480      	push	{r7}
 8002444:	b08b      	sub	sp, #44	; 0x2c
 8002446:	af00      	add	r7, sp, #0
 8002448:	60f8      	str	r0, [r7, #12]
 800244a:	60b9      	str	r1, [r7, #8]
 800244c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	fa93 f3a3 	rbit	r3, r3
 800245c:	613b      	str	r3, [r7, #16]
  return result;
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d101      	bne.n	800246c <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8002468:	2320      	movs	r3, #32
 800246a:	e003      	b.n	8002474 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	fab3 f383 	clz	r3, r3
 8002472:	b2db      	uxtb	r3, r3
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	2103      	movs	r1, #3
 8002478:	fa01 f303 	lsl.w	r3, r1, r3
 800247c:	43db      	mvns	r3, r3
 800247e:	401a      	ands	r2, r3
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002484:	6a3b      	ldr	r3, [r7, #32]
 8002486:	fa93 f3a3 	rbit	r3, r3
 800248a:	61fb      	str	r3, [r7, #28]
  return result;
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8002496:	2320      	movs	r3, #32
 8002498:	e003      	b.n	80024a2 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800249a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249c:	fab3 f383 	clz	r3, r3
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	6879      	ldr	r1, [r7, #4]
 80024a6:	fa01 f303 	lsl.w	r3, r1, r3
 80024aa:	431a      	orrs	r2, r3
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	601a      	str	r2, [r3, #0]
}
 80024b0:	bf00      	nop
 80024b2:	372c      	adds	r7, #44	; 0x2c
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <LL_GPIO_SetPinOutputType>:
{
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	685a      	ldr	r2, [r3, #4]
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	43db      	mvns	r3, r3
 80024d0:	401a      	ands	r2, r3
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	6879      	ldr	r1, [r7, #4]
 80024d6:	fb01 f303 	mul.w	r3, r1, r3
 80024da:	431a      	orrs	r2, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	605a      	str	r2, [r3, #4]
}
 80024e0:	bf00      	nop
 80024e2:	3714      	adds	r7, #20
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <LL_GPIO_SetPinSpeed>:
{
 80024ec:	b480      	push	{r7}
 80024ee:	b08b      	sub	sp, #44	; 0x2c
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	689a      	ldr	r2, [r3, #8]
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	fa93 f3a3 	rbit	r3, r3
 8002506:	613b      	str	r3, [r7, #16]
  return result;
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8002512:	2320      	movs	r3, #32
 8002514:	e003      	b.n	800251e <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	fab3 f383 	clz	r3, r3
 800251c:	b2db      	uxtb	r3, r3
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	2103      	movs	r1, #3
 8002522:	fa01 f303 	lsl.w	r3, r1, r3
 8002526:	43db      	mvns	r3, r3
 8002528:	401a      	ands	r2, r3
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252e:	6a3b      	ldr	r3, [r7, #32]
 8002530:	fa93 f3a3 	rbit	r3, r3
 8002534:	61fb      	str	r3, [r7, #28]
  return result;
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800253a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253c:	2b00      	cmp	r3, #0
 800253e:	d101      	bne.n	8002544 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8002540:	2320      	movs	r3, #32
 8002542:	e003      	b.n	800254c <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8002544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002546:	fab3 f383 	clz	r3, r3
 800254a:	b2db      	uxtb	r3, r3
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	6879      	ldr	r1, [r7, #4]
 8002550:	fa01 f303 	lsl.w	r3, r1, r3
 8002554:	431a      	orrs	r2, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	609a      	str	r2, [r3, #8]
}
 800255a:	bf00      	nop
 800255c:	372c      	adds	r7, #44	; 0x2c
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr

08002566 <LL_GPIO_SetPinPull>:
{
 8002566:	b480      	push	{r7}
 8002568:	b08b      	sub	sp, #44	; 0x2c
 800256a:	af00      	add	r7, sp, #0
 800256c:	60f8      	str	r0, [r7, #12]
 800256e:	60b9      	str	r1, [r7, #8]
 8002570:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	68da      	ldr	r2, [r3, #12]
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	fa93 f3a3 	rbit	r3, r3
 8002580:	613b      	str	r3, [r7, #16]
  return result;
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d101      	bne.n	8002590 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800258c:	2320      	movs	r3, #32
 800258e:	e003      	b.n	8002598 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	fab3 f383 	clz	r3, r3
 8002596:	b2db      	uxtb	r3, r3
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	2103      	movs	r1, #3
 800259c:	fa01 f303 	lsl.w	r3, r1, r3
 80025a0:	43db      	mvns	r3, r3
 80025a2:	401a      	ands	r2, r3
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a8:	6a3b      	ldr	r3, [r7, #32]
 80025aa:	fa93 f3a3 	rbit	r3, r3
 80025ae:	61fb      	str	r3, [r7, #28]
  return result;
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80025b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80025ba:	2320      	movs	r3, #32
 80025bc:	e003      	b.n	80025c6 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80025be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c0:	fab3 f383 	clz	r3, r3
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	6879      	ldr	r1, [r7, #4]
 80025ca:	fa01 f303 	lsl.w	r3, r1, r3
 80025ce:	431a      	orrs	r2, r3
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	60da      	str	r2, [r3, #12]
}
 80025d4:	bf00      	nop
 80025d6:	372c      	adds	r7, #44	; 0x2c
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <LL_GPIO_SetAFPin_0_7>:
{
 80025e0:	b480      	push	{r7}
 80025e2:	b08b      	sub	sp, #44	; 0x2c
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6a1a      	ldr	r2, [r3, #32]
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	fa93 f3a3 	rbit	r3, r3
 80025fa:	613b      	str	r3, [r7, #16]
  return result;
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8002606:	2320      	movs	r3, #32
 8002608:	e003      	b.n	8002612 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	fab3 f383 	clz	r3, r3
 8002610:	b2db      	uxtb	r3, r3
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	210f      	movs	r1, #15
 8002616:	fa01 f303 	lsl.w	r3, r1, r3
 800261a:	43db      	mvns	r3, r3
 800261c:	401a      	ands	r2, r3
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002622:	6a3b      	ldr	r3, [r7, #32]
 8002624:	fa93 f3a3 	rbit	r3, r3
 8002628:	61fb      	str	r3, [r7, #28]
  return result;
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800262e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002630:	2b00      	cmp	r3, #0
 8002632:	d101      	bne.n	8002638 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8002634:	2320      	movs	r3, #32
 8002636:	e003      	b.n	8002640 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8002638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263a:	fab3 f383 	clz	r3, r3
 800263e:	b2db      	uxtb	r3, r3
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	6879      	ldr	r1, [r7, #4]
 8002644:	fa01 f303 	lsl.w	r3, r1, r3
 8002648:	431a      	orrs	r2, r3
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	621a      	str	r2, [r3, #32]
}
 800264e:	bf00      	nop
 8002650:	372c      	adds	r7, #44	; 0x2c
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr

0800265a <LL_GPIO_SetAFPin_8_15>:
{
 800265a:	b480      	push	{r7}
 800265c:	b08b      	sub	sp, #44	; 0x2c
 800265e:	af00      	add	r7, sp, #0
 8002660:	60f8      	str	r0, [r7, #12]
 8002662:	60b9      	str	r1, [r7, #8]
 8002664:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	0a1b      	lsrs	r3, r3, #8
 800266e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	fa93 f3a3 	rbit	r3, r3
 8002676:	613b      	str	r3, [r7, #16]
  return result;
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8002682:	2320      	movs	r3, #32
 8002684:	e003      	b.n	800268e <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	fab3 f383 	clz	r3, r3
 800268c:	b2db      	uxtb	r3, r3
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	210f      	movs	r1, #15
 8002692:	fa01 f303 	lsl.w	r3, r1, r3
 8002696:	43db      	mvns	r3, r3
 8002698:	401a      	ands	r2, r3
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	0a1b      	lsrs	r3, r3, #8
 800269e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a0:	6a3b      	ldr	r3, [r7, #32]
 80026a2:	fa93 f3a3 	rbit	r3, r3
 80026a6:	61fb      	str	r3, [r7, #28]
  return result;
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80026ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d101      	bne.n	80026b6 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80026b2:	2320      	movs	r3, #32
 80026b4:	e003      	b.n	80026be <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80026b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b8:	fab3 f383 	clz	r3, r3
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	6879      	ldr	r1, [r7, #4]
 80026c2:	fa01 f303 	lsl.w	r3, r1, r3
 80026c6:	431a      	orrs	r2, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	625a      	str	r2, [r3, #36]	; 0x24
}
 80026cc:	bf00      	nop
 80026ce:	372c      	adds	r7, #44	; 0x2c
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b088      	sub	sp, #32
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	fa93 f3a3 	rbit	r3, r3
 80026ee:	60fb      	str	r3, [r7, #12]
  return result;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <LL_GPIO_Init+0x26>
    return 32U;
 80026fa:	2320      	movs	r3, #32
 80026fc:	e003      	b.n	8002706 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	fab3 f383 	clz	r3, r3
 8002704:	b2db      	uxtb	r3, r3
 8002706:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002708:	e048      	b.n	800279c <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	2101      	movs	r1, #1
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	fa01 f303 	lsl.w	r3, r1, r3
 8002716:	4013      	ands	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d03a      	beq.n	8002796 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d003      	beq.n	8002730 <LL_GPIO_Init+0x58>
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	2b02      	cmp	r3, #2
 800272e:	d10e      	bne.n	800274e <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	461a      	mov	r2, r3
 8002736:	69b9      	ldr	r1, [r7, #24]
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f7ff fed7 	bl	80024ec <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	6819      	ldr	r1, [r3, #0]
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	461a      	mov	r2, r3
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f7ff feb7 	bl	80024bc <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	461a      	mov	r2, r3
 8002754:	69b9      	ldr	r1, [r7, #24]
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f7ff ff05 	bl	8002566 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	2b02      	cmp	r3, #2
 8002762:	d111      	bne.n	8002788 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	2bff      	cmp	r3, #255	; 0xff
 8002768:	d807      	bhi.n	800277a <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	461a      	mov	r2, r3
 8002770:	69b9      	ldr	r1, [r7, #24]
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f7ff ff34 	bl	80025e0 <LL_GPIO_SetAFPin_0_7>
 8002778:	e006      	b.n	8002788 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	461a      	mov	r2, r3
 8002780:	69b9      	ldr	r1, [r7, #24]
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f7ff ff69 	bl	800265a <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	461a      	mov	r2, r3
 800278e:	69b9      	ldr	r1, [r7, #24]
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f7ff fe56 	bl	8002442 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	3301      	adds	r3, #1
 800279a:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	fa22 f303 	lsr.w	r3, r2, r3
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1af      	bne.n	800270a <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3720      	adds	r7, #32
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <LL_SPI_IsEnabled>:
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027c4:	2b40      	cmp	r3, #64	; 0x40
 80027c6:	d101      	bne.n	80027cc <LL_SPI_IsEnabled+0x18>
 80027c8:	2301      	movs	r3, #1
 80027ca:	e000      	b.n	80027ce <LL_SPI_IsEnabled+0x1a>
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr

080027da <LL_SPI_SetRxFIFOThreshold>:
{
 80027da:	b480      	push	{r7}
 80027dc:	b083      	sub	sp, #12
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
 80027e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	431a      	orrs	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	605a      	str	r2, [r3, #4]
}
 80027f4:	bf00      	nop
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <LL_SPI_SetCRCPolynomial>:
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	b29b      	uxth	r3, r3
 800280e:	461a      	mov	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	611a      	str	r2, [r3, #16]
}
 8002814:	bf00      	nop
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f7ff ffc0 	bl	80027b4 <LL_SPI_IsEnabled>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d145      	bne.n	80028c6 <LL_SPI_Init+0xa6>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002842:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8002846:	683a      	ldr	r2, [r7, #0]
 8002848:	6811      	ldr	r1, [r2, #0]
 800284a:	683a      	ldr	r2, [r7, #0]
 800284c:	6852      	ldr	r2, [r2, #4]
 800284e:	4311      	orrs	r1, r2
 8002850:	683a      	ldr	r2, [r7, #0]
 8002852:	68d2      	ldr	r2, [r2, #12]
 8002854:	4311      	orrs	r1, r2
 8002856:	683a      	ldr	r2, [r7, #0]
 8002858:	6912      	ldr	r2, [r2, #16]
 800285a:	4311      	orrs	r1, r2
 800285c:	683a      	ldr	r2, [r7, #0]
 800285e:	6952      	ldr	r2, [r2, #20]
 8002860:	4311      	orrs	r1, r2
 8002862:	683a      	ldr	r2, [r7, #0]
 8002864:	6992      	ldr	r2, [r2, #24]
 8002866:	4311      	orrs	r1, r2
 8002868:	683a      	ldr	r2, [r7, #0]
 800286a:	69d2      	ldr	r2, [r2, #28]
 800286c:	4311      	orrs	r1, r2
 800286e:	683a      	ldr	r2, [r7, #0]
 8002870:	6a12      	ldr	r2, [r2, #32]
 8002872:	430a      	orrs	r2, r1
 8002874:	431a      	orrs	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002882:	f023 0304 	bic.w	r3, r3, #4
 8002886:	683a      	ldr	r2, [r7, #0]
 8002888:	6891      	ldr	r1, [r2, #8]
 800288a:	683a      	ldr	r2, [r7, #0]
 800288c:	6952      	ldr	r2, [r2, #20]
 800288e:	0c12      	lsrs	r2, r2, #16
 8002890:	430a      	orrs	r2, r1
 8002892:	431a      	orrs	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	605a      	str	r2, [r3, #4]
               SPI_CR2_DS | SPI_CR2_SSOE,
               SPI_InitStruct->DataWidth | (SPI_InitStruct->NSS >> 16U));

    /* Set Rx FIFO to Quarter (1 Byte) in case of 8 Bits mode. No DataPacking by default */
    if (SPI_InitStruct->DataWidth < LL_SPI_DATAWIDTH_9BIT)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028a0:	d204      	bcs.n	80028ac <LL_SPI_Init+0x8c>
    {
      LL_SPI_SetRxFIFOThreshold(SPIx, LL_SPI_RX_FIFO_TH_QUARTER);
 80028a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f7ff ff97 	bl	80027da <LL_SPI_SetRxFIFOThreshold>

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	6a1b      	ldr	r3, [r3, #32]
 80028b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028b4:	d105      	bne.n	80028c2 <LL_SPI_Init+0xa2>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ba:	4619      	mov	r1, r3
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f7ff ff9f 	bl	8002800 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 80028c2:	2300      	movs	r3, #0
 80028c4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80028c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3710      	adds	r7, #16
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <LL_TIM_SetPrescaler>:
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	683a      	ldr	r2, [r7, #0]
 80028de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80028e0:	bf00      	nop
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <LL_TIM_SetAutoReload>:
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	683a      	ldr	r2, [r7, #0]
 80028fa:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <LL_TIM_SetRepetitionCounter>:
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002918:	bf00      	nop
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	695b      	ldr	r3, [r3, #20]
 8002930:	f043 0201 	orr.w	r2, r3, #1
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	615a      	str	r2, [r3, #20]
}
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4a3d      	ldr	r2, [pc, #244]	; (8002a4c <LL_TIM_Init+0x108>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d013      	beq.n	8002984 <LL_TIM_Init+0x40>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002962:	d00f      	beq.n	8002984 <LL_TIM_Init+0x40>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4a3a      	ldr	r2, [pc, #232]	; (8002a50 <LL_TIM_Init+0x10c>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d00b      	beq.n	8002984 <LL_TIM_Init+0x40>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a39      	ldr	r2, [pc, #228]	; (8002a54 <LL_TIM_Init+0x110>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d007      	beq.n	8002984 <LL_TIM_Init+0x40>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4a38      	ldr	r2, [pc, #224]	; (8002a58 <LL_TIM_Init+0x114>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d003      	beq.n	8002984 <LL_TIM_Init+0x40>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4a37      	ldr	r2, [pc, #220]	; (8002a5c <LL_TIM_Init+0x118>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d106      	bne.n	8002992 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	4313      	orrs	r3, r2
 8002990:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a2d      	ldr	r2, [pc, #180]	; (8002a4c <LL_TIM_Init+0x108>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d01f      	beq.n	80029da <LL_TIM_Init+0x96>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029a0:	d01b      	beq.n	80029da <LL_TIM_Init+0x96>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a2a      	ldr	r2, [pc, #168]	; (8002a50 <LL_TIM_Init+0x10c>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d017      	beq.n	80029da <LL_TIM_Init+0x96>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a29      	ldr	r2, [pc, #164]	; (8002a54 <LL_TIM_Init+0x110>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d013      	beq.n	80029da <LL_TIM_Init+0x96>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a28      	ldr	r2, [pc, #160]	; (8002a58 <LL_TIM_Init+0x114>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d00f      	beq.n	80029da <LL_TIM_Init+0x96>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a27      	ldr	r2, [pc, #156]	; (8002a5c <LL_TIM_Init+0x118>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d00b      	beq.n	80029da <LL_TIM_Init+0x96>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a26      	ldr	r2, [pc, #152]	; (8002a60 <LL_TIM_Init+0x11c>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d007      	beq.n	80029da <LL_TIM_Init+0x96>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a25      	ldr	r2, [pc, #148]	; (8002a64 <LL_TIM_Init+0x120>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d003      	beq.n	80029da <LL_TIM_Init+0x96>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a24      	ldr	r2, [pc, #144]	; (8002a68 <LL_TIM_Init+0x124>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d106      	bne.n	80029e8 <LL_TIM_Init+0xa4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	4619      	mov	r1, r3
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f7ff ff79 	bl	80028ec <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	881b      	ldrh	r3, [r3, #0]
 80029fe:	4619      	mov	r1, r3
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f7ff ff65 	bl	80028d0 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a10      	ldr	r2, [pc, #64]	; (8002a4c <LL_TIM_Init+0x108>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d00f      	beq.n	8002a2e <LL_TIM_Init+0xea>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a12      	ldr	r2, [pc, #72]	; (8002a5c <LL_TIM_Init+0x118>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d00b      	beq.n	8002a2e <LL_TIM_Init+0xea>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a11      	ldr	r2, [pc, #68]	; (8002a60 <LL_TIM_Init+0x11c>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d007      	beq.n	8002a2e <LL_TIM_Init+0xea>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a10      	ldr	r2, [pc, #64]	; (8002a64 <LL_TIM_Init+0x120>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d003      	beq.n	8002a2e <LL_TIM_Init+0xea>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a0f      	ldr	r2, [pc, #60]	; (8002a68 <LL_TIM_Init+0x124>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d105      	bne.n	8002a3a <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	4619      	mov	r1, r3
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f7ff ff67 	bl	8002908 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f7ff ff72 	bl	8002924 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	40012c00 	.word	0x40012c00
 8002a50:	40000400 	.word	0x40000400
 8002a54:	40000800 	.word	0x40000800
 8002a58:	40000c00 	.word	0x40000c00
 8002a5c:	40013400 	.word	0x40013400
 8002a60:	40014000 	.word	0x40014000
 8002a64:	40014400 	.word	0x40014400
 8002a68:	40014800 	.word	0x40014800

08002a6c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a7e:	4a07      	ldr	r2, [pc, #28]	; (8002a9c <LL_InitTick+0x30>)
 8002a80:	3b01      	subs	r3, #1
 8002a82:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002a84:	4b05      	ldr	r3, [pc, #20]	; (8002a9c <LL_InitTick+0x30>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a8a:	4b04      	ldr	r3, [pc, #16]	; (8002a9c <LL_InitTick+0x30>)
 8002a8c:	2205      	movs	r2, #5
 8002a8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002a90:	bf00      	nop
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr
 8002a9c:	e000e010 	.word	0xe000e010

08002aa0 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002aa8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f7ff ffdd 	bl	8002a6c <LL_InitTick>
}
 8002ab2:	bf00      	nop
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
	...

08002abc <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002ac4:	4a04      	ldr	r2, [pc, #16]	; (8002ad8 <LL_SetSystemCoreClock+0x1c>)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6013      	str	r3, [r2, #0]
}
 8002aca:	bf00      	nop
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	20000000 	.word	0x20000000

08002adc <__libc_init_array>:
 8002adc:	b570      	push	{r4, r5, r6, lr}
 8002ade:	4d0d      	ldr	r5, [pc, #52]	; (8002b14 <__libc_init_array+0x38>)
 8002ae0:	4c0d      	ldr	r4, [pc, #52]	; (8002b18 <__libc_init_array+0x3c>)
 8002ae2:	1b64      	subs	r4, r4, r5
 8002ae4:	10a4      	asrs	r4, r4, #2
 8002ae6:	2600      	movs	r6, #0
 8002ae8:	42a6      	cmp	r6, r4
 8002aea:	d109      	bne.n	8002b00 <__libc_init_array+0x24>
 8002aec:	4d0b      	ldr	r5, [pc, #44]	; (8002b1c <__libc_init_array+0x40>)
 8002aee:	4c0c      	ldr	r4, [pc, #48]	; (8002b20 <__libc_init_array+0x44>)
 8002af0:	f000 f820 	bl	8002b34 <_init>
 8002af4:	1b64      	subs	r4, r4, r5
 8002af6:	10a4      	asrs	r4, r4, #2
 8002af8:	2600      	movs	r6, #0
 8002afa:	42a6      	cmp	r6, r4
 8002afc:	d105      	bne.n	8002b0a <__libc_init_array+0x2e>
 8002afe:	bd70      	pop	{r4, r5, r6, pc}
 8002b00:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b04:	4798      	blx	r3
 8002b06:	3601      	adds	r6, #1
 8002b08:	e7ee      	b.n	8002ae8 <__libc_init_array+0xc>
 8002b0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b0e:	4798      	blx	r3
 8002b10:	3601      	adds	r6, #1
 8002b12:	e7f2      	b.n	8002afa <__libc_init_array+0x1e>
 8002b14:	08002b5c 	.word	0x08002b5c
 8002b18:	08002b5c 	.word	0x08002b5c
 8002b1c:	08002b5c 	.word	0x08002b5c
 8002b20:	08002b60 	.word	0x08002b60

08002b24 <memset>:
 8002b24:	4402      	add	r2, r0
 8002b26:	4603      	mov	r3, r0
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d100      	bne.n	8002b2e <memset+0xa>
 8002b2c:	4770      	bx	lr
 8002b2e:	f803 1b01 	strb.w	r1, [r3], #1
 8002b32:	e7f9      	b.n	8002b28 <memset+0x4>

08002b34 <_init>:
 8002b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b36:	bf00      	nop
 8002b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b3a:	bc08      	pop	{r3}
 8002b3c:	469e      	mov	lr, r3
 8002b3e:	4770      	bx	lr

08002b40 <_fini>:
 8002b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b42:	bf00      	nop
 8002b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b46:	bc08      	pop	{r3}
 8002b48:	469e      	mov	lr, r3
 8002b4a:	4770      	bx	lr
